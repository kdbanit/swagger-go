openapi: 3.0.0
info:
  title: Документация публичного API
  description: "# Введение\nAPI Timeweb Cloud позволяет вам управлять ресурсами в\
    \ облаке программным способом с использованием обычных HTTP-запросов.\n\nМноже\
    ство функций, которые доступны в панели управления Timeweb Cloud, также доступ\
    ны через API, что позволяет вам автоматизировать ваши собственные сценарии.\n\n\
    В этой документации сперва будет описан общий дизайн и принципы работы API, а\
    \ после этого конкретные конечные точки. Также будут приведены примеры запросо\
    в к ним.\n\n\n## Запросы\nЗапросы должны выполняться по протоколу `HTTPS`, что\
    бы гарантировать шифрование транзакций. Поддерживаются следующие методы запрос\
    а:\n|Метод|Применение|\n|--- |--- |\n|GET|Извлекает данные о коллекциях и отде\
    льных ресурсах.|\n|POST|Для коллекций создает новый ресурс этого типа. Также и\
    спользуется для выполнения действий с конкретным ресурсом.|\n|PUT|Обновляет су\
    ществующий ресурс.|\n|PATCH|Некоторые ресурсы поддерживают частичное обновлени\
    е, то есть обновление только части атрибутов ресурса, в этом случае вместо мет\
    ода PUT будет использован PATCH.|\n|DELETE|Удаляет ресурс.|\n\nМетоды `POST`,\
    \ `PUT` и `PATCH` могут включать объект в тело запроса с типом содержимого `application/json`.\n\
    \n### Параметры в запросах\nНекоторые коллекции поддерживают пагинацию, поиск\
    \ или сортировку в запросах. В параметрах запроса требуется передать:\n- `limit`\
    \ — обозначает количество записей, которое необходимо вернуть\n - `offset` — у\
    казывает на смещение, относительно начала списка\n - `search` — позволяет указ\
    ать набор символов для поиска\n - `sort` — можно задать правило сортировки кол\
    лекции\n\n## Ответы\nЗапросы вернут один из следующих кодов состояния ответа HTTP:\n\
    \n|Статус|Описание|\n|--- |--- |\n|200 OK|Действие с ресурсом было выполнено у\
    спешно.|\n|201 Created|Ресурс был успешно создан. При этом ресурс может быть к\
    ак уже готовым к использованию, так и находиться в процессе запуска.|\n|204 No\
    \ Content|Действие с ресурсом было выполнено успешно, и ответ не содержит допо\
    лнительной информации в теле.|\n|400 Bad Request|Был отправлен неверный запрос\
    , например, в нем отсутствуют обязательные параметры и т. д. Тело ответа будет\
    \ содержать дополнительную информацию об ошибке.|\n|401 Unauthorized|Ошибка ау\
    тентификации.|\n|403 Forbidden|Аутентификация прошла успешно, но недостаточно\
    \ прав для выполнения действия.|\n|404 Not Found|Запрашиваемый ресурс не найде\
    н.|\n|409 Conflict|Запрос конфликтует с текущим состоянием.|\n|423 Locked|Ресу\
    рс из запроса заблокирован от применения к нему указанного метода.|\n|429 Too\
    \ Many Requests|Был достигнут лимит по количеству запросов в единицу времени.|\n\
    |500 Internal Server Error|При выполнении запроса произошла какая-то внутрення\
    я ошибка. Чтобы решить эту проблему, лучше всего создать тикет в панели управл\
    ения.|\n\n### Структура успешного ответа\nВсе конечные точки будут возвращать\
    \ данные в формате `JSON`. Ответы на `GET`-запросы будут иметь на верхнем уров\
    не следующую структуру атрибутов: \n|Название поля|Тип|Описание|\n|--- |--- |---\
    \ |\n|[entity_name]|object, object[], string[], number[], boolean|Динамическое\
    \ поле, которое будет меняться в зависимости от запрашиваемого ресурса и будет\
    \ содержать все атрибуты, необходимые для описания этого ресурса. Например, пр\
    и запросе списка баз данных будет возвращаться поле `dbs`, а при запросе конкр\
    етного облачного сервера `server`. Для некоторых конечных точек в ответе может\
    \ возвращаться сразу несколько ресурсов.|\n|meta|object|Опционально. Объект, к\
    оторый содержит вспомогательную информацию о ресурсе. Чаще всего будет встреча\
    ться при запросе коллекций и содержать поле `total`, которое будет указывать н\
    а количество элементов в коллекции.|\n|response_id|string|Опционально. В больш\
    инстве случаев в ответе будет содержаться уникальный идентификатор ответа в фо\
    рмате UUIDv4, который однозначно указывает на ваш запрос внутри нашей системы\
    . Если вам потребуется задать вопрос нашей поддержке, приложите к вопросу этот\
    \ идентификатор — так мы сможем найти ответ на него намного быстрее. Также вы\
    \ можете использовать этот идентификатор, чтобы убедиться, что это новый ответ\
    \ на запрос и результат не был получен из кэша.|\n\nПример запроса на получени\
    е списка SSH-ключей:\n```\n    HTTP/2.0 200 OK\n    {\n      \"ssh_keys\":[\n\
    \          {\n            \"body\":\"ssh-rsa AAAAB3NzaC1sdfghjkOAsBwWhs= example@device.local\"\
    ,\n            \"created_at\":\"2021-09-15T19:52:27Z\",\n            \"expired_at\"\
    :null,\n            \"id\":5297,\n            \"is_default\":false,\n        \
    \    \"name\":\"example@device.local\",\n            \"used_at\":null,\n     \
    \       \"used_by\":[]\n          }\n      ],\n      \"meta\":{\n          \"\
    total\":1\n      },\n      \"response_id\":\"94608d15-8672-4eed-8ab6-28bd6fa3cdf7\"\
    \n    }\n```\n\n### Структура ответа с ошибкой\n|Название поля|Тип|Описание|\n\
    |--- |--- |--- |\n|status_code|number|Короткий числовой идентификатор ошибки.|\n\
    |error_code|string|Короткий текстовый идентификатор ошибки, который уточняет ч\
    исловой идентификатор и удобен для программной обработки. Самый простой пример\
    \ — это код `not_found` для ошибки 404.|\n|message|string, string[]|Опциональн\
    о. В большинстве случаев в ответе будет содержаться человекочитаемое подробное\
    \ описание ошибки или ошибок, которые помогут понять, что нужно исправить.|\n\
    |response_id|string|Опционально. В большинстве случае в ответе будет содержать\
    ся уникальный идентификатор ответа в формате UUIDv4, который однозначно указыв\
    ает на ваш запрос внутри нашей системы. Если вам потребуется задать вопрос наш\
    ей поддержке, приложите к вопросу этот идентификатор — так мы сможем найти отв\
    ет на него намного быстрее.|\n\nПример:\n```\n    HTTP/2.0 403 Forbidden\n   \
    \ {\n      \"status_code\": 403,\n      \"error_code\":  \"forbidden\",\n    \
    \  \"message\":     \"You do not have access for the attempted action\",\n   \
    \   \"response_id\": \"94608d15-8672-4eed-8ab6-28bd6fa3cdf7\"\n    }\n```\n\n\
    ## Статусы ресурсов\nВажно учесть, что при создании большинства ресурсов внутр\
    и платформы вам будет сразу возвращен ответ от сервера со статусом `200 OK` ил\
    и `201 Created` и идентификатором созданного ресурса в теле ответа, но при это\
    м этот ресурс может быть ещё в *состоянии запуска*.\n\nДля того чтобы понять,\
    \ в каком состоянии сейчас находится ваш ресурс, мы добавили поле `status` в о\
    твет на получение информации о ресурсе.\n\nСписок статусов будет отличаться в\
    \ зависимости от типа ресурса. Увидеть поддерживаемый список статусов вы сможе\
    те в описании каждого конкретного ресурса.\n\n \n\n## Ограничение скорости зап\
    росов (Rate Limiting)\nЧтобы обеспечить стабильность для всех пользователей, Timeweb\
    \ Cloud защищает API от всплесков входящего трафика, анализируя количество зап\
    росов c каждого аккаунта к каждой конечной точке.\n\nЕсли ваше приложение отпр\
    авляет более 20 запросов в секунду на одну конечную точку, то для этого запрос\
    а API может вернуть код состояния HTTP `429 Too Many Requests`.\n\n\n## Аутент\
    ификация\nДоступ к API осуществляется с помощью JWT-токена. Токенами можно упр\
    авлять внутри панели управления Timeweb Cloud в разделе *API и Terraform*.\n\n\
    Токен необходимо передавать в заголовке каждого запроса в формате:\n```\n  Authorization:\
    \ Bearer $TIMEWEB_CLOUD_TOKEN\n```\n\n## Формат примеров API\nПримеры в этой д\
    окументации описаны с помощью `curl`, HTTP-клиента командной строки. На компью\
    терах `Linux` и `macOS` обычно по умолчанию установлен `curl`, и он доступен д\
    ля загрузки на всех популярных платформах, включая `Windows`.\n\nКаждый пример\
    \ разделен на несколько строк символом `\\`, который совместим с `bash`. Типич\
    ный пример выглядит так:\n```\n  curl -X PATCH \n    -H \"Content-Type: application/json\"\
    \ \n    -H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \n    -d '{\"name\"\
    :\"Cute Corvus\",\"comment\":\"Development Server\"}' \n    \"https://api.timeweb.cloud/api/v1/dedicated/1051\"\
    \n```\n- Параметр `-X` задает метод запроса. Для согласованности метод будет у\
    казан во всех примерах, даже если он явно не требуется для методов `GET`.\n- С\
    троки `-H` задают требуемые HTTP-заголовки.\n- Примеры, для которых требуется\
    \ объект JSON в теле запроса, передают требуемые данные через параметр `-d`.\n\
    \nЧтобы использовать приведенные примеры, не подставляя каждый раз в них свой\
    \ токен, вы можете добавить токен один раз в переменные окружения в вашей конс\
    оли. Например, на `Linux` это можно сделать с помощью команды:\n\n```\nTIMEWEB_CLOUD_TOKEN=\"\
    token\"\n```\n\nПосле этого токен будет автоматически подставляться в ваши зап\
    росы.\n\nОбратите внимание, что все значения в этой документации являются прим\
    ерами. Не полагайтесь на идентификаторы операционных систем, тарифов и т.д., и\
    спользуемые в примерах. Используйте соответствующую конечную точку для получен\
    ия значений перед созданием ресурсов.\n\n\n## Версионирование\nAPI построено с\
    огласно принципам [семантического версионирования](https://semver.org/lang/ru).\
    \ Это значит, что мы гарантируем обратную совместимость всех изменений в преде\
    лах одной мажорной версии.\n\nМажорная версия каждой конечной точки обозначает\
    ся в пути запроса, например, запрос `/api/v1/servers` указывает, что этот мето\
    д имеет версию 1."
  contact:
    email: info@timeweb.cloud
  version: 1.0.0
  x-title-i18n:
    eng: Timeweb Cloud API
servers:
- url: https://api.timeweb.cloud
security:
- Bearer: []
tags:
- name: Аккаунт
  description: "Группа методов, которая позволяет получить информацию о вашем теку\
    щем аккаунте. Обратите внимание, что API предоставляет только базовый функцион\
    ал для получения общей информации об аккаунте.</br></br> Подробнее о работе с\
    \ вашим аккаунтом через панель управления – в нашей <a href='https://timeweb.cloud/docs/account-management'\
    \ target='_blank'>базе знаний</a>."
  x-name-i18n:
    eng: Account
- name: Базы данных
  description: "Облачная база данных, или База данных как сервис (DBaaS) — облачно\
    е решение для хранения структурированных данных и управления ими. DBaaS обеспе\
    чивает полностью автоматизированную, гибкую и масштабируемую платформу для раб\
    оты с базами данных.</br></br> Подробнее об облачных базах данных – в нашей <a\
    \ href='https://timeweb.cloud/docs/dbaas' target='_blank'>базе знаний</a>."
  x-name-i18n:
    eng: Databases
- name: Балансировщики
  description: Балансировщик позволяет распределять входящий трафик между несколькими
    серверами для повышения доступности и отказоустойчивости вашего сервиса.</br></br>
    Подробнее о балансировщике нагрузки – в нашей <a href='https://timeweb.cloud/docs/load-balancer'
    target='_blank'>базе знаний</a>.
  x-name-i18n:
    eng: Balancers
- name: Выделенные серверы
  description: "Выделенные серверы используют, когда необходимо разместить сложную\
    \ нагруженную систему, для которой недостаточно мощностей виртуального хостинг\
    а или облачного сервера. Это может быть крупный сайт, интернет-магазин, любой\
    \ ресурсоемкий проект.</br></br> Подробнее о выделенных серверах – в нашей <a\
    \ href='https://timeweb.cloud/docs/dedicated' target='_blank'>базе знаний</a>."
  x-name-i18n:
    eng: Dedicated servers
- name: Домены
  description: "В Timeweb Cloud доступна регистрация и продление доменов более чем\
    \ в 350 зонах.</br></br> В зависимости от выбранной зоны, домен может быть зар\
    егистрирован через регистратора Таймвэб.Домены или через одного из наших партн\
    еров.</br></br> Подробнее о доменах – в нашей <a href='https://timeweb.cloud/docs/domains'\
    \ target='_blank'>базе знаний</a>."
  x-name-i18n:
    eng: Domains
- name: Облачные серверы
  description: "Облачные серверы — это способ размещения данных, при котором вы по\
    лучаете полный доступ (root-доступ) к виртуальному серверу и его настройкам. В\
    ы можете гибко масштабировать параметры (процессор, память, диск) сервера, пос\
    тепенно добавляя необходимые мощности, когда растет нагрузка, и снижать их, ко\
    гда нагрузка уменьшается. Соответствующим образом будет увеличиваться или умен\
    ьшаться стоимость сервера.</br></br> Подробнее об облачных серверах – в нашей\
    \ <a href='https://timeweb.cloud/docs/cloud-servers' target='_blank'>базе знан\
    ий</a>."
  x-name-i18n:
    eng: Servers
- name: Образы
  description: "Образы — это полная копия вашего облачного сервера в формате `Qcow2`,\
    \ со всеми настройками операционной системы, программного обеспечения и всем с\
    одержимым сервера. </br></br> Подробнее об образах – в нашей <a href='https://timeweb.cloud/docs/cloud-servers/manage-servers/server-images'\
    \ target='_blank'>базе знаний</a>."
  x-name-i18n:
    eng: Images
- name: Почта
  description: В Timeweb Cloud доступна инфраструктура готовых почтовых серверов.
    Вы можете создавать и настраивать неограниченное число ящиков на своих доменах.
    <br><br> Подробнее о сервисе почты – в нашей <a href='https://timeweb.cloud/docs/mail'
    target='_blank'>базе знаний</a>.
  x-name-i18n:
    eng: Mail
- name: Firewall
  description: Firewall позволяет фильтровать трафик по заранее установленным правилам.
    Вы можете создать несколько групп правил и подключить их на один или несколько
    облачных серверов.
  x-name-i18n:
    eng: Firewall
- name: Проекты
  description: "Проекты позволяют организовать ваши ресурсы в группы, соответствую\
    щие вашему стилю работы. Вы можете группировать ресурсы (например, облачные и\
    \ выделенные серверы, балансировщики нагрузки, базы данных и т.д.) таким образ\
    ом, чтобы они соответствовали приложениям, которые вы размещаете в облаке."
  x-name-i18n:
    eng: Projects
- name: Токены API
  description: "Токены API — это JWT-токены, с помощью которых вы можете получить\
    \ доступ к управлению вашей облачной инфраструктурой через API."
  x-name-i18n:
    eng: API keys
- name: Kubernetes
  description: "Kubernetes — программное обеспечение с открытым исходным кодом, пр\
    едназначенное для автоматизированного управления контейнерными приложениями. Kubernetes\
    \ обеспечит автоматическое развертывание, масштабирование, распределение нагру\
    зки, мониторинг сервисов, обработку ошибок и многое другое. </br></br> Подробн\
    ее о Kubernetes – в нашей <a href='https://timeweb.cloud/docs/k8s' target='_blank'>б\
    азе знаний</a>."
  x-name-i18n:
    eng: Kubernetes
- name: S3-хранилище
  description: "S3-хранилище — это универсальное объектное хранилище, совместимое\
    \ с Amazon S3 API, в котором можно размещать любые типы статических данных.</br></br>\
    \ Подробнее о хранилище S3 – в нашей <a href='https://timeweb.cloud/docs/s3-storage'\
    \ target='_blank'>базе знаний</a>.</br></br>Обратите внимание, что данное API\
    \ предоставляется независимо и совместно с Amazon S3 API. Описание принципов р\
    аботы и список поддерживаемых методов Amazon S3 API вы можете найти в <a href='https://timeweb.cloud/docs/s3-storage/s3-guide'\
    \ target='_blank'>базе знаний</a>."
  x-name-i18n:
    eng: S3
- name: SSH-ключи
  description: "Для безопасного подключения к облачным серверам вы можете использо\
    вать SSH-ключи. Их удобно сохранять в панели управления в разделе <a href='https://timeweb.cloud/my/sshkeys'\
    \ target='_blank'>SSH-ключи</a>, чтобы использовать при создании новых серверо\
    в."
  x-name-i18n:
    eng: SSH
- name: VPC
  description: ""
  x-name-i18n:
    eng: VPC
paths:
  /api/v1/account/finances:
    get:
      tags:
      - Аккаунт
      summary: Получение платежной информации
      description: "Чтобы получить платежную информацию, отправьте GET-запрос на `/api/v1/account/finances`."
      operationId: getFinances
      responses:
        "200":
          description: Объект JSON c ключом `finances`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/account/finances"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/account/finances', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/account/finances', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/account/finances', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/account/finances');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/account/finances\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/account/finances\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Account
  /api/v1/account/status:
    get:
      tags:
      - Аккаунт
      summary: Получение статуса аккаунта
      description: "Чтобы получить статус аккаунта, отправьте GET-запрос на `/api/v1/account/status`."
      operationId: getAccountStatus
      responses:
        "200":
          description: Объект JSON c ключом `status`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/account/status"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/account/status', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/account/status', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/account/status', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/account/status');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/account/status\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/account/status\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Account
  /api/v1/account/notification-settings:
    get:
      tags:
      - Аккаунт
      summary: Получение настроек уведомлений аккаунта
      description: "Чтобы получить статус аккаунта, отправьте GET запрос на `/api/v1/account/notification-settings`."
      operationId: getNotificationSettings
      responses:
        "200":
          description: Объект JSON c ключом `notification_settings`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/account/notification-settings"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/account/notification-settings', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/account/notification-settings', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/account/notification-settings', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/account/notification-settings');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/account/notification-settings\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/account/notification-settings\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Account
    patch:
      tags:
      - Аккаунт
      summary: Изменение настроек уведомлений аккаунта
      description: "Чтобы изменить настройки уведомлений аккаунта, отправьте PATCH\
        \ запрос на `/api/v1/account/notification-settings`."
      operationId: updateNotificationSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account_notificationsettings_body'
        required: true
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `notification_settings`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X PATCH \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"settings":[{"type":"account_blocked","channels":{"telegram":"on"}}]}' \
            "https://api.timeweb.cloud//api/v1/account/notification-settings"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud//api/v1/account/notification-settings', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'settings': [
                      {
                          'type': 'account_blocked',
                          'channels': {
                              'telegram': 'on'
                          }
                      }
                  ]
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud//api/v1/account/notification-settings',
              {
                  'settings': [
                      {
                          'type': 'account_blocked',
                          'channels': {
                              'telegram': 'on'
                          }
                      }
                  ]
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'settings': [
                  {
                      'type': 'account_blocked',
                      'channels': {
                          'telegram': 'on',
                      },
                  },
              ],
          }

          response = requests.patch('https://api.timeweb.cloud//api/v1/account/notification-settings', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"settings":[{"type":"account_blocked","channels":{"telegram":"on"}}]}'
          #response = requests.patch('https://api.timeweb.cloud//api/v1/account/notification-settings', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud//api/v1/account/notification-settings');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"settings":[{"type":"account_blocked","channels":{"telegram":"on"}}]}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"settings\":[{\"type\":\"account_blocked\"\
          ,\"channels\":{\"telegram\":\"on\"}}]}`)\n\treq, err := http.NewRequest(\"\
          PATCH\", \"https://api.timeweb.cloud//api/v1/account/notification-settings\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud//api/v1/account/notification-settings\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"settings\\\":[{\\\"type\\\":\\\"account_blocked\\\
          \",\\\"channels\\\":{\\\"telegram\\\":\\\"on\\\"}}]}\");\n\t\twriter.flush();\n\
          \t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Account
  /api/v1/images:
    get:
      tags:
      - Образы
      summary: Получение списка образов
      description: "Чтобы получить список образов, отправьте GET запрос на `/api/v1/images`"
      operationId: getImages
      parameters:
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          title: Limit
          type: integer
          default: 100
      - name: offset
        in: query
        required: false
        style: form
        explode: true
        schema:
          title: Offset
          type: integer
          default: 0
      responses:
        "200":
          description: Объект JSON c ключом images
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
              example:
                response_id: 4ecc2300-2437-4422-bad1-ea23a8fd167f
                meta:
                  total: 5
                images:
                - id: d0f151de-7e10-4470-91f6-c1401c87537c
                  status: new
                  created_at: 2023-03-27T14:14:13.129581
                  size: 16777216
                  name: image d0f151de-7e10-4470-91f6-c1401c87537c
                  description: description of image d0f151de-7e10-4470-91f6-c1401c87537c
                  disk_id: 395379
                  location: ru-1
                  os: ubuntu
                  progress: 0
                  is_custom: false
                - id: 8139c914-d1b2-4b45-abdd-8ea4d0b3c31c
                  status: new
                  created_at: 2023-03-27T14:14:13.129614
                  size: 8388608
                  name: image 8139c914-d1b2-4b45-abdd-8ea4d0b3c31c
                  description: description of image 8139c914-d1b2-4b45-abdd-8ea4d0b3c31c
                  disk_id: 131692
                  location: ru-1
                  os: ubuntu
                  progress: 0
                  is_custom: false
                - id: d1dc70c2-8067-4a01-84e4-c0acb96e2f40
                  status: new
                  created_at: 2023-03-27T14:14:13.129642
                  size: 33554432
                  name: image d1dc70c2-8067-4a01-84e4-c0acb96e2f40
                  description: description of image d1dc70c2-8067-4a01-84e4-c0acb96e2f40
                  disk_id: 688567
                  location: ru-1
                  os: ubuntu
                  progress: 0
                  is_custom: false
                - id: ace94d07-6279-4be5-9656-03e50080f2cd
                  status: new
                  created_at: 2023-03-27T14:14:13.129671
                  size: 33554432
                  name: image ace94d07-6279-4be5-9656-03e50080f2cd
                  description: description of image ace94d07-6279-4be5-9656-03e50080f2cd
                  disk_id: 731335
                  location: ru-1
                  os: ubuntu
                  progress: 0
                  is_custom: false
                - id: b652650b-556d-4e0c-941d-e788e51738fc
                  status: new
                  created_at: 2023-03-27T14:14:13.129699
                  size: 1048576
                  name: image b652650b-556d-4e0c-941d-e788e51738fc
                  description: description of image b652650b-556d-4e0c-941d-e788e51738fc
                  disk_id: 618449
                  location: ru-1
                  os: ubuntu
                  progress: 0
                  is_custom: false
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-tags-i18n:
        eng:
        - Images
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: "curl -X GET \\\n \"https://api.timeweb.cloud/api/v1/images\" \\\n\
          -H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\"\
          \  "
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/images', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/images', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/images', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/images');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/images\",\
          \ nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/images\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
    post:
      tags:
      - Образы
      summary: Создание образа
      description: "Чтобы создать образ, отправьте POST запрос в `/api/v1/images`,\
        \ задав необходимые атрибуты. \n\nДля загрузки собственного образа вам нуж\
        но отправить параметры `location`, `os` и не указывать `disk_id`. Поддержи\
        вается два способа загрузки:\n 1. По ссылке. Для этого укажите `upload_url`\
        \ с ссылкой на загрузку образа\n2. Из файла. Для этого воспользуйтесь мето\
        дом POST `/api/v1/images/{image_id}`\nОбраз будет создан с использованием\
        \ предоставленной информации. \n\n Тело ответа будет содержать объект JSON\
        \ с информацией о созданном образе."
      operationId: createImage
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageInAPI'
        required: true
      responses:
        "201":
          description: Образ создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201'
              example:
                response_id: b4d6ee85-4fa8-467a-b4ca-b7b6ef427104
                image:
                  id: f7838227-32e9-4251-b04c-5a4f04338b32
                  status: new
                  created_at: 2023-03-27T14:14:13.129473
                  size: 16777216
                  name: image f7838227-32e9-4251-b04c-5a4f04338b32
                  description: description of image f7838227-32e9-4251-b04c-5a4f04338b32
                  disk_id: 207999
                  location: ru-1
                  os: ubuntu
                  progress: 0
                  is_custom: false
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-tags-i18n:
        eng:
        - Images
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: "curl -X POST \\\n \"https://api.timeweb.cloud/api/v1/images\" \\\n\
          -H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\"\
          \ -d '{\"description\": \"\\u041c\\u043e\\u0439 \\u043e\\u0431\\u0440\\\
          u0430\\u0437 \\u0434\\u043b\\u044f \\u0434\\u0438\\u0441\\u043a\\u0430 123\"\
          , \"disk_id\": 123, \"upload_url\": null, \"location\": null, \"os\": null}'\
          \ \\\n  "
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/images', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{"description": "\\u041c\\u043e\\u0439 \\u043e\\u0431\\u0440\\u0430\\u0437 \\u0434\\u043b\\u044f \\u0434\\u0438\\u0441\\u043a\\u0430 123", "disk_id": 123, "upload_url": null, "location": null, "os": null}',
              body: JSON.stringify({
                  'description': '\u041C\u043E\u0439 \u043E\u0431\u0440\u0430\u0437 \u0434\u043B\u044F \u0434\u0438\u0441\u043A\u0430 123',
                  'disk_id': 123,
                  'upload_url': null,
                  'location': null,
                  'os': null
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/images',
              // '{"description": "\\u041c\\u043e\\u0439 \\u043e\\u0431\\u0440\\u0430\\u0437 \\u0434\\u043b\\u044f \\u0434\\u0438\\u0441\\u043a\\u0430 123", "disk_id": 123, "upload_url": null, "location": null, "os": null}',
              {
                  'description': '\u041C\u043E\u0439 \u043E\u0431\u0440\u0430\u0437 \u0434\u043B\u044F \u0434\u0438\u0441\u043A\u0430 123',
                  'disk_id': 123,
                  'upload_url': null,
                  'location': null,
                  'os': null
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              # Already added when you pass json=
              # 'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'description': 'Мой образ для диска 123',
              'disk_id': 123,
              'upload_url': None,
              'location': None,
              'os': None,
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/images', headers=headers, json=json_data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/images');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"description": "\\u041c\\u043e\\u0439 \\u043e\\u0431\\u0440\\u0430\\u0437 \\u0434\\u043b\\u044f \\u0434\\u0438\\u0441\\u043a\\u0430 123", "disk_id": 123, "upload_url": null, "location": null, "os": null}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"description\": \"\\u041c\\u043e\\u0439\
          \ \\u043e\\u0431\\u0440\\u0430\\u0437 \\u0434\\u043b\\u044f \\u0434\\u0438\\\
          u0441\\u043a\\u0430 123\", \"disk_id\": 123, \"upload_url\": null, \"location\"\
          : null, \"os\": null}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/images\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/images\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\\"description\\\": \\\"\\\\u041c\\\\u043e\\\\u0439 \\\\u043e\\\\u0431\\\
          \\u0440\\\\u0430\\\\u0437 \\\\u0434\\\\u043b\\\\u044f \\\\u0434\\\\u0438\\\
          \\u0441\\\\u043a\\\\u0430 123\\\", \\\"disk_id\\\": 123, \\\"upload_url\\\
          \": null, \\\"location\\\": null, \\\"os\\\": null}\");\n\t\twriter.flush();\n\
          \t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
  /api/v1/images/{image_id}:
    get:
      tags:
      - Образы
      summary: Получение информации о образе
      description: "Чтобы получить образ, отправьте запрос GET в `/api/v1/images/{image_id}`."
      operationId: getImage
      parameters:
      - name: image_id
        in: path
        description: Идентификатор образа
        required: true
        style: simple
        explode: false
        schema:
          title: Image Id
          type: string
          description: Идентификатор образа
      responses:
        "200":
          description: Информация о образе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201'
              example:
                response_id: 1ae78ec9-2ff7-422e-8563-b0206a40d893
                image:
                  id: 09fdc2fc-0bf3-4ff4-b17a-e2988a49118b
                  status: new
                  created_at: 2023-03-27T14:14:13.129777
                  size: 8388608
                  name: image 09fdc2fc-0bf3-4ff4-b17a-e2988a49118b
                  description: description of image 09fdc2fc-0bf3-4ff4-b17a-e2988a49118b
                  disk_id: 507148
                  location: ru-1
                  os: ubuntu
                  progress: 0
                  is_custom: false
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-tags-i18n:
        eng:
        - Images
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: "curl -X GET \\\n \"https://api.timeweb.cloud/api/v1/images/805cac4d-1560-4b1e-a698-a2a350d98d11\"\
          \ \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer\
          \ $TIMEWEB_CLOUD_TOKEN\"  "
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/images/805cac4d-1560-4b1e-a698-a2a350d98d11', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/images/805cac4d-1560-4b1e-a698-a2a350d98d11', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/images/805cac4d-1560-4b1e-a698-a2a350d98d11', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/images/805cac4d-1560-4b1e-a698-a2a350d98d11');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/images/805cac4d-1560-4b1e-a698-a2a350d98d11\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/images/805cac4d-1560-4b1e-a698-a2a350d98d11\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
    post:
      tags:
      - Образы
      summary: Загрузка образа
      description: "Чтобы загрузить свой образ, отправьте POST запрос в `/api/v1/images/{image_id}`,\
        \ отправив файл как `multipart/form-data`, указав имя файла в заголовке `Content-Disposition`.\
        \ \n\nПеред загрузкой, нужно создать образ используя POST `/api/v1/images`,\
        \ указав параметры `location`, `os`\n\n Тело ответа будет содержать объект\
        \ JSON с информацией о загруженном образе."
      operationId: uploadImage
      parameters:
      - name: image_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          title: Image Id
          type: string
      - name: content-disposition
        in: header
        required: false
        style: simple
        explode: false
        schema:
          title: Content-Disposition
          type: string
      responses:
        "200":
          description: Информация о загрузке
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
              example:
                response_id: 64ccc4a4-7087-4c97-885b-1503ced74161
                image:
                  id: 6302e8cc-fa30-47fb-a0dd-c9368255e0dd
                  status: new
                  created_at: 2023-03-27T14:14:13.130498
                  size: 2097152
                  name: image 6302e8cc-fa30-47fb-a0dd-c9368255e0dd
                  description: description of image 6302e8cc-fa30-47fb-a0dd-c9368255e0dd
                  disk_id: 73897
                  location: ru-1
                  os: ubuntu
                  progress: 0
                  is_custom: false
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-tags-i18n:
        eng:
        - Images
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |
          curl -X POST \
           "https://api.timeweb.cloud/api/v1/images/52d693eb-98a0-4bfb-a3e9-7ec0a3555403" \
          -H "Content-Type: multipart/form-data" \
          -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
          -H "Content-Disposition: example_image_file.img"  -f 'file=@example_image_file.img' \
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/images/52d693eb-98a0-4bfb-a3e9-7ec0a3555403', {
              method: 'POST',
              headers: {
                  'Content-Type': 'multipart/form-data',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`,
                  'Content-Disposition': 'example_image_file.img'
              }
          });
          fetch('http://example_image_file.img', {
              method: 'POST',
              headers: {
                  'Content-Type': 'multipart/form-data',
                  'Authorization': 'Bearer $TIMEWEB_CLOUD_TOKEN',
                  'Content-Disposition': 'example_image_file.img',
                  'Authorization': 'Basic ' + btoa('file=:')
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/images/52d693eb-98a0-4bfb-a3e9-7ec0a3555403',
              '',
              {
                  headers: {
                      'Content-Type': 'multipart/form-data',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN'],
                      'Content-Disposition': 'example_image_file.img'
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'multipart/form-data',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
              'Content-Disposition': 'example_image_file.img',
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/images/52d693eb-98a0-4bfb-a3e9-7ec0a3555403', headers=headers)
          response = requests.post('http://example_image_file.img', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/images/52d693eb-98a0-4bfb-a3e9-7ec0a3555403');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: multipart/form-data',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
              'Content-Disposition: example_image_file.img',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/images/52d693eb-98a0-4bfb-a3e9-7ec0a3555403\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"multipart/form-data\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\treq.Header.Set(\"\
          Content-Disposition\", \"example_image_file.img\")\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/images/52d693eb-98a0-4bfb-a3e9-7ec0a3555403\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"multipart/form-data\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \t\thttpConn.setRequestProperty(\"Content-Disposition\", \"example_image_file.img\"\
          );\n\n\t\tInputStream responseStream = httpConn.getResponseCode() / 100\
          \ == 2\n\t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
    delete:
      tags:
      - Образы
      summary: Удаление образа
      description: "Чтобы удалить образ, отправьте запрос DELETE в `/api/v1/images/{image_id}`."
      operationId: deleteImage
      parameters:
      - name: image_id
        in: path
        description: Идентификатор образа
        required: true
        style: simple
        explode: false
        schema:
          title: Image Id
          type: string
          description: Идентификатор образа
      responses:
        "204":
          description: Образ удален
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-tags-i18n:
        eng:
        - Images
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: "curl -X DELETE \\\n \"https://api.timeweb.cloud/api/v1/images/6408c510-1591-441d-a827-4b5079c2ccb7\"\
          \ \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer\
          \ $TIMEWEB_CLOUD_TOKEN\"  "
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/images/6408c510-1591-441d-a827-4b5079c2ccb7', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/images/6408c510-1591-441d-a827-4b5079c2ccb7', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.delete('https://api.timeweb.cloud/api/v1/images/6408c510-1591-441d-a827-4b5079c2ccb7', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/images/6408c510-1591-441d-a827-4b5079c2ccb7');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/images/6408c510-1591-441d-a827-4b5079c2ccb7\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/images/6408c510-1591-441d-a827-4b5079c2ccb7\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
    patch:
      tags:
      - Образы
      summary: Обновление информации о образе
      description: "Чтобы обновить только определенные атрибуты образа, отправьте\
        \ запрос PATCH в `/api/v1/images/{image_id}`."
      operationId: updateImage
      parameters:
      - name: image_id
        in: path
        description: Идентификатор образа
        required: true
        style: simple
        explode: false
        schema:
          title: Image Id
          type: string
          description: Идентификатор образа
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageUpdateAPI'
        required: true
      responses:
        "200":
          description: Образ обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201'
              example:
                response_id: 48ec4dee-8149-4f02-a2a7-122964359a16
                image:
                  id: 0f735812-8b44-4a99-ba25-cd3391f04a06
                  status: new
                  created_at: 2023-03-27T14:14:13.129814
                  size: 2097152
                  name: image 0f735812-8b44-4a99-ba25-cd3391f04a06
                  description: description of image 0f735812-8b44-4a99-ba25-cd3391f04a06
                  disk_id: 995994
                  location: ru-1
                  os: ubuntu
                  progress: 0
                  is_custom: false
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-tags-i18n:
        eng:
        - Images
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: "curl -X PATCH \\\n \"https://api.timeweb.cloud/api/v1/images/77379476-2d85-4d58-8888-a67a3e3a8b95\"\
          \ \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer\
          \ $TIMEWEB_CLOUD_TOKEN\" -d '{\"name\": \"\\u0418\\u043c\\u044f \\u043e\\\
          u0431\\u0440\\u0430\\u0437\\u0430\", \"description\": \"\\u041e\\u043f\\\
          u0438\\u0441\\u0430\\u043d\\u0438\\u0435 \\u043e\\u0431\\u0440\\u0430\\\
          u0437\\u0430\"}' \\\n  "
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/images/77379476-2d85-4d58-8888-a67a3e3a8b95', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{"name": "\\u0418\\u043c\\u044f \\u043e\\u0431\\u0440\\u0430\\u0437\\u0430", "description": "\\u041e\\u043f\\u0438\\u0441\\u0430\\u043d\\u0438\\u0435 \\u043e\\u0431\\u0440\\u0430\\u0437\\u0430"}',
              body: JSON.stringify({
                  'name': '\u0418\u043C\u044F \u043E\u0431\u0440\u0430\u0437\u0430',
                  'description': '\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435 \u043E\u0431\u0440\u0430\u0437\u0430'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud/api/v1/images/77379476-2d85-4d58-8888-a67a3e3a8b95',
              // '{"name": "\\u0418\\u043c\\u044f \\u043e\\u0431\\u0440\\u0430\\u0437\\u0430", "description": "\\u041e\\u043f\\u0438\\u0441\\u0430\\u043d\\u0438\\u0435 \\u043e\\u0431\\u0440\\u0430\\u0437\\u0430"}',
              {
                  'name': '\u0418\u043C\u044F \u043E\u0431\u0440\u0430\u0437\u0430',
                  'description': '\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435 \u043E\u0431\u0440\u0430\u0437\u0430'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              # Already added when you pass json=
              # 'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'name': 'Имя образа',
              'description': 'Описание образа',
          }

          response = requests.patch(
              'https://api.timeweb.cloud/api/v1/images/77379476-2d85-4d58-8888-a67a3e3a8b95',
              headers=headers,
              json=json_data,
          )
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/images/77379476-2d85-4d58-8888-a67a3e3a8b95');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"name": "\\u0418\\u043c\\u044f \\u043e\\u0431\\u0440\\u0430\\u0437\\u0430", "description": "\\u041e\\u043f\\u0438\\u0441\\u0430\\u043d\\u0438\\u0435 \\u043e\\u0431\\u0440\\u0430\\u0437\\u0430"}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"name\": \"\\u0418\\u043c\\u044f \\u043e\\\
          u0431\\u0440\\u0430\\u0437\\u0430\", \"description\": \"\\u041e\\u043f\\\
          u0438\\u0441\\u0430\\u043d\\u0438\\u0435 \\u043e\\u0431\\u0440\\u0430\\\
          u0437\\u0430\"}`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/images/77379476-2d85-4d58-8888-a67a3e3a8b95\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/images/77379476-2d85-4d58-8888-a67a3e3a8b95\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"name\\\": \\\"\\\\u0418\\\\u043c\\\\u044f \\\\u043e\\\
          \\u0431\\\\u0440\\\\u0430\\\\u0437\\\\u0430\\\", \\\"description\\\": \\\
          \"\\\\u041e\\\\u043f\\\\u0438\\\\u0441\\\\u0430\\\\u043d\\\\u0438\\\\u0435\
          \ \\\\u043e\\\\u0431\\\\u0440\\\\u0430\\\\u0437\\\\u0430\\\"}\");\n\t\t\
          writer.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
  /api/v1/images/{image_id}/download-url:
    get:
      tags:
      - Образы
      summary: Получение информации о ссылках на скачивание образов
      description: "Чтобы получить информацию о ссылках на скачивание образов, отп\
        равьте запрос GET в `/api/v1/images/{image_id}/download-url`."
      operationId: getImageDownloadURLs
      parameters:
      - name: image_id
        in: path
        description: Идентификатор образа
        required: true
        style: simple
        explode: false
        schema:
          title: Image Id
          type: string
          description: Идентификатор образа
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          title: Limit
          type: integer
          default: 100
      - name: offset
        in: query
        required: false
        style: form
        explode: true
        schema:
          title: Offset
          type: integer
          default: 0
      responses:
        "200":
          description: Информация о ссылке на загрузку
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_5'
              example:
                response_id: 1f3b9500-db6d-4da1-8cc4-534f1c3b0425
                meta:
                  total: 1
                downloads:
                - id: 0b270da2-5c54-4f4f-903d-94ababd9d9cb
                  created_at: 2023-03-27T14:14:13.130259
                  image: 1d9225f3-9e2f-4b6f-8aeb-7976a826963e
                  type: timeweb
                  url: https://example.com/0b270da2-5c54-4f4f-903d-94ababd9d9cb
                  status: finished
                  progress: 100
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-tags-i18n:
        eng:
        - Images
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: "curl -X GET \\\n \"https://api.timeweb.cloud/api/v1/images/8ae068ba-c461-44f5-9154-b6fe36ea39d6/download-url\"\
          \ \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer\
          \ $TIMEWEB_CLOUD_TOKEN\"  "
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/images/8ae068ba-c461-44f5-9154-b6fe36ea39d6/download-url', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/images/8ae068ba-c461-44f5-9154-b6fe36ea39d6/download-url', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get(
              'https://api.timeweb.cloud/api/v1/images/8ae068ba-c461-44f5-9154-b6fe36ea39d6/download-url',
              headers=headers,
          )
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/images/8ae068ba-c461-44f5-9154-b6fe36ea39d6/download-url');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/images/8ae068ba-c461-44f5-9154-b6fe36ea39d6/download-url\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/images/8ae068ba-c461-44f5-9154-b6fe36ea39d6/download-url\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
    post:
      tags:
      - Образы
      summary: Создание ссылки на скачивание образа
      description: "Чтобы создать ссылку на скачивание образа, отправьте запрос POST\
        \ в `/api/v1/images/{image_id}/download-url`."
      operationId: createImageDownloadUrl
      parameters:
      - name: image_id
        in: path
        description: Идентификатор образа
        required: true
        style: simple
        explode: false
        schema:
          title: Image Id
          type: string
          description: Идентификатор образа
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageUrlIn'
        required: true
      responses:
        "201":
          description: Ссылка успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_1'
              example:
                response_id: a8e4a26b-1349-42fe-9eaa-4220d42c1cfe
                download:
                  id: 51f4a146-d7cf-43a1-948b-7e3fd29e281c
                  created_at: 2023-03-27T14:14:13.129871
                  image: b6f581f5-406a-4f01-82c1-4739ba5a64e3
                  type: timeweb
                  url: https://example.com/51f4a146-d7cf-43a1-948b-7e3fd29e281c
                  status: finished
                  progress: 100
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "409":
          description: Образ уже загружен в облачное хранилище
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseError'
              example:
                status_code: 409
                error_code: file_already_exists_on_remote
                message: File with name my_image_from_timeweb.qcow2 already exists
                  on remote
                response_id: 977e4a83-1a61-423e-909a-1ac2b4b1c0b8
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-tags-i18n:
        eng:
        - Images
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: "curl -X POST \\\n \"https://api.timeweb.cloud/api/v1/images/dcce3e3d-cb3b-4bfc-912b-f148e5d67803/download-url\"\
          \ \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer\
          \ $TIMEWEB_CLOUD_TOKEN\" -d '{\"type\": \"google_drive\", \"filename\":\
          \ \"my_image_from_timeweb.qcow2\", \"auth\": {\"access_token\": \"GsOL7Mmm2PQdkCQ8l1UuJDXrwNB9kdYl9j9WzlFOt0xc7NUrVxAU9Hs5VDCYjNmuxC1KVBzX5bW2AqTiyBq35hbBHYs1PtMQ93Ssur3lkGSRb13X8nuDUIjftNgV2Fpd\"\
          , \"refresh_token\": null, \"expiry\": null, \"token_type\": \"Bearer\"\
          }}' \\\n  "
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/images/dcce3e3d-cb3b-4bfc-912b-f148e5d67803/download-url', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{"type": "google_drive", "filename": "my_image_from_timeweb.qcow2", "auth": {"access_token": "GsOL7Mmm2PQdkCQ8l1UuJDXrwNB9kdYl9j9WzlFOt0xc7NUrVxAU9Hs5VDCYjNmuxC1KVBzX5bW2AqTiyBq35hbBHYs1PtMQ93Ssur3lkGSRb13X8nuDUIjftNgV2Fpd", "refresh_token": null, "expiry": null, "token_type": "Bearer"}}',
              body: JSON.stringify({
                  'type': 'google_drive',
                  'filename': 'my_image_from_timeweb.qcow2',
                  'auth': {
                      'access_token': 'GsOL7Mmm2PQdkCQ8l1UuJDXrwNB9kdYl9j9WzlFOt0xc7NUrVxAU9Hs5VDCYjNmuxC1KVBzX5bW2AqTiyBq35hbBHYs1PtMQ93Ssur3lkGSRb13X8nuDUIjftNgV2Fpd',
                      'refresh_token': null,
                      'expiry': null,
                      'token_type': 'Bearer'
                  }
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/images/dcce3e3d-cb3b-4bfc-912b-f148e5d67803/download-url',
              // '{"type": "google_drive", "filename": "my_image_from_timeweb.qcow2", "auth": {"access_token": "GsOL7Mmm2PQdkCQ8l1UuJDXrwNB9kdYl9j9WzlFOt0xc7NUrVxAU9Hs5VDCYjNmuxC1KVBzX5bW2AqTiyBq35hbBHYs1PtMQ93Ssur3lkGSRb13X8nuDUIjftNgV2Fpd", "refresh_token": null, "expiry": null, "token_type": "Bearer"}}',
              {
                  'type': 'google_drive',
                  'filename': 'my_image_from_timeweb.qcow2',
                  'auth': {
                      'access_token': 'GsOL7Mmm2PQdkCQ8l1UuJDXrwNB9kdYl9j9WzlFOt0xc7NUrVxAU9Hs5VDCYjNmuxC1KVBzX5bW2AqTiyBq35hbBHYs1PtMQ93Ssur3lkGSRb13X8nuDUIjftNgV2Fpd',
                      'refresh_token': null,
                      'expiry': null,
                      'token_type': 'Bearer'
                  }
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              # Already added when you pass json=
              # 'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'type': 'google_drive',
              'filename': 'my_image_from_timeweb.qcow2',
              'auth': {
                  'access_token': 'GsOL7Mmm2PQdkCQ8l1UuJDXrwNB9kdYl9j9WzlFOt0xc7NUrVxAU9Hs5VDCYjNmuxC1KVBzX5bW2AqTiyBq35hbBHYs1PtMQ93Ssur3lkGSRb13X8nuDUIjftNgV2Fpd',
                  'refresh_token': None,
                  'expiry': None,
                  'token_type': 'Bearer',
              },
          }

          response = requests.post(
              'https://api.timeweb.cloud/api/v1/images/dcce3e3d-cb3b-4bfc-912b-f148e5d67803/download-url',
              headers=headers,
              json=json_data,
          )
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/images/dcce3e3d-cb3b-4bfc-912b-f148e5d67803/download-url');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"type": "google_drive", "filename": "my_image_from_timeweb.qcow2", "auth": {"access_token": "GsOL7Mmm2PQdkCQ8l1UuJDXrwNB9kdYl9j9WzlFOt0xc7NUrVxAU9Hs5VDCYjNmuxC1KVBzX5bW2AqTiyBq35hbBHYs1PtMQ93Ssur3lkGSRb13X8nuDUIjftNgV2Fpd", "refresh_token": null, "expiry": null, "token_type": "Bearer"}}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"type\": \"google_drive\", \"filename\"\
          : \"my_image_from_timeweb.qcow2\", \"auth\": {\"access_token\": \"GsOL7Mmm2PQdkCQ8l1UuJDXrwNB9kdYl9j9WzlFOt0xc7NUrVxAU9Hs5VDCYjNmuxC1KVBzX5bW2AqTiyBq35hbBHYs1PtMQ93Ssur3lkGSRb13X8nuDUIjftNgV2Fpd\"\
          , \"refresh_token\": null, \"expiry\": null, \"token_type\": \"Bearer\"\
          }}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/images/dcce3e3d-cb3b-4bfc-912b-f148e5d67803/download-url\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/images/dcce3e3d-cb3b-4bfc-912b-f148e5d67803/download-url\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"type\\\": \\\"google_drive\\\", \\\"filename\\\"\
          : \\\"my_image_from_timeweb.qcow2\\\", \\\"auth\\\": {\\\"access_token\\\
          \": \\\"GsOL7Mmm2PQdkCQ8l1UuJDXrwNB9kdYl9j9WzlFOt0xc7NUrVxAU9Hs5VDCYjNmuxC1KVBzX5bW2AqTiyBq35hbBHYs1PtMQ93Ssur3lkGSRb13X8nuDUIjftNgV2Fpd\\\
          \", \\\"refresh_token\\\": null, \\\"expiry\\\": null, \\\"token_type\\\"\
          : \\\"Bearer\\\"}}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
  /api/v1/images/{image_id}/download-url/{image_url_id}:
    get:
      tags:
      - Образы
      summary: Получение информации о ссылке на скачивание образа
      description: "Чтобы получить информацию о ссылке на скачивание образа, отпра\
        вьте запрос GET в `/api/v1/images/{image_id}/download-url/{image_url_id}`."
      operationId: getImageDownloadURL
      parameters:
      - name: image_id
        in: path
        description: Идентификатор образа
        required: true
        style: simple
        explode: false
        schema:
          title: Image Id
          type: string
          description: Идентификатор образа
      - name: image_url_id
        in: path
        description: Идентификатор ссылки
        required: true
        style: simple
        explode: false
        schema:
          title: Image Url Id
          type: string
          description: Идентификатор ссылки
      responses:
        "200":
          description: Информация о ссылке на загрузку
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_1'
              example:
                response_id: 7b07c780-9759-4df3-97af-0590cb65259f
                download:
                  id: 71e9e77d-717c-41c8-baa9-1cc3df3d960d
                  created_at: 2023-03-27T14:14:13.130174
                  image: 1f32f47e-fd21-4d8c-8b02-16096fcffcd1
                  type: timeweb
                  url: https://example.com/71e9e77d-717c-41c8-baa9-1cc3df3d960d
                  status: finished
                  progress: 100
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-tags-i18n:
        eng:
        - Images
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: "curl -X GET \\\n \"https://api.timeweb.cloud/api/v1/images/d21293f7-99ac-4e86-9c61-e491e959aa0f/download-url/259f3663-dc4c-46d8-be24-f02a73c550de\"\
          \ \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer\
          \ $TIMEWEB_CLOUD_TOKEN\"  "
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/images/d21293f7-99ac-4e86-9c61-e491e959aa0f/download-url/259f3663-dc4c-46d8-be24-f02a73c550de', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/images/d21293f7-99ac-4e86-9c61-e491e959aa0f/download-url/259f3663-dc4c-46d8-be24-f02a73c550de', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get(
              'https://api.timeweb.cloud/api/v1/images/d21293f7-99ac-4e86-9c61-e491e959aa0f/download-url/259f3663-dc4c-46d8-be24-f02a73c550de',
              headers=headers,
          )
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/images/d21293f7-99ac-4e86-9c61-e491e959aa0f/download-url/259f3663-dc4c-46d8-be24-f02a73c550de');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/images/d21293f7-99ac-4e86-9c61-e491e959aa0f/download-url/259f3663-dc4c-46d8-be24-f02a73c550de\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/images/d21293f7-99ac-4e86-9c61-e491e959aa0f/download-url/259f3663-dc4c-46d8-be24-f02a73c550de\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
    delete:
      tags:
      - Образы
      summary: Удаление ссылки на образ
      description: "Чтобы удалить ссылку на образ, отправьте DELETE запрос в `/api/v1/images/{image_id}/download-url/{image_url_id}`."
      operationId: deleteImageDownloadURL
      parameters:
      - name: image_id
        in: path
        description: Идентификатор образа
        required: true
        style: simple
        explode: false
        schema:
          title: Image Id
          type: string
          description: Идентификатор образа
      - name: image_url_id
        in: path
        description: Идентификатор ссылки
        required: true
        style: simple
        explode: false
        schema:
          title: Image Url Id
          type: string
          description: Идентификатор ссылки
      responses:
        "204":
          description: Ссылка удалена
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-tags-i18n:
        eng:
        - Images
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: "curl -X DELETE \\\n \"https://api.timeweb.cloud/api/v1/images/fe2fa697-1f5c-4c07-b22f-7437e21f5a21/download-url/5bceb9c1-81a0-4bc4-9a44-1bedb626852f\"\
          \ \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer\
          \ $TIMEWEB_CLOUD_TOKEN\"  "
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/images/fe2fa697-1f5c-4c07-b22f-7437e21f5a21/download-url/5bceb9c1-81a0-4bc4-9a44-1bedb626852f', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/images/fe2fa697-1f5c-4c07-b22f-7437e21f5a21/download-url/5bceb9c1-81a0-4bc4-9a44-1bedb626852f', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.delete(
              'https://api.timeweb.cloud/api/v1/images/fe2fa697-1f5c-4c07-b22f-7437e21f5a21/download-url/5bceb9c1-81a0-4bc4-9a44-1bedb626852f',
              headers=headers,
          )
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/images/fe2fa697-1f5c-4c07-b22f-7437e21f5a21/download-url/5bceb9c1-81a0-4bc4-9a44-1bedb626852f');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/images/fe2fa697-1f5c-4c07-b22f-7437e21f5a21/download-url/5bceb9c1-81a0-4bc4-9a44-1bedb626852f\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/images/fe2fa697-1f5c-4c07-b22f-7437e21f5a21/download-url/5bceb9c1-81a0-4bc4-9a44-1bedb626852f\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
  /api/v1/firewall/groups:
    get:
      tags:
      - Firewall
      summary: Получение групп правил
      description: "Чтобы получить групп правил для аккаунта, отправьте GET запрос\
        \ на `/api/v1/firewall/groups`"
      operationId: getGroups
      parameters:
      - name: limit
        in: query
        description: "Обозначает количество записей, которое необходимо вернуть."
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 100
      - name: offset
        in: query
        description: Указывает на смещение относительно начала списка.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      responses:
        "200":
          description: Список групп правил
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_6'
              example:
                response_id: 236c07e1-aa0f-4788-ab14-ff0f12ca559d
                meta:
                  total: 5
                groups:
                - id: 17b41889-4bd1-49d2-bbb8-da1d167f6edc
                  created_at: 2023-02-03T08:31:47.174912
                  updated_at: 2023-02-03T08:31:47.174920
                  name: rules group
                  description: Group description
                - id: de052705-bfbe-4b3e-bbaa-868909b5198d
                  created_at: 2023-02-03T08:31:47.175007
                  updated_at: 2023-02-03T08:31:47.175008
                  name: rules group
                  description: Group description
                - id: 6ed11500-6f3e-4402-abcc-91060519f83b
                  created_at: 2023-02-03T08:31:47.175143
                  updated_at: 2023-02-03T08:31:47.175144
                  name: rules group
                  description: Group description
                - id: db6db0ed-87ca-40cb-a5e4-614e12f0559c
                  created_at: 2023-02-03T08:31:47.175175
                  updated_at: 2023-02-03T08:31:47.175175
                  name: rules group
                  description: Group description
                - id: a62dd218-8773-4a6a-80f9-728bcf1ac7a2
                  created_at: 2023-02-03T08:31:47.175203
                  updated_at: 2023-02-03T08:31:47.175203
                  name: rules group
                  description: Group description
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-tags-i18n:
        eng:
        - Firewall
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${TIMEWEB_CLOUD_TOKEN}" \
            "https://api.timeweb.cloud/api/v1/firewall/groups"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/firewall/groups', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ${TIMEWEB_CLOUD_TOKEN}'
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/firewall/groups', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/firewall/groups', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/firewall/groups');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/firewall/groups\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/firewall/groups\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
    post:
      tags:
      - Firewall
      summary: Создание группы правил
      description: "Чтобы создать группу правил, отправьте POST запрос на `/api/v1/firewall/groups`"
      operationId: createGroup
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FirewallGroupInAPI'
        required: true
      responses:
        "201":
          description: Группа правил создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_2'
              example:
                response_id: a3cc1d0d-0760-4e29-84b9-1626f385c51e
                group:
                  id: 9a364b80-702b-4c99-b85e-082333d6d613
                  created_at: 2023-02-03T08:31:47.175546
                  updated_at: 2023-02-03T08:31:47.175547
                  name: rules group
                  description: Group description
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-tags-i18n:
        eng:
        - Firewall
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -d '{"name": "\u041c\u043e\u0439 \u0444\u0430\u0435\u0440\u0432\u043e\u043b\u043b", "description": "\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0444\u0430\u0435\u0440\u0432\u043e\u043b\u043b\u0430"}' \
           -H "Authorization: Bearer ${TIMEWEB_CLOUD_TOKEN}" \
            "https://api.timeweb.cloud/api/v1/firewall/groups"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/firewall/groups', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ${TIMEWEB_CLOUD_TOKEN}'
              },
              // body: '{"name": "\\u041c\\u043e\\u0439 \\u0444\\u0430\\u0435\\u0440\\u0432\\u043e\\u043b\\u043b", "description": "\\u041e\\u043f\\u0438\\u0441\\u0430\\u043d\\u0438\\u0435 \\u0444\\u0430\\u0435\\u0440\\u0432\\u043e\\u043b\\u043b\\u0430"}',
              body: JSON.stringify({
                  'name': '\u041C\u043E\u0439 \u0444\u0430\u0435\u0440\u0432\u043E\u043B\u043B',
                  'description': '\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435 \u0444\u0430\u0435\u0440\u0432\u043E\u043B\u043B\u0430'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/firewall/groups',
              // '{"name": "\\u041c\\u043e\\u0439 \\u0444\\u0430\\u0435\\u0440\\u0432\\u043e\\u043b\\u043b", "description": "\\u041e\\u043f\\u0438\\u0441\\u0430\\u043d\\u0438\\u0435 \\u0444\\u0430\\u0435\\u0440\\u0432\\u043e\\u043b\\u043b\\u0430"}',
              {
                  'name': '\u041C\u043E\u0439 \u0444\u0430\u0435\u0440\u0432\u043E\u043B\u043B',
                  'description': '\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435 \u0444\u0430\u0435\u0440\u0432\u043E\u043B\u043B\u0430'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              # Already added when you pass json=
              # 'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'name': 'Мой фаерволл',
              'description': 'Описание фаерволла',
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/firewall/groups', headers=headers, json=json_data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/firewall/groups');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"name": "\\u041c\\u043e\\u0439 \\u0444\\u0430\\u0435\\u0440\\u0432\\u043e\\u043b\\u043b", "description": "\\u041e\\u043f\\u0438\\u0441\\u0430\\u043d\\u0438\\u0435 \\u0444\\u0430\\u0435\\u0440\\u0432\\u043e\\u043b\\u043b\\u0430"}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"name\": \"\\u041c\\u043e\\u0439 \\u0444\\\
          u0430\\u0435\\u0440\\u0432\\u043e\\u043b\\u043b\", \"description\": \"\\\
          u041e\\u043f\\u0438\\u0441\\u0430\\u043d\\u0438\\u0435 \\u0444\\u0430\\\
          u0435\\u0440\\u0432\\u043e\\u043b\\u043b\\u0430\"}`)\n\treq, err := http.NewRequest(\"\
          POST\", \"https://api.timeweb.cloud/api/v1/firewall/groups\", data)\n\t\
          if err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\"\
          , \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer \"\
          \ + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/firewall/groups\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\\"name\\\": \\\"\\\\u041c\\\\u043e\\\\u0439 \\\\u0444\\\\u0430\\\\u0435\\\
          \\u0440\\\\u0432\\\\u043e\\\\u043b\\\\u043b\\\", \\\"description\\\": \\\
          \"\\\\u041e\\\\u043f\\\\u0438\\\\u0441\\\\u0430\\\\u043d\\\\u0438\\\\u0435\
          \ \\\\u0444\\\\u0430\\\\u0435\\\\u0440\\\\u0432\\\\u043e\\\\u043b\\\\u043b\\\
          \\u0430\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
  /api/v1/firewall/groups/{group_id}:
    get:
      tags:
      - Firewall
      summary: Получение информации о группе правил
      description: "Чтобы получить информацию о группе правил, отправьте GET запро\
        с на `/api/v1/firewall/groups/{group_id}`"
      operationId: getGroup
      parameters:
      - name: group_id
        in: path
        description: Идентификатор группы правил
        required: true
        style: simple
        explode: false
        schema:
          title: Group Id
          type: string
          description: Идентификатор группы правил
      responses:
        "200":
          description: Информация о группе правил
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_2'
              example:
                response_id: b38efd0e-3f85-4e23-a62b-f4ab962baf61
                group:
                  id: 4c575258-c86a-49b0-b391-689927e7ce07
                  created_at: 2023-02-03T08:31:47.175402
                  updated_at: 2023-02-03T08:31:47.175403
                  name: rules group
                  description: Group description
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-tags-i18n:
        eng:
        - Firewall
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${TIMEWEB_CLOUD_TOKEN}" \
            "https://api.timeweb.cloud/api/v1/firewall/groups/50c53303-efbe-4c36-ac52-dfde11e36c7d"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/firewall/groups/50c53303-efbe-4c36-ac52-dfde11e36c7d', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ${TIMEWEB_CLOUD_TOKEN}'
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/firewall/groups/50c53303-efbe-4c36-ac52-dfde11e36c7d', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get(
              'https://api.timeweb.cloud/api/v1/firewall/groups/50c53303-efbe-4c36-ac52-dfde11e36c7d',
              headers=headers,
          )
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/firewall/groups/50c53303-efbe-4c36-ac52-dfde11e36c7d');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/firewall/groups/50c53303-efbe-4c36-ac52-dfde11e36c7d\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/firewall/groups/50c53303-efbe-4c36-ac52-dfde11e36c7d\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
    delete:
      tags:
      - Firewall
      summary: Удаление группы правил
      description: "Чтобы удалить группу правил, отправьте DELETE запрос на `/api/v1/firewall/groups/{group_id}`"
      operationId: deleteGroup
      parameters:
      - name: group_id
        in: path
        description: Идентификатор группы правил
        required: true
        style: simple
        explode: false
        schema:
          title: Group Id
          type: string
          description: Идентификатор группы правил
      responses:
        "204":
          description: Группа удалена
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-tags-i18n:
        eng:
        - Firewall
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${TIMEWEB_CLOUD_TOKEN}" \
            "https://api.timeweb.cloud/api/v1/firewall/groups/769b78ee-edd8-45ea-822d-e3ffc2a2306b"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/firewall/groups/769b78ee-edd8-45ea-822d-e3ffc2a2306b', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ${TIMEWEB_CLOUD_TOKEN}'
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/firewall/groups/769b78ee-edd8-45ea-822d-e3ffc2a2306b', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.delete(
              'https://api.timeweb.cloud/api/v1/firewall/groups/769b78ee-edd8-45ea-822d-e3ffc2a2306b',
              headers=headers,
          )
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/firewall/groups/769b78ee-edd8-45ea-822d-e3ffc2a2306b');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/firewall/groups/769b78ee-edd8-45ea-822d-e3ffc2a2306b\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/firewall/groups/769b78ee-edd8-45ea-822d-e3ffc2a2306b\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
    patch:
      tags:
      - Firewall
      summary: Обновление группы правил
      description: "Чтобы изменить группу правил, отправьте PATCH запрос на `/api/v1/firewall/groups/{group_id}`"
      operationId: updateGroup
      parameters:
      - name: group_id
        in: path
        description: Идентификатор группы правил
        required: true
        style: simple
        explode: false
        schema:
          title: Group Id
          type: string
          description: Идентификатор группы правил
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FirewallGroupInAPI'
        required: true
      responses:
        "201":
          description: Группа правил обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_2'
              example:
                response_id: 7c7c9540-d2c3-486d-9895-73e55892f460
                group:
                  id: 52d2dd42-4529-4d32-b8df-f421a5985711
                  created_at: 2023-02-03T08:31:47.176073
                  updated_at: 2023-02-03T08:31:47.176075
                  name: rules group
                  description: Group description
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-tags-i18n:
        eng:
        - Firewall
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X PATCH \
            -H "Content-Type: application/json" \
            -d '{"name": "\u041c\u043e\u0439 \u0444\u0430\u0435\u0440\u0432\u043e\u043b\u043b", "description": "\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0444\u0430\u0435\u0440\u0432\u043e\u043b\u043b\u0430"}' \
           -H "Authorization: Bearer ${TIMEWEB_CLOUD_TOKEN}" \
            "https://api.timeweb.cloud/api/v1/firewall/groups/f08924a3-177b-4d0a-a28c-3bb277a78ef2"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/firewall/groups/f08924a3-177b-4d0a-a28c-3bb277a78ef2', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ${TIMEWEB_CLOUD_TOKEN}'
              },
              // body: '{"name": "\\u041c\\u043e\\u0439 \\u0444\\u0430\\u0435\\u0440\\u0432\\u043e\\u043b\\u043b", "description": "\\u041e\\u043f\\u0438\\u0441\\u0430\\u043d\\u0438\\u0435 \\u0444\\u0430\\u0435\\u0440\\u0432\\u043e\\u043b\\u043b\\u0430"}',
              body: JSON.stringify({
                  'name': '\u041C\u043E\u0439 \u0444\u0430\u0435\u0440\u0432\u043E\u043B\u043B',
                  'description': '\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435 \u0444\u0430\u0435\u0440\u0432\u043E\u043B\u043B\u0430'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud/api/v1/firewall/groups/f08924a3-177b-4d0a-a28c-3bb277a78ef2',
              // '{"name": "\\u041c\\u043e\\u0439 \\u0444\\u0430\\u0435\\u0440\\u0432\\u043e\\u043b\\u043b", "description": "\\u041e\\u043f\\u0438\\u0441\\u0430\\u043d\\u0438\\u0435 \\u0444\\u0430\\u0435\\u0440\\u0432\\u043e\\u043b\\u043b\\u0430"}',
              {
                  'name': '\u041C\u043E\u0439 \u0444\u0430\u0435\u0440\u0432\u043E\u043B\u043B',
                  'description': '\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435 \u0444\u0430\u0435\u0440\u0432\u043E\u043B\u043B\u0430'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              # Already added when you pass json=
              # 'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'name': 'Мой фаерволл',
              'description': 'Описание фаерволла',
          }

          response = requests.patch(
              'https://api.timeweb.cloud/api/v1/firewall/groups/f08924a3-177b-4d0a-a28c-3bb277a78ef2',
              headers=headers,
              json=json_data,
          )
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/firewall/groups/f08924a3-177b-4d0a-a28c-3bb277a78ef2');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"name": "\\u041c\\u043e\\u0439 \\u0444\\u0430\\u0435\\u0440\\u0432\\u043e\\u043b\\u043b", "description": "\\u041e\\u043f\\u0438\\u0441\\u0430\\u043d\\u0438\\u0435 \\u0444\\u0430\\u0435\\u0440\\u0432\\u043e\\u043b\\u043b\\u0430"}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"name\": \"\\u041c\\u043e\\u0439 \\u0444\\\
          u0430\\u0435\\u0440\\u0432\\u043e\\u043b\\u043b\", \"description\": \"\\\
          u041e\\u043f\\u0438\\u0441\\u0430\\u043d\\u0438\\u0435 \\u0444\\u0430\\\
          u0435\\u0440\\u0432\\u043e\\u043b\\u043b\\u0430\"}`)\n\treq, err := http.NewRequest(\"\
          PATCH\", \"https://api.timeweb.cloud/api/v1/firewall/groups/f08924a3-177b-4d0a-a28c-3bb277a78ef2\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/firewall/groups/f08924a3-177b-4d0a-a28c-3bb277a78ef2\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"name\\\": \\\"\\\\u041c\\\\u043e\\\\u0439 \\\\u0444\\\
          \\u0430\\\\u0435\\\\u0440\\\\u0432\\\\u043e\\\\u043b\\\\u043b\\\", \\\"\
          description\\\": \\\"\\\\u041e\\\\u043f\\\\u0438\\\\u0441\\\\u0430\\\\u043d\\\
          \\u0438\\\\u0435 \\\\u0444\\\\u0430\\\\u0435\\\\u0440\\\\u0432\\\\u043e\\\
          \\u043b\\\\u043b\\\\u0430\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\
          \t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream\
          \ = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
  /api/v1/firewall/groups/{group_id}/resources:
    get:
      tags:
      - Firewall
      summary: Получение слинкованных ресурсов
      description: "Чтобы получить слинкованных ресурсов для группы правил, отправ\
        ьте GET запрос на `/api/v1/firewall/groups/{group_id}/resources`"
      operationId: getGroupResources
      parameters:
      - name: group_id
        in: path
        description: Идентификатор группы правил
        required: true
        style: simple
        explode: false
        schema:
          title: Group Id
          type: string
          description: Идентификатор группы правил
      - name: limit
        in: query
        description: "Обозначает количество записей, которое необходимо вернуть."
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 100
      - name: offset
        in: query
        description: Указывает на смещение относительно начала списка.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      responses:
        "200":
          description: Список слинкованных ресурсов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_7'
              example:
                response_id: 3b7c831c-4c49-4c1e-9142-b31c1978995e
                meta:
                  total: 5
                resources:
                - id: 50000
                  type: server
                - id: 50001
                  type: server
                - id: 50002
                  type: server
                - id: 50003
                  type: server
                - id: 50004
                  type: server
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-tags-i18n:
        eng:
        - Firewall
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${TIMEWEB_CLOUD_TOKEN}" \
            "https://api.timeweb.cloud/api/v1/firewall/groups/781c8207-21e5-46eb-9872-a93b749e5d13/resources"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/firewall/groups/781c8207-21e5-46eb-9872-a93b749e5d13/resources', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ${TIMEWEB_CLOUD_TOKEN}'
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/firewall/groups/781c8207-21e5-46eb-9872-a93b749e5d13/resources', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get(
              'https://api.timeweb.cloud/api/v1/firewall/groups/781c8207-21e5-46eb-9872-a93b749e5d13/resources',
              headers=headers,
          )
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/firewall/groups/781c8207-21e5-46eb-9872-a93b749e5d13/resources');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/firewall/groups/781c8207-21e5-46eb-9872-a93b749e5d13/resources\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/firewall/groups/781c8207-21e5-46eb-9872-a93b749e5d13/resources\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
  /api/v1/firewall/groups/{group_id}/resources/{resource_id}:
    post:
      tags:
      - Firewall
      summary: Линковка ресурса в firewall group
      description: "Чтобы слинковать ресурс с группой правил, отправьте POST запро\
        с на `/api/v1/firewall/groups/{group_id}/resources/{resource_id}`"
      operationId: addResourceToGroup
      parameters:
      - name: group_id
        in: path
        description: Идентификатор группы правил
        required: true
        style: simple
        explode: false
        schema:
          title: Group Id
          type: string
          description: Идентификатор группы правил
      - name: resource_id
        in: path
        description: Идентификатор ресурса
        required: true
        style: simple
        explode: false
        schema:
          title: Resource Id
          type: string
          description: Идентификатор ресурса
      - name: resource_type
        in: query
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/resource_type'
      responses:
        "201":
          description: Ресурс добавлен к группе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_3'
              example:
                response_id: abf0913e-ba96-4312-a54e-2f44f8f9d84b
                resource:
                  id: 50000
                  type: server
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-tags-i18n:
        eng:
        - Firewall
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${TIMEWEB_CLOUD_TOKEN}" \
            "https://api.timeweb.cloud/api/v1/firewall/groups/73297560-304c-40c7-8a1b-de29a2ab0624/resources/666664"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/firewall/groups/73297560-304c-40c7-8a1b-de29a2ab0624/resources/666664', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ${TIMEWEB_CLOUD_TOKEN}'
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/firewall/groups/73297560-304c-40c7-8a1b-de29a2ab0624/resources/666664',
              '',
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.post(
              'https://api.timeweb.cloud/api/v1/firewall/groups/73297560-304c-40c7-8a1b-de29a2ab0624/resources/666664',
              headers=headers,
          )
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/firewall/groups/73297560-304c-40c7-8a1b-de29a2ab0624/resources/666664');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/firewall/groups/73297560-304c-40c7-8a1b-de29a2ab0624/resources/666664\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/firewall/groups/73297560-304c-40c7-8a1b-de29a2ab0624/resources/666664\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
    delete:
      tags:
      - Firewall
      summary: Отлинковка ресурса из firewall group
      description: "Чтобы отлинковать ресурс от группы правил, отправьте DELETE за\
        прос на `/api/v1/firewall/groups/{group_id}/resources/{resource_id}`"
      operationId: deleteResourceFromGroup
      parameters:
      - name: group_id
        in: path
        description: Идентификатор группы правил
        required: true
        style: simple
        explode: false
        schema:
          title: Group Id
          type: string
          description: Идентификатор группы правил
      - name: resource_id
        in: path
        description: Идентификатор ресурса
        required: true
        style: simple
        explode: false
        schema:
          title: Resource Id
          type: string
          description: Идентификатор ресурса
      - name: resource_type
        in: query
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/resource_type_1'
      responses:
        "204":
          description: Ресурс удален из Группы правил
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-tags-i18n:
        eng:
        - Firewall
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${TIMEWEB_CLOUD_TOKEN}" \
            "https://api.timeweb.cloud/api/v1/firewall/groups/418f76c6-237a-4806-b129-b31096ccb7cd/resources/666664"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/firewall/groups/418f76c6-237a-4806-b129-b31096ccb7cd/resources/666664', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ${TIMEWEB_CLOUD_TOKEN}'
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/firewall/groups/418f76c6-237a-4806-b129-b31096ccb7cd/resources/666664', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.delete(
              'https://api.timeweb.cloud/api/v1/firewall/groups/418f76c6-237a-4806-b129-b31096ccb7cd/resources/666664',
              headers=headers,
          )
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/firewall/groups/418f76c6-237a-4806-b129-b31096ccb7cd/resources/666664');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/firewall/groups/418f76c6-237a-4806-b129-b31096ccb7cd/resources/666664\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/firewall/groups/418f76c6-237a-4806-b129-b31096ccb7cd/resources/666664\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
  /api/v1/firewall/groups/{group_id}/rules:
    get:
      tags:
      - Firewall
      summary: Получение списка правил
      description: "Чтобы получить список правил в группе, отправьте GET запрос на\
        \ `/api/v1/firewall/groups/{group_id}/rules`"
      operationId: getGroupRules
      parameters:
      - name: group_id
        in: path
        description: Идентификатор группы правил
        required: true
        style: simple
        explode: false
        schema:
          title: Group Id
          type: string
          description: Идентификатор группы правил
      - name: limit
        in: query
        description: "Обозначает количество записей, которое необходимо вернуть."
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 100
      - name: offset
        in: query
        description: Указывает на смещение относительно начала списка.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      responses:
        "200":
          description: Список правил
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_8'
              example:
                response_id: 87474f2d-fe0f-4285-8431-8f63b8b244ef
                meta:
                  total: 5
                rules:
                - id: f24355e9-ef8e-4700-9b9d-909b8d468987
                  description: Описание правила
                  direction: egress
                  protocol: tcp
                  port: "8080"
                  cidr: 8.8.4.4/32
                  group_id: 2c112753-382a-4bb1-bc7d-c09244171bef
                - id: 501f8c14-aa8c-4a9d-9b6a-7301d4546985
                  description: Описание правила
                  direction: egress
                  protocol: tcp
                  port: "8080"
                  cidr: 8.8.4.4/32
                  group_id: a17c532c-db37-48ca-8996-0bf81c654283
                - id: 66302744-1d61-461b-8820-fad035ec4462
                  description: Описание правила
                  direction: egress
                  protocol: tcp
                  port: "8080"
                  cidr: 8.8.4.4/32
                  group_id: bdc009c1-ae2e-4598-a278-efbfba4a7e09
                - id: 8d3689e7-3c02-4d63-acd6-97dbd37dc39c
                  description: Описание правила
                  direction: egress
                  protocol: tcp
                  port: 22-3306
                  cidr: 8.8.4.4/32
                  group_id: ad570250-5775-4de7-aa87-5a7d435259df
                - id: ef8687bd-8f7d-4f4d-bf74-557af53ec8c1
                  description: Описание правила
                  direction: egress
                  protocol: tcp
                  port: 22-3306
                  cidr: 8.8.4.4/32
                  group_id: 1a4ca5df-11a9-4ebb-ae7a-84f6b0f77b58
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-tags-i18n:
        eng:
        - Firewall
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${TIMEWEB_CLOUD_TOKEN}" \
            "https://api.timeweb.cloud/api/v1/firewall/groups/44c6bd52-246e-4ed4-8224-8454c068b47c/rules"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/firewall/groups/44c6bd52-246e-4ed4-8224-8454c068b47c/rules', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ${TIMEWEB_CLOUD_TOKEN}'
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/firewall/groups/44c6bd52-246e-4ed4-8224-8454c068b47c/rules', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get(
              'https://api.timeweb.cloud/api/v1/firewall/groups/44c6bd52-246e-4ed4-8224-8454c068b47c/rules',
              headers=headers,
          )
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/firewall/groups/44c6bd52-246e-4ed4-8224-8454c068b47c/rules');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/firewall/groups/44c6bd52-246e-4ed4-8224-8454c068b47c/rules\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/firewall/groups/44c6bd52-246e-4ed4-8224-8454c068b47c/rules\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
    post:
      tags:
      - Firewall
      summary: Создание firewall правила
      description: "Чтобы создать правило в группе, отправьте POST запрос на `/api/v1/firewall/groups/{group_id}/rules`"
      operationId: createGroupRule
      parameters:
      - name: group_id
        in: path
        description: Идентификатор группы правил
        required: true
        style: simple
        explode: false
        schema:
          title: Group Id
          type: string
          description: Идентификатор группы правил
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FirewallRuleInAPI'
        required: true
      responses:
        "201":
          description: Правило создано
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_4'
              example:
                response_id: 625349ac-9ded-4a17-aa75-2c9deadd28d4
                rule:
                  id: 606795f7-8898-495c-aeeb-b0b1d58a1fe5
                  description: Описание правила
                  direction: egress
                  protocol: tcp
                  port: "8080"
                  cidr: 8.8.4.4/32
                  group_id: 9d95f762-55a3-4dd4-8989-cba14eaca9e2
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-tags-i18n:
        eng:
        - Firewall
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -d '{"description": "\u041e\u0442\u043a\u0440\u044b\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043f\u043e SSH", "direction": "ingress", "port": "22", "protocol": "tcp", "cidr": "2.2.2.2/32"}' \
           -H "Authorization: Bearer ${TIMEWEB_CLOUD_TOKEN}" \
            "https://api.timeweb.cloud/api/v1/firewall/groups/19da849d-51e5-4858-b5b8-9dc1aaef16f6/rules"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/firewall/groups/19da849d-51e5-4858-b5b8-9dc1aaef16f6/rules', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ${TIMEWEB_CLOUD_TOKEN}'
              },
              // body: '{"description": "\\u041e\\u0442\\u043a\\u0440\\u044b\\u0442\\u044c \\u0434\\u043e\\u0441\\u0442\\u0443\\u043f \\u043f\\u043e SSH", "direction": "ingress", "port": "22", "protocol": "tcp", "cidr": "2.2.2.2/32"}',
              body: JSON.stringify({
                  'description': '\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u0434\u043E\u0441\u0442\u0443\u043F \u043F\u043E SSH',
                  'direction': 'ingress',
                  'port': '22',
                  'protocol': 'tcp',
                  'cidr': '2.2.2.2/32'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/firewall/groups/19da849d-51e5-4858-b5b8-9dc1aaef16f6/rules',
              // '{"description": "\\u041e\\u0442\\u043a\\u0440\\u044b\\u0442\\u044c \\u0434\\u043e\\u0441\\u0442\\u0443\\u043f \\u043f\\u043e SSH", "direction": "ingress", "port": "22", "protocol": "tcp", "cidr": "2.2.2.2/32"}',
              {
                  'description': '\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u0434\u043E\u0441\u0442\u0443\u043F \u043F\u043E SSH',
                  'direction': 'ingress',
                  'port': '22',
                  'protocol': 'tcp',
                  'cidr': '2.2.2.2/32'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              # Already added when you pass json=
              # 'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'description': 'Открыть доступ по SSH',
              'direction': 'ingress',
              'port': '22',
              'protocol': 'tcp',
              'cidr': '2.2.2.2/32',
          }

          response = requests.post(
              'https://api.timeweb.cloud/api/v1/firewall/groups/19da849d-51e5-4858-b5b8-9dc1aaef16f6/rules',
              headers=headers,
              json=json_data,
          )
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/firewall/groups/19da849d-51e5-4858-b5b8-9dc1aaef16f6/rules');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"description": "\\u041e\\u0442\\u043a\\u0440\\u044b\\u0442\\u044c \\u0434\\u043e\\u0441\\u0442\\u0443\\u043f \\u043f\\u043e SSH", "direction": "ingress", "port": "22", "protocol": "tcp", "cidr": "2.2.2.2/32"}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"description\": \"\\u041e\\u0442\\u043a\\\
          u0440\\u044b\\u0442\\u044c \\u0434\\u043e\\u0441\\u0442\\u0443\\u043f \\\
          u043f\\u043e SSH\", \"direction\": \"ingress\", \"port\": \"22\", \"protocol\"\
          : \"tcp\", \"cidr\": \"2.2.2.2/32\"}`)\n\treq, err := http.NewRequest(\"\
          POST\", \"https://api.timeweb.cloud/api/v1/firewall/groups/19da849d-51e5-4858-b5b8-9dc1aaef16f6/rules\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/firewall/groups/19da849d-51e5-4858-b5b8-9dc1aaef16f6/rules\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"description\\\": \\\"\\\\u041e\\\\u0442\\\\u043a\\\
          \\u0440\\\\u044b\\\\u0442\\\\u044c \\\\u0434\\\\u043e\\\\u0441\\\\u0442\\\
          \\u0443\\\\u043f \\\\u043f\\\\u043e SSH\\\", \\\"direction\\\": \\\"ingress\\\
          \", \\\"port\\\": \\\"22\\\", \\\"protocol\\\": \\\"tcp\\\", \\\"cidr\\\"\
          : \\\"2.2.2.2/32\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\t\
          httpConn.getOutputStream().close();\n\n\t\tInputStream responseStream =\
          \ httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
  /api/v1/firewall/groups/{group_id}/rules/{rule_id}:
    get:
      tags:
      - Firewall
      summary: Получение информации о правиле
      description: "Чтобы получить инфомрацию о правиле, отправьте GET запрос на `/api/v1/firewall/groups/{group_id}/rules/{rule_id}`"
      operationId: getGroupRule
      parameters:
      - name: rule_id
        in: path
        description: Идентификатор правила
        required: true
        style: simple
        explode: false
        schema:
          title: Rule Id
          type: string
          description: Идентификатор правила
      - name: group_id
        in: path
        description: Идентификатор группы правил
        required: true
        style: simple
        explode: false
        schema:
          title: Group Id
          type: string
          description: Идентификатор группы правил
      responses:
        "200":
          description: Информация о правиле
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_4'
              example:
                response_id: 4a5645c0-e0d4-457b-b835-1b72f08f9eae
                rule:
                  id: 396563da-05f6-4a18-83b3-6bac67d05789
                  description: Описание правила
                  direction: egress
                  protocol: tcp
                  port: "8080"
                  cidr: 8.8.4.4/32
                  group_id: 4083b942-bdcf-4493-937b-afd3e1a49d8b
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-tags-i18n:
        eng:
        - Firewall
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${TIMEWEB_CLOUD_TOKEN}" \
            "https://api.timeweb.cloud/api/v1/firewall/groups/cfdeeeab-5eaf-4ec1-a7fd-e372e5fead5a/rules/5e4733ea-f7fb-47ae-a5ec-c108f65f110f"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/firewall/groups/cfdeeeab-5eaf-4ec1-a7fd-e372e5fead5a/rules/5e4733ea-f7fb-47ae-a5ec-c108f65f110f', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ${TIMEWEB_CLOUD_TOKEN}'
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/firewall/groups/cfdeeeab-5eaf-4ec1-a7fd-e372e5fead5a/rules/5e4733ea-f7fb-47ae-a5ec-c108f65f110f', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get(
              'https://api.timeweb.cloud/api/v1/firewall/groups/cfdeeeab-5eaf-4ec1-a7fd-e372e5fead5a/rules/5e4733ea-f7fb-47ae-a5ec-c108f65f110f',
              headers=headers,
          )
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/firewall/groups/cfdeeeab-5eaf-4ec1-a7fd-e372e5fead5a/rules/5e4733ea-f7fb-47ae-a5ec-c108f65f110f');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/firewall/groups/cfdeeeab-5eaf-4ec1-a7fd-e372e5fead5a/rules/5e4733ea-f7fb-47ae-a5ec-c108f65f110f\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/firewall/groups/cfdeeeab-5eaf-4ec1-a7fd-e372e5fead5a/rules/5e4733ea-f7fb-47ae-a5ec-c108f65f110f\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
    delete:
      tags:
      - Firewall
      summary: Удаление firewall правила
      description: "Чтобы удалить правило, отправьте DELETE запрос на `/api/v1/firewall/groups/{group_id}/rules/{rule_id}`"
      operationId: deleteGroupRule
      parameters:
      - name: group_id
        in: path
        description: Идентификатор группы правил
        required: true
        style: simple
        explode: false
        schema:
          title: Group Id
          type: string
          description: Идентификатор группы правил
      - name: rule_id
        in: path
        description: Идентификатор правила
        required: true
        style: simple
        explode: false
        schema:
          title: Rule Id
          type: string
          description: Идентификатор правила
      responses:
        "204":
          description: Правило удалено
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-tags-i18n:
        eng:
        - Firewall
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${TIMEWEB_CLOUD_TOKEN}" \
            "https://api.timeweb.cloud/api/v1/firewall/groups/18548aca-9d08-4c63-9859-f062f681e5e7/rules/604cf092-8d08-4a29-a8d0-8c47b00f458c"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/firewall/groups/18548aca-9d08-4c63-9859-f062f681e5e7/rules/604cf092-8d08-4a29-a8d0-8c47b00f458c', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ${TIMEWEB_CLOUD_TOKEN}'
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/firewall/groups/18548aca-9d08-4c63-9859-f062f681e5e7/rules/604cf092-8d08-4a29-a8d0-8c47b00f458c', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.delete(
              'https://api.timeweb.cloud/api/v1/firewall/groups/18548aca-9d08-4c63-9859-f062f681e5e7/rules/604cf092-8d08-4a29-a8d0-8c47b00f458c',
              headers=headers,
          )
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/firewall/groups/18548aca-9d08-4c63-9859-f062f681e5e7/rules/604cf092-8d08-4a29-a8d0-8c47b00f458c');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/firewall/groups/18548aca-9d08-4c63-9859-f062f681e5e7/rules/604cf092-8d08-4a29-a8d0-8c47b00f458c\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/firewall/groups/18548aca-9d08-4c63-9859-f062f681e5e7/rules/604cf092-8d08-4a29-a8d0-8c47b00f458c\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
    patch:
      tags:
      - Firewall
      summary: Обновление firewall правила
      description: "Чтобы изменить правило, отправьте PATCH запрос на `/api/v1/firewall/groups/{group_id}/rules/{rule_id}`"
      operationId: updateGroupRule
      parameters:
      - name: group_id
        in: path
        description: Идентификатор группы правил
        required: true
        style: simple
        explode: false
        schema:
          title: Group Id
          type: string
          description: Идентификатор группы правил
      - name: rule_id
        in: path
        description: Идентификатор правила
        required: true
        style: simple
        explode: false
        schema:
          title: Rule Id
          type: string
          description: Идентификатор правила
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FirewallRuleInAPI'
        required: true
      responses:
        "201":
          description: Правило обновлено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_4'
              example:
                response_id: 101a32e4-0ea5-4c89-a4c6-e7c79fbc4eac
                rule:
                  id: 06b33663-a624-4c79-b970-6e7fa5d7e8f5
                  description: Описание правила
                  direction: egress
                  protocol: tcp
                  port: "8080"
                  cidr: 8.8.4.4/32
                  group_id: 84e4843e-c110-467f-a1f6-b08fbe57de6b
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-tags-i18n:
        eng:
        - Firewall
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X PATCH \
            -H "Content-Type: application/json" \
            -d '{"description": "\u041e\u0442\u043a\u0440\u044b\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043f\u043e SSH", "direction": "ingress", "port": "22", "protocol": "tcp", "cidr": "2.2.2.2/32"}' \
           -H "Authorization: Bearer ${TIMEWEB_CLOUD_TOKEN}" \
            "https://api.timeweb.cloud/api/v1/firewall/groups/8a0cc343-085f-4a9a-8963-7c2acbd5fdec/rules/c2888198-61a8-48bf-a1cd-25da10abbbf6"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/firewall/groups/8a0cc343-085f-4a9a-8963-7c2acbd5fdec/rules/c2888198-61a8-48bf-a1cd-25da10abbbf6', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ${TIMEWEB_CLOUD_TOKEN}'
              },
              // body: '{"description": "\\u041e\\u0442\\u043a\\u0440\\u044b\\u0442\\u044c \\u0434\\u043e\\u0441\\u0442\\u0443\\u043f \\u043f\\u043e SSH", "direction": "ingress", "port": "22", "protocol": "tcp", "cidr": "2.2.2.2/32"}',
              body: JSON.stringify({
                  'description': '\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u0434\u043E\u0441\u0442\u0443\u043F \u043F\u043E SSH',
                  'direction': 'ingress',
                  'port': '22',
                  'protocol': 'tcp',
                  'cidr': '2.2.2.2/32'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud/api/v1/firewall/groups/8a0cc343-085f-4a9a-8963-7c2acbd5fdec/rules/c2888198-61a8-48bf-a1cd-25da10abbbf6',
              // '{"description": "\\u041e\\u0442\\u043a\\u0440\\u044b\\u0442\\u044c \\u0434\\u043e\\u0441\\u0442\\u0443\\u043f \\u043f\\u043e SSH", "direction": "ingress", "port": "22", "protocol": "tcp", "cidr": "2.2.2.2/32"}',
              {
                  'description': '\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u0434\u043E\u0441\u0442\u0443\u043F \u043F\u043E SSH',
                  'direction': 'ingress',
                  'port': '22',
                  'protocol': 'tcp',
                  'cidr': '2.2.2.2/32'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              # Already added when you pass json=
              # 'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'description': 'Открыть доступ по SSH',
              'direction': 'ingress',
              'port': '22',
              'protocol': 'tcp',
              'cidr': '2.2.2.2/32',
          }

          response = requests.patch(
              'https://api.timeweb.cloud/api/v1/firewall/groups/8a0cc343-085f-4a9a-8963-7c2acbd5fdec/rules/c2888198-61a8-48bf-a1cd-25da10abbbf6',
              headers=headers,
              json=json_data,
          )
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/firewall/groups/8a0cc343-085f-4a9a-8963-7c2acbd5fdec/rules/c2888198-61a8-48bf-a1cd-25da10abbbf6');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"description": "\\u041e\\u0442\\u043a\\u0440\\u044b\\u0442\\u044c \\u0434\\u043e\\u0441\\u0442\\u0443\\u043f \\u043f\\u043e SSH", "direction": "ingress", "port": "22", "protocol": "tcp", "cidr": "2.2.2.2/32"}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"description\": \"\\u041e\\u0442\\u043a\\\
          u0440\\u044b\\u0442\\u044c \\u0434\\u043e\\u0441\\u0442\\u0443\\u043f \\\
          u043f\\u043e SSH\", \"direction\": \"ingress\", \"port\": \"22\", \"protocol\"\
          : \"tcp\", \"cidr\": \"2.2.2.2/32\"}`)\n\treq, err := http.NewRequest(\"\
          PATCH\", \"https://api.timeweb.cloud/api/v1/firewall/groups/8a0cc343-085f-4a9a-8963-7c2acbd5fdec/rules/c2888198-61a8-48bf-a1cd-25da10abbbf6\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/firewall/groups/8a0cc343-085f-4a9a-8963-7c2acbd5fdec/rules/c2888198-61a8-48bf-a1cd-25da10abbbf6\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"description\\\": \\\"\\\\u041e\\\\u0442\\\\u043a\\\
          \\u0440\\\\u044b\\\\u0442\\\\u044c \\\\u0434\\\\u043e\\\\u0441\\\\u0442\\\
          \\u0443\\\\u043f \\\\u043f\\\\u043e SSH\\\", \\\"direction\\\": \\\"ingress\\\
          \", \\\"port\\\": \\\"22\\\", \\\"protocol\\\": \\\"tcp\\\", \\\"cidr\\\"\
          : \\\"2.2.2.2/32\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\t\
          httpConn.getOutputStream().close();\n\n\t\tInputStream responseStream =\
          \ httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
  /api/v1/firewall/service/{resource_type}/{resource_id}:
    get:
      tags:
      - Firewall
      summary: Получение групп правил для ресурса
      description: "Чтобы получить список групп правил, с которыми слинкован ресур\
        с, отправьте GET запрос на `/api/v1/firewall/service/{resource_type}/{resource_id}`"
      operationId: getRulesForResource
      parameters:
      - name: resource_id
        in: path
        description: Идентификатор ресурса
        required: true
        style: simple
        explode: false
        schema:
          title: Resource Id
          type: string
          description: Идентификатор ресурса
      - name: resource_type
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ResourceType'
      - name: limit
        in: query
        description: "Обозначает количество записей, которое необходимо вернуть."
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 100
      - name: offset
        in: query
        description: Указывает на смещение относительно начала списка.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      responses:
        "200":
          description: Список групп правил
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_6'
              example:
                response_id: 236c07e1-aa0f-4788-ab14-ff0f12ca559d
                meta:
                  total: 5
                groups:
                - id: 17b41889-4bd1-49d2-bbb8-da1d167f6edc
                  created_at: 2023-02-03T08:31:47.174912
                  updated_at: 2023-02-03T08:31:47.174920
                  name: rules group
                  description: Group description
                - id: de052705-bfbe-4b3e-bbaa-868909b5198d
                  created_at: 2023-02-03T08:31:47.175007
                  updated_at: 2023-02-03T08:31:47.175008
                  name: rules group
                  description: Group description
                - id: 6ed11500-6f3e-4402-abcc-91060519f83b
                  created_at: 2023-02-03T08:31:47.175143
                  updated_at: 2023-02-03T08:31:47.175144
                  name: rules group
                  description: Group description
                - id: db6db0ed-87ca-40cb-a5e4-614e12f0559c
                  created_at: 2023-02-03T08:31:47.175175
                  updated_at: 2023-02-03T08:31:47.175175
                  name: rules group
                  description: Group description
                - id: a62dd218-8773-4a6a-80f9-728bcf1ac7a2
                  created_at: 2023-02-03T08:31:47.175203
                  updated_at: 2023-02-03T08:31:47.175203
                  name: rules group
                  description: Group description
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-tags-i18n:
        eng:
        - Firewall
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${TIMEWEB_CLOUD_TOKEN}" \
            "https://api.timeweb.cloud/api/v1/firewall/service/server/666664"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/firewall/service/server/666664', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ${TIMEWEB_CLOUD_TOKEN}'
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/firewall/service/server/666664', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/firewall/service/server/666664', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/firewall/service/server/666664');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/firewall/service/server/666664\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/firewall/service/server/666664\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
  /api/v1/balancers:
    get:
      tags:
      - Балансировщики
      summary: Получение списка всех бaлансировщиков
      description: |-
        Чтобы получить список всех бaлансировщиков на вашем аккаунте, отправьте GET-запрос на `/api/v1/balancers`.

         Тело ответа будет представлять собой объект JSON с ключом `balancers`.
      operationId: getBalancers
      parameters:
      - name: limit
        in: query
        description: "Обозначает количество записей, которое необходимо вернуть."
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 100
      - name: offset
        in: query
        description: Указывает на смещение относительно начала списка.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `balancers`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_9'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/balancers"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/balancers', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/balancers', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/balancers', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/balancers');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/balancers\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/balancers\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Balancers
    post:
      tags:
      - Балансировщики
      summary: Создание бaлансировщика
      description: |-
        Чтобы создать бaлансировщик на вашем аккаунте, отправьте POST-запрос на `/api/v1/balancers`, задав необходимые атрибуты.

        Балансировщик будет создан с использованием предоставленной информации. Тело ответа будет содержать объект JSON с информацией о созданном балансировщике.
      operationId: createBalancer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-balancer'
        required: true
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `balancer`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_10'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/balancer"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/balancer', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/balancer',
              '',
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/balancer', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/balancer');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/balancer\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/balancer\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Balancers
  /api/v1/balancers/{balancer_id}:
    get:
      tags:
      - Балансировщики
      summary: Получение бaлансировщика
      description: |
        Чтобы отобразить информацию об отдельном балансировщике, отправьте запрос GET на `api/v1/balancers/{balancer_id}`.
      operationId: getBalancer
      parameters:
      - name: balancer_id
        in: path
        description: Идентификатор балансировщика
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON с ключом `balancer`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_10'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/balancers/1051"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/balancers/1051', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/balancers/1051', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/balancers/1051', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/balancers/1051');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/balancers/1051\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/balancers/1051\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Balancers
    delete:
      tags:
      - Балансировщики
      summary: Удаление балансировщика
      description: |
        Чтобы удалить балансировщик, отправьте запрос DELETE в `api/v1/balancers/{balancer_id}`.
      operationId: deleteBalancer
      parameters:
      - name: balancer_id
        in: path
        description: Идентификатор балансировщика
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: hash
        in: query
        description: "Хеш, который совместно с кодом авторизации надо отправить дл\
          я удаления, если включено подтверждение удаления сервисов через Телеграм\
          ."
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 15095f25-aac3-4d60-a788-96cb5136f186
      - name: code
        in: query
        description: |-
          Код подтверждения, который придет к вам в Телеграм, после запроса удаления, если включено подтверждение удаления сервисов.

          При помощи API токена сервисы можно удалять без подтверждения, если параметр токена `is_able_to_delete` установлен в значение `true`
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "0000"
      responses:
        "200":
          description: Объект JSON c ключом `balancer_delete`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_11'
        "204":
          description: Балансировщик успешно удален.
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/balancers/1051"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/balancers/1051', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/balancers/1051', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.delete('https://api.timeweb.cloud/api/v1/balancers/1051', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/balancers/1051');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/balancers/1051\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/balancers/1051\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Balancers
    patch:
      tags:
      - Балансировщики
      summary: Обновление балансировщика
      description: |
        Чтобы обновить только определенные атрибуты балансировщика, отправьте запрос PATCH в `api/v1/balancers/{balancer_id}`.
      operationId: updateBalancer
      parameters:
      - name: balancer_id
        in: path
        description: Идентификатор балансировщика
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-balancer'
        required: true
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON с ключом `balancer`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_10'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X PATCH \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '${DATA}' \
            "https://api.timeweb.cloud/api/v1/balancers/1051"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/balancers/1051', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: '${DATA}'
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud/api/v1/balancers/1051',
              '${DATA}',
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          data = '${DATA}'

          response = requests.patch('https://api.timeweb.cloud/api/v1/balancers/1051', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/balancers/1051');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '${DATA}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`${DATA}`)\n\treq, err := http.NewRequest(\"\
          PATCH\", \"https://api.timeweb.cloud/api/v1/balancers/1051\", data)\n\t\
          if err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\"\
          , \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer \"\
          \ + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/balancers/1051\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          ${DATA}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Balancers
  /api/v1/balancers/{balancer_id}/ips:
    get:
      tags:
      - Балансировщики
      summary: Получение списка IP-адресов балансировщика
      description: |
        Чтобы добавить `IP`-адреса к балансировщику, отправьте запрос GET в `api/v1/balancers/{balancer_id}/ips`.
      operationId: getBalancerIPs
      parameters:
      - name: balancer_id
        in: path
        description: Идентификатор балансировщика
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `ips`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_12'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/balancers/1051/ips"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/balancers/1051/ips', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/balancers/1051/ips', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/balancers/1051/ips', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/balancers/1051/ips');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/balancers/1051/ips\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/balancers/1051/ips\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Balancers
    post:
      tags:
      - Балансировщики
      summary: Добавление IP-адресов к балансировщику
      description: |
        Чтобы добавить `IP`-адреса к балансировщику, отправьте запрос POST в `api/v1/balancers/{balancer_id}/ips`.
      operationId: addIPsToBalancer
      parameters:
      - name: balancer_id
        in: path
        description: Идентификатор балансировщика
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/balancer_id_ips_body'
        required: true
      responses:
        "204":
          description: '`Ip` адреса добавлены к балансировщику'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/balancers/1051/ips"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/balancers/1051/ips', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/balancers/1051/ips',
              '',
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/balancers/1051/ips', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/balancers/1051/ips');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/balancers/1051/ips\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/balancers/1051/ips\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Balancers
    delete:
      tags:
      - Балансировщики
      summary: Удаление IP-адресов из балансировщика
      description: |
        Чтобы удалить `IP`-адреса из балансировщика, отправьте запрос DELETE в `api/v1/balancers/{balancer_id}/ips`.
      operationId: deleteIPsFromBalancer
      parameters:
      - name: balancer_id
        in: path
        description: Идентификатор балансировщика
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/balancer_id_ips_body_1'
        required: true
      responses:
        "204":
          description: '`Ip` адрес удален из балансировщика'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/balancers/1051/ips"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/balancers/1051/ips', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/balancers/1051/ips', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.delete('https://api.timeweb.cloud/api/v1/balancers/1051/ips', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/balancers/1051/ips');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/balancers/1051/ips\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/balancers/1051/ips\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Balancers
  /api/v1/balancers/{balancer_id}/rules:
    get:
      tags:
      - Балансировщики
      summary: Получение правил балансировщика
      description: |
        Чтобы получить правила балансировщика, отправьте запрос GET в `api/v1/balancers/{balancer_id}/rules`.
      operationId: getBalancerRules
      parameters:
      - name: balancer_id
        in: path
        description: Идентификатор балансировщика
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `rules`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_13'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/balancers/1051/rules"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/balancers/1051/rules', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/balancers/1051/rules', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/balancers/1051/rules', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/balancers/1051/rules');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/balancers/1051/rules\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/balancers/1051/rules\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Balancers
    post:
      tags:
      - Балансировщики
      summary: Создание правила для балансировщика
      description: |
        Чтобы создать правило для балансировщика, отправьте запрос POST в `api/v1/balancers/{balancer_id}/rules`.
      operationId: createBalancerRule
      parameters:
      - name: balancer_id
        in: path
        description: Идентификатор балансировщика
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-rule'
        required: true
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `rule`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_14'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/balancers/1051/rules"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/balancers/1051/rules', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/balancers/1051/rules',
              '',
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/balancers/1051/rules', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/balancers/1051/rules');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/balancers/1051/rules\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/balancers/1051/rules\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Balancers
  /api/v1/balancers/{balancer_id}/rules/{rule_id}:
    delete:
      tags:
      - Балансировщики
      summary: Удаление правила для балансировщика
      description: |
        Чтобы удалить правило для балансировщика, отправьте запрос DELETE в `api/v1/balancers/{balancer_id}/rules/{rule_id}`.
      operationId: deleteBalancerRule
      parameters:
      - name: balancer_id
        in: path
        description: Идентификатор балансировщика
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: rule_id
        in: path
        description: Идентификатор правила для балансировщика
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: Правило удалено из балансировщика
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/balancers/1051/rules/123"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/balancers/1051/rules/123', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/balancers/1051/rules/123', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.delete('https://api.timeweb.cloud/api/v1/balancers/1051/rules/123', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/balancers/1051/rules/123');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/balancers/1051/rules/123\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/balancers/1051/rules/123\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Balancers
    patch:
      tags:
      - Балансировщики
      summary: Обновление правила для балансировщика
      description: |
        Чтобы обновить правило для балансировщика, отправьте запрос PATCH в `api/v1/balancers/{balancer_id}/rules/{rule_id}`.
      operationId: updateBalancerRule
      parameters:
      - name: balancer_id
        in: path
        description: Идентификатор балансировщика
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: rule_id
        in: path
        description: Идентификатор правила для балансировщика
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-rule'
        required: true
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `rule`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_14'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X PATCH \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/balancers/1051/rules/123"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/balancers/1051/rules/123', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud/api/v1/balancers/1051/rules/123',
              '',
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.patch('https://api.timeweb.cloud/api/v1/balancers/1051/rules/123', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/balancers/1051/rules/123');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/balancers/1051/rules/123\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/balancers/1051/rules/123\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Balancers
  /api/v1/presets/balancers:
    get:
      tags:
      - Балансировщики
      summary: Получение списка тарифов для балансировщика
      description: |-
        Чтобы получить список тарифов для балансировщика, отправьте GET-запрос на `/api/v1/presets/balancers`.

         Тело ответа будет представлять собой объект JSON с ключом `balancers_presets`.
      operationId: getBalancersPresets
      responses:
        "200":
          description: Тарифы успешно получены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_15'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/presets/balancers"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/presets/balancers', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/presets/balancers', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/presets/balancers', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/presets/balancers');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/presets/balancers\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/presets/balancers\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Balancers
  /api/v1/databases:
    get:
      tags:
      - Базы данных
      summary: Получение списка кластеров баз данных
      description: |-
        Чтобы получить список кластеров баз данных, отправьте GET-запрос на `/api/v1/databases`.

         Тело ответа будет представлять собой объект JSON с ключом `dbs`.
      operationId: getDatabaseClusters
      parameters:
      - name: limit
        in: query
        description: "Обозначает количество записей, которое необходимо вернуть."
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 100
      - name: offset
        in: query
        description: Указывает на смещение относительно начала списка.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `dbs`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_16'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/databases"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/databases', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/databases', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/databases', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/databases');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/databases\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/databases\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Databases
    post:
      tags:
      - Базы данных
      summary: Создание кластера базы данных
      description: |-
        Чтобы создать кластер базы данных на вашем аккаунте, отправьте POST-запрос на `/api/v1/databases`.

         Вместе с кластером будет создан один инстанс базы данных и один пользователь.
      operationId: createDatabaseCluster
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-cluster'
        required: true
      responses:
        "201":
          description: Ответ будет представлять собой объект JSON c ключом `db`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_5'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{
            "preset_id": 443,
            "type": "mysql",
            "name": "new database",
            "description": "some description"
          }' "https://api.timeweb.cloud/api/v1/databases"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/databases', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{\n  "preset_id": 443,\n  "type": "mysql",\n  "name": "new database",\n  "description": "some description"\n}',
              body: JSON.stringify({
                  'preset_id': 443,
                  'type': 'mysql',
                  'name': 'new database',
                  'description': 'some description'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/databases',
              // '{\n  "preset_id": 443,\n  "type": "mysql",\n  "name": "new database",\n  "description": "some description"\n}',
              {
                  'preset_id': 443,
                  'type': 'mysql',
                  'name': 'new database',
                  'description': 'some description'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'preset_id': 443,
              'type': 'mysql',
              'name': 'new database',
              'description': 'some description',
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/databases', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{\n  "preset_id": 443,\n  "type": "mysql",\n  "name": "new database",\n  "description": "some description"\n}'
          #response = requests.post('https://api.timeweb.cloud/api/v1/databases', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/databases');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"preset_id\": 443,\n  \"type\": \"mysql\",\n  \"name\": \"new database\",\n  \"description\": \"some description\"\n}");

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\n  \"preset_id\": 443,\n  \"type\": \"\
          mysql\",\n  \"name\": \"new database\",\n  \"description\": \"some description\"\
          \n}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/databases\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/databases\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\n  \\\"preset_id\\\": 443,\\n  \\\"type\\\": \\\"mysql\\\",\\n  \\\"\
          name\\\": \\\"new database\\\",\\n  \\\"description\\\": \\\"some description\\\
          \"\\n}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Databases
  /api/v1/databases/{db_cluster_id}:
    get:
      tags:
      - Базы данных
      summary: Получение кластера базы данных
      description: "Чтобы получить кластер базы данных на вашем аккаунте, отправьт\
        е GET-запрос на `/api/v1/databases/{db_cluster_id}`."
      operationId: getDatabaseCluster
      parameters:
      - name: db_cluster_id
        in: path
        description: Идентификатор кластера базы данных
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "201":
          description: Ответ будет представлять собой объект JSON c ключом `db`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_5'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/databases/1"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/databases/1', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/databases/1', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/databases/1', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/databases/1');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/databases/1\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/databases/1\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Databases
    delete:
      tags:
      - Базы данных
      summary: Удаление кластера базы данных
      description: "Чтобы удалить кластер базы данных, отправьте DELETE-запрос на\
        \ `/api/v1/databases/{db_cluster_id}`."
      operationId: deleteDatabaseCluster
      parameters:
      - name: db_cluster_id
        in: path
        description: Идентификатор кластера базы данных
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: hash
        in: query
        description: "Хеш, который совместно с кодом авторизации надо отправить дл\
          я удаления, если включено подтверждение удаления сервисов через Телеграм\
          ."
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 15095f25-aac3-4d60-a788-96cb5136f186
      - name: code
        in: query
        description: |-
          Код подтверждения, который придет к вам в Телеграм, после запроса удаления, если включено подтверждение удаления сервисов.

          При помощи API токена сервисы можно удалять без подтверждения, если параметр токена `is_able_to_delete` установлен в значение `true`
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "0000"
      responses:
        "200":
          description: Объект JSON c ключом `hash`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_17'
        "204":
          description: Кластер базы данных удален.
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/databases/1"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/databases/1', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/databases/1', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.delete('https://api.timeweb.cloud/api/v1/databases/1', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/databases/1');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/databases/1\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/databases/1\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Databases
    patch:
      tags:
      - Базы данных
      summary: Изменение кластера базы данных
      description: "Чтобы изменить кластер базы данных на вашем аккаунте, отправьт\
        е PATCH-запрос на `/api/v1/databases/{db_cluster_id}`."
      operationId: updateDatabaseCluster
      parameters:
      - name: db_cluster_id
        in: path
        description: Идентификатор кластера базы данных
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-cluster'
        required: true
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `db`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_5'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X PATCH \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{
            "preset_id": 443,
           "name": "new database",
            "description": "some description"
          }' "https://api.timeweb.cloud/api/v1/databases/1"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/databases/1', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{\n  "preset_id": 443,\n "name": "new database",\n  "description": "some description"\n}',
              body: JSON.stringify({
                  'preset_id': 443,
                  'name': 'new database',
                  'description': 'some description'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud/api/v1/databases/1',
              // '{\n  "preset_id": 443,\n "name": "new database",\n  "description": "some description"\n}',
              {
                  'preset_id': 443,
                  'name': 'new database',
                  'description': 'some description'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'preset_id': 443,
              'name': 'new database',
              'description': 'some description',
          }

          response = requests.patch('https://api.timeweb.cloud/api/v1/databases/1', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{\n  "preset_id": 443,\n "name": "new database",\n  "description": "some description"\n}'
          #response = requests.patch('https://api.timeweb.cloud/api/v1/databases/1', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/databases/1');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"preset_id\": 443,\n \"name\": \"new database\",\n  \"description\": \"some description\"\n}");

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\n  \"preset_id\": 443,\n \"name\": \"\
          new database\",\n  \"description\": \"some description\"\n}`)\n\treq, err\
          \ := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/databases/1\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/databases/1\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\n  \\\"preset_id\\\": 443,\\n \\\"name\\\": \\\"new database\\\",\\n\
          \  \\\"description\\\": \\\"some description\\\"\\n}\");\n\t\twriter.flush();\n\
          \t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Databases
  /api/v1/databases/{db_cluster_id}/admins:
    get:
      tags:
      - Базы данных
      summary: Получение списка пользователей базы данных
      description: "Чтобы получить список пользователей базы данных на вашем аккау\
        нте, отправьте GET-запрос на `/api/v1/databases/{db_cluster_id}/admins`."
      operationId: getDatabaseUsers
      parameters:
      - name: db_cluster_id
        in: path
        description: Идентификатор кластера базы данных
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `admins`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_18'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/databases/1/admins"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/databases/1/admins', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/databases/1/admins', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/databases/1/admins', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/databases/1/admins');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/databases/1/admins\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/databases/1/admins\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Databases
    post:
      tags:
      - Базы данных
      summary: Создание пользователя базы данных
      description: "Чтобы создать пользователя базы данных, отправьте POST-запрос\
        \ на `/api/v1/databases/{db_cluster_id}/admins`."
      operationId: createDatabaseUser
      parameters:
      - name: db_cluster_id
        in: path
        description: Идентификатор кластера базы данных
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-admin'
        required: true
      responses:
        "201":
          description: Ответ будет представлять собой объект JSON c ключом `admin`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_6'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{
            "login": "default_login",
            "password": "CA?bfNmZ3_X&=r",
            "host": "%",
            "privileges": ["SELECT", "INDEX", "INSERT"]
          }' "https://api.timeweb.cloud/api/v1/databases/1/admins"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/databases/1/admins', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{\n  "login": "default_login",\n  "password": "CA?bfNmZ3_X&=r",\n  "host": "%",\n  "privileges": ["SELECT", "INDEX", "INSERT"]\n}',
              body: JSON.stringify({
                  'login': 'default_login',
                  'password': 'CA?bfNmZ3_X&=r',
                  'host': '%',
                  'privileges': [
                      'SELECT',
                      'INDEX',
                      'INSERT'
                  ]
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/databases/1/admins',
              // '{\n  "login": "default_login",\n  "password": "CA?bfNmZ3_X&=r",\n  "host": "%",\n  "privileges": ["SELECT", "INDEX", "INSERT"]\n}',
              {
                  'login': 'default_login',
                  'password': 'CA?bfNmZ3_X&=r',
                  'host': '%',
                  'privileges': [
                      'SELECT',
                      'INDEX',
                      'INSERT'
                  ]
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'login': 'default_login',
              'password': 'CA?bfNmZ3_X&=r',
              'host': '%',
              'privileges': [
                  'SELECT',
                  'INDEX',
                  'INSERT',
              ],
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/databases/1/admins', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{\n  "login": "default_login",\n  "password": "CA?bfNmZ3_X&=r",\n  "host": "%",\n  "privileges": ["SELECT", "INDEX", "INSERT"]\n}'
          #response = requests.post('https://api.timeweb.cloud/api/v1/databases/1/admins', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/databases/1/admins');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"login\": \"default_login\",\n  \"password\": \"CA?bfNmZ3_X&=r\",\n  \"host\": \"%\",\n  \"privileges\": [\"SELECT\", \"INDEX\", \"INSERT\"]\n}");

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\n  \"login\": \"default_login\",\n  \"\
          password\": \"CA?bfNmZ3_X&=r\",\n  \"host\": \"%\",\n  \"privileges\": [\"\
          SELECT\", \"INDEX\", \"INSERT\"]\n}`)\n\treq, err := http.NewRequest(\"\
          POST\", \"https://api.timeweb.cloud/api/v1/databases/1/admins\", data)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\"\
          , \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer \"\
          \ + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/databases/1/admins\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\n  \\\"login\\\": \\\"default_login\\\",\\n  \\\"password\\\": \\\"CA?bfNmZ3_X&=r\\\
          \",\\n  \\\"host\\\": \\\"%\\\",\\n  \\\"privileges\\\": [\\\"SELECT\\\"\
          , \\\"INDEX\\\", \\\"INSERT\\\"]\\n}\");\n\t\twriter.flush();\n\t\twriter.close();\n\
          \t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream\
          \ = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Databases
  /api/v1/databases/{db_cluster_id}/admins/{admin_id}:
    get:
      tags:
      - Базы данных
      summary: Получение пользователя базы данных
      description: "Чтобы получить пользователя базы данных на вашем аккаунте, отп\
        равьте GET-запрос на `/api/v1/databases/{db_cluster_id}/admins/{admin_id}`."
      operationId: getDatabaseUser
      parameters:
      - name: db_cluster_id
        in: path
        description: Идентификатор кластера базы данных
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: admin_id
        in: path
        description: Идентификатор пользователя базы данных
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `admin`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_6'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/databases/1/admins/2"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/databases/1/admins/2', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/databases/1/admins/2', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/databases/1/admins/2', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/databases/1/admins/2');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/databases/1/admins/2\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/databases/1/admins/2\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Databases
    delete:
      tags:
      - Базы данных
      summary: Удаление пользователя базы данных
      description: "Чтобы удалить пользователя базы данных на вашем аккаунте, отпр\
        авьте DELETE-запрос на `/api/v1/databases/{db_cluster_id}/admins/{admin_id}`."
      operationId: deleteDatabaseUser
      parameters:
      - name: db_cluster_id
        in: path
        description: Идентификатор кластера базы данных
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: admin_id
        in: path
        description: Идентификатор пользователя базы данных
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: Пользователь базы данных удален.
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/databases/1/admins/2"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/databases/1/admins/2', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/databases/1/admins/2', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.delete('https://api.timeweb.cloud/api/v1/databases/1/admins/2', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/databases/1/admins/2');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/databases/1/admins/2\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/databases/1/admins/2\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Databases
    patch:
      tags:
      - Базы данных
      summary: Изменение пользователя базы данных
      description: "Чтобы изменить пользователя базы данных на вашем аккаунте, отп\
        равьте PATCH-запрос на `/api/v1/databases/{db_cluster_id}/admins/{admin_id}`."
      operationId: updateDatabaseUser
      parameters:
      - name: db_cluster_id
        in: path
        description: Идентификатор кластера базы данных
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: admin_id
        in: path
        description: Идентификатор пользователя базы данных
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-admin'
        required: true
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `admin`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_6'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X PATCH \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{
           "password": "CA?bfNmZ3_X&=r",
           "privileges": ["SELECT", "INDEX", "INSERT"]
          }' "https://api.timeweb.cloud/api/v1/databases/1/admins/2"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/databases/1/admins/2', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{\n "password": "CA?bfNmZ3_X&=r",\n "privileges": ["SELECT", "INDEX", "INSERT"]\n}',
              body: JSON.stringify({
                  'password': 'CA?bfNmZ3_X&=r',
                  'privileges': [
                      'SELECT',
                      'INDEX',
                      'INSERT'
                  ]
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud/api/v1/databases/1/admins/2',
              // '{\n "password": "CA?bfNmZ3_X&=r",\n "privileges": ["SELECT", "INDEX", "INSERT"]\n}',
              {
                  'password': 'CA?bfNmZ3_X&=r',
                  'privileges': [
                      'SELECT',
                      'INDEX',
                      'INSERT'
                  ]
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'password': 'CA?bfNmZ3_X&=r',
              'privileges': [
                  'SELECT',
                  'INDEX',
                  'INSERT',
              ],
          }

          response = requests.patch('https://api.timeweb.cloud/api/v1/databases/1/admins/2', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{\n "password": "CA?bfNmZ3_X&=r",\n "privileges": ["SELECT", "INDEX", "INSERT"]\n}'
          #response = requests.patch('https://api.timeweb.cloud/api/v1/databases/1/admins/2', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/databases/1/admins/2');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n \"password\": \"CA?bfNmZ3_X&=r\",\n \"privileges\": [\"SELECT\", \"INDEX\", \"INSERT\"]\n}");

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\n \"password\": \"CA?bfNmZ3_X&=r\",\n\
          \ \"privileges\": [\"SELECT\", \"INDEX\", \"INSERT\"]\n}`)\n\treq, err :=\
          \ http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/databases/1/admins/2\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/databases/1/admins/2\");\n\t\t\
          HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\n \\\"password\\\": \\\"CA?bfNmZ3_X&=r\\\",\\n \\\"\
          privileges\\\": [\\\"SELECT\\\", \\\"INDEX\\\", \\\"INSERT\\\"]\\n}\");\n\
          \t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Databases
  /api/v1/databases/{db_cluster_id}/instances:
    get:
      tags:
      - Базы данных
      summary: Получение списка инстансов баз данных
      description: "Чтобы получить список баз данных на вашем аккаунте, отправьте\
        \ GET-запрос на `/api/v1/databases/{db_cluster_id}/instances`."
      operationId: getDatabaseInstances
      parameters:
      - name: db_cluster_id
        in: path
        description: Идентификатор кластера базы данных
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `instances`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_19'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/databases/1/instances"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/databases/1/instances', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/databases/1/instances', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/databases/1/instances', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/databases/1/instances');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/databases/1/instances\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/databases/1/instances\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Databases
    post:
      tags:
      - Базы данных
      summary: Создание инстанса базы данных
      description: "Чтобы создать инстанс базы данных, отправьте POST-запрос на `/api/v1/databases/{db_cluster_id}/instances`.\\\
        \n \n Существующие пользователи не будут иметь доступа к новой базе данных\
        \ после создания. Вы можете изменить привилегии для пользователя через <a\
        \ href='#tag/Bazy-dannyh/operation/updateDatabaseUser'>метод изменения пол\
        ьзователя</a> "
      operationId: createDatabaseInstance
      parameters:
      - name: db_cluster_id
        in: path
        description: Идентификатор кластера базы данных
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-instance'
        required: true
      responses:
        "201":
          description: Ответ будет представлять собой объект JSON c ключом `instance`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_7'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{
            "name": "default_name",
            "description": "description"
          }' "https://api.timeweb.cloud/api/v1/databases/1/instances"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/databases/1/instances', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{\n  "name": "default_name",\n  "description": "description"\n}',
              body: JSON.stringify({
                  'name': 'default_name',
                  'description': 'description'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/databases/1/instances',
              // '{\n  "name": "default_name",\n  "description": "description"\n}',
              {
                  'name': 'default_name',
                  'description': 'description'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'name': 'default_name',
              'description': 'description',
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/databases/1/instances', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{\n  "name": "default_name",\n  "description": "description"\n}'
          #response = requests.post('https://api.timeweb.cloud/api/v1/databases/1/instances', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/databases/1/instances');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"name\": \"default_name\",\n  \"description\": \"description\"\n}");

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\n  \"name\": \"default_name\",\n  \"description\"\
          : \"description\"\n}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/databases/1/instances\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/databases/1/instances\");\n\t\t\
          HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\n  \\\"name\\\": \\\"default_name\\\",\\n  \\\"description\\\
          \": \\\"description\\\"\\n}\");\n\t\twriter.flush();\n\t\twriter.close();\n\
          \t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream\
          \ = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Databases
  /api/v1/databases/{db_cluster_id}/instances/{instance_id}:
    get:
      tags:
      - Базы данных
      summary: Получение инстанса базы данных
      description: "Чтобы получить инстанс базы данных, отправьте GET-запрос на `/api/v1/databases/{db_cluster_id}/instances/{instance_id}`."
      operationId: getDatabaseInstance
      parameters:
      - name: db_cluster_id
        in: path
        description: Идентификатор кластера базы данных
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: instance_id
        in: path
        description: Идентификатор инстанса базы данных
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `instance`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_7'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/databases/1/instances/2"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/databases/1/instances/2', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/databases/1/instances/2', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/databases/1/instances/2', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/databases/1/instances/2');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/databases/1/instances/2\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/databases/1/instances/2\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Databases
    delete:
      tags:
      - Базы данных
      summary: Удаление инстанса базы данных
      description: "Чтобы удалить инстанс базы данных, отправьте DELETE-запрос на\
        \ `/api/v1/databases/{db_cluster_id}/instances/{instance_id}`."
      operationId: deleteDatabaseInstance
      parameters:
      - name: db_cluster_id
        in: path
        description: Идентификатор кластера базы данных
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: instance_id
        in: path
        description: Идентификатор инстанса базы данных
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: Инстанс базы данных удален.
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/databases/1/instances/2"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/databases/1/instances/2', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/databases/1/instances/2', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.delete('https://api.timeweb.cloud/api/v1/databases/1/instances/2', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/databases/1/instances/2');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/databases/1/instances/2\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/databases/1/instances/2\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Databases
    patch:
      tags:
      - Базы данных
      summary: Изменение инстанса базы данных
      description: "Чтобы изменить инстанс базы данных, отправьте PATCH-запрос на\
        \ `/api/v1/databases/{db_cluster_id}/instances/{instance_id}`."
      operationId: updateDatabaseInstance
      parameters:
      - name: db_cluster_id
        in: path
        description: Идентификатор кластера базы данных
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-instance'
        required: true
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `instance`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_7'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X PATCH \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{
            "name": "default_name",
            "description": "description"
          }' "https://api.timeweb.cloud/api/v1/databases/1/instances/2"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/databases/1/instances/2', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{\n  "name": "default_name",\n  "description": "description"\n}',
              body: JSON.stringify({
                  'name': 'default_name',
                  'description': 'description'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud/api/v1/databases/1/instances/2',
              // '{\n  "name": "default_name",\n  "description": "description"\n}',
              {
                  'name': 'default_name',
                  'description': 'description'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'name': 'default_name',
              'description': 'description',
          }

          response = requests.patch('https://api.timeweb.cloud/api/v1/databases/1/instances/2', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{\n  "name": "default_name",\n  "description": "description"\n}'
          #response = requests.patch('https://api.timeweb.cloud/api/v1/databases/1/instances/2', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/databases/1/instances/2');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"name\": \"default_name\",\n  \"description\": \"description\"\n}");

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\n  \"name\": \"default_name\",\n  \"description\"\
          : \"description\"\n}`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/databases/1/instances/2\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/databases/1/instances/2\");\n\t\
          \tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\n  \\\"name\\\": \\\"default_name\\\",\\n  \\\"description\\\
          \": \\\"description\\\"\\n}\");\n\t\twriter.flush();\n\t\twriter.close();\n\
          \t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream\
          \ = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Databases
  /api/v1/dbs:
    get:
      tags:
      - Базы данных
      summary: Получение списка всех баз данных
      description: |-
        Чтобы получить список всех баз данных на вашем аккаунте, отправьте GET-запрос на `/api/v1/dbs`.

         Тело ответа будет представлять собой объект JSON с ключом `dbs`.
      operationId: getDatabases
      parameters:
      - name: limit
        in: query
        description: "Обозначает количество записей, которое необходимо вернуть."
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 100
      - name: offset
        in: query
        description: Указывает на смещение относительно начала списка.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `dbs`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_20'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      deprecated: true
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/dbs"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/dbs', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/dbs', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/dbs', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/dbs');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/dbs\", nil)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\"\
          , \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer \"\
          \ + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/dbs\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Databases
    post:
      tags:
      - Базы данных
      summary: Создание базы данных
      description: |-
        Чтобы создать базу данных на вашем аккаунте, отправьте POST-запрос на `/api/v1/dbs`, задав необходимые атрибуты.

        База данных будет создана с использованием предоставленной информации. Тело ответа будет содержать объект JSON с информацией о созданной базе данных.
      operationId: createDatabase
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-db'
        required: true
      responses:
        "201":
          description: Ответ будет представлять собой объект JSON c ключом `db`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_8'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      deprecated: true
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/db"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/db', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/db',
              '',
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/db', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/db');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/db\", nil)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\"\
          , \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer \"\
          \ + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/db\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Databases
  /api/v1/dbs/{db_id}:
    get:
      tags:
      - Базы данных
      summary: Получение базы данных
      description: |
        Чтобы отобразить информацию об отдельной базе данных, отправьте запрос GET на `api/v1/dbs/{db_id}`.
      operationId: getDatabase
      parameters:
      - name: db_id
        in: path
        description: Идентификатор базы данных
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON с ключом `db`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_8'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      deprecated: true
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/dbs/1051"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/dbs/1051', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/dbs/1051', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/dbs/1051', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/dbs/1051');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/dbs/1051\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/dbs/1051\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Databases
    delete:
      tags:
      - Базы данных
      summary: Удаление базы данных
      description: |
        Чтобы удалить базу данных, отправьте запрос DELETE в `api/v1/dbs/{db_id}`.
      operationId: deleteDatabase
      parameters:
      - name: db_id
        in: path
        description: Идентификатор базы данных
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: hash
        in: query
        description: "Хеш, который совместно с кодом авторизации надо отправить дл\
          я удаления, если включено подтверждение удаления сервисов через Телеграм\
          ."
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 15095f25-aac3-4d60-a788-96cb5136f186
      - name: code
        in: query
        description: |-
          Код подтверждения, который придет к вам в Телеграм, после запроса удаления, если включено подтверждение удаления сервисов.

          При помощи API токена сервисы можно удалять без подтверждения, если параметр токена `is_able_to_delete` установлен в значение `true`
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "0000"
      responses:
        "200":
          description: Объект JSON c ключом `database_delete`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_21'
        "204":
          description: База данных успешно удалена.
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      deprecated: true
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/dbs/1051"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/dbs/1051', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/dbs/1051', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.delete('https://api.timeweb.cloud/api/v1/dbs/1051', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/dbs/1051');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/dbs/1051\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/dbs/1051\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Databases
    patch:
      tags:
      - Базы данных
      summary: Обновление базы данных
      description: |
        Чтобы обновить только определенные атрибуты базы данных, отправьте запрос PATCH в `api/v1/dbs/{db_id}`.
      operationId: updateDatabase
      parameters:
      - name: db_id
        in: path
        description: Идентификатор базы данных
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-db'
        required: true
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON с ключом `db`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_8'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      deprecated: true
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X PATCH \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '${DATA}' \
            "https://api.timeweb.cloud/api/v1/dbs/1051"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/dbs/1051', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: '${DATA}'
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud/api/v1/dbs/1051',
              '${DATA}',
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          data = '${DATA}'

          response = requests.patch('https://api.timeweb.cloud/api/v1/dbs/1051', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/dbs/1051');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '${DATA}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`${DATA}`)\n\treq, err := http.NewRequest(\"\
          PATCH\", \"https://api.timeweb.cloud/api/v1/dbs/1051\", data)\n\tif err\
          \ != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\",\
          \ \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer \"\
          \ + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/dbs/1051\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          ${DATA}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Databases
  /api/v1/dbs/{db_id}/auto-backups:
    get:
      tags:
      - Базы данных
      summary: Получение настроек автобэкапов базы данных
      description: "Чтобы получить список настроек автобэкапов базы данных, отправ\
        ьте запрос GET в `api/v1/dbs/{db_id}/auto-backups`"
      operationId: getDatabaseAutoBackupsSettings
      parameters:
      - name: db_id
        in: path
        description: Идентификатор базы данных
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON с ключом `auto_backups_settings`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_22'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/dbs/1051/auto-backups"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/dbs/1051/auto-backups', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/dbs/1051/auto-backups', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/dbs/1051/auto-backups', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/dbs/1051/auto-backups');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/dbs/1051/auto-backups\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/dbs/1051/auto-backups\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Databases
    patch:
      tags:
      - Базы данных
      summary: Изменение настроек автобэкапов базы данных
      description: "Чтобы изменить список настроек автобэкапов базы данных, отправ\
        ьте запрос PATCH в `api/v1/dbs/{db_id}/auto-backups`"
      operationId: updateDatabaseAutoBackupsSettings
      parameters:
      - name: db_id
        in: path
        description: Идентификатор базы данных
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        description: "При значении `is_enabled`: `true`, поля `copy_count`, `creation_start_at`,\
          \ `interval` являются обязательными"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auto-backup'
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON с ключом `auto_backups_settings`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_22'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -H\
          \ \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" -d '{ \"copy_count\": 1,\
          \ \n \"creation_start_at\": \"2024-02-02T00:00:00.000Z\", \n \"is_enabled\"\
          : true, \n \"interval\": \"week\"}' \\\n  \"https://api.timeweb.cloud/api/v1/dbs/123/auto-backups\""
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/dbs/123/auto-backups', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{ "copy_count": 1, \n "creation_start_at": "2024-02-02T00:00:00.000Z", \n "is_enabled": true, \n "interval": "week"}',
              body: JSON.stringify({
                  'copy_count': 1,
                  'creation_start_at': '2024-02-02T00:00:00.000Z',
                  'is_enabled': true,
                  'interval': 'week'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud/api/v1/dbs/123/auto-backups',
              // '{ "copy_count": 1, \n "creation_start_at": "2024-02-02T00:00:00.000Z", \n "is_enabled": true, \n "interval": "week"}',
              {
                  'copy_count': 1,
                  'creation_start_at': '2024-02-02T00:00:00.000Z',
                  'is_enabled': true,
                  'interval': 'week'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'copy_count': 1,
              'creation_start_at': '2024-02-02T00:00:00.000Z',
              'is_enabled': True,
              'interval': 'week',
          }

          response = requests.patch('https://api.timeweb.cloud/api/v1/dbs/123/auto-backups', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{ "copy_count": 1, \n "creation_start_at": "2024-02-02T00:00:00.000Z", \n "is_enabled": true, \n "interval": "week"}'
          #response = requests.patch('https://api.timeweb.cloud/api/v1/dbs/123/auto-backups', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/dbs/123/auto-backups');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, "{ \"copy_count\": 1, \n \"creation_start_at\": \"2024-02-02T00:00:00.000Z\", \n \"is_enabled\": true, \n \"interval\": \"week\"}");

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{ \"copy_count\": 1, \n \"creation_start_at\"\
          : \"2024-02-02T00:00:00.000Z\", \n \"is_enabled\": true, \n \"interval\"\
          : \"week\"}`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/dbs/123/auto-backups\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/dbs/123/auto-backups\");\n\t\t\
          HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{ \\\"copy_count\\\": 1, \\n \\\"creation_start_at\\\"\
          : \\\"2024-02-02T00:00:00.000Z\\\", \\n \\\"is_enabled\\\": true, \\n \\\
          \"interval\\\": \\\"week\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\
          \t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream\
          \ = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Databases
  /api/v1/dbs/{db_id}/backups:
    get:
      tags:
      - Базы данных
      summary: Список бэкапов базы данных
      description: |
        Чтобы получить список бэкапов базы данных, отправьте запрос GET в `api/v1/dbs/{db_id}/backups`.
      operationId: getDatabaseBackups
      parameters:
      - name: db_id
        in: path
        description: Идентификатор базы данных
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: limit
        in: query
        description: "Обозначает количество записей, которое необходимо вернуть."
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 100
      - name: offset
        in: query
        description: Указывает на смещение относительно начала списка.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON с ключом `backups`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_23'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/dbs/1051/backups"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/dbs/1051/backups', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/dbs/1051/backups', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/dbs/1051/backups', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/dbs/1051/backups');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/dbs/1051/backups\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/dbs/1051/backups\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Databases
    post:
      tags:
      - Базы данных
      summary: Создание бэкапа базы данных
      description: |
        Чтобы создать бэкап базы данных, отправьте запрос POST в `api/v1/dbs/{db_id}/backups`.
      operationId: createDatabaseBackup
      parameters:
      - name: db_id
        in: path
        description: Идентификатор базы данных
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "201":
          description: Ответ будет представлять собой объект JSON с ключом `backup`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_9'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/dbs/1051/backups"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/dbs/1051/backups', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/dbs/1051/backups',
              '',
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/dbs/1051/backups', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/dbs/1051/backups');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/dbs/1051/backups\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/dbs/1051/backups\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Databases
  /api/v1/dbs/{db_id}/backups/{backup_id}:
    get:
      tags:
      - Базы данных
      summary: Получение бэкапа базы данных
      description: |
        Чтобы получить бэкап базы данных, отправьте запрос GET в `api/v1/dbs/{db_id}/backups/{backup_id}`.
      operationId: getDatabaseBackup
      parameters:
      - name: db_id
        in: path
        description: Идентификатор базы данных
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: backup_id
        in: path
        description: Идентификатор резевной копии
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON с ключом `backup`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_9'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/dbs/1051/backups/123"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/dbs/1051/backups/123', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/dbs/1051/backups/123', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/dbs/1051/backups/123', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/dbs/1051/backups/123');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/dbs/1051/backups/123\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/dbs/1051/backups/123\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Databases
    put:
      tags:
      - Базы данных
      summary: Восстановление базы данных из бэкапа
      description: |
        Чтобы восстановить базу данных из бэкапа, отправьте запрос PUT в `api/v1/dbs/{db_id}/backups/{backup_id}`.
      operationId: restoreDatabaseFromBackup
      parameters:
      - name: db_id
        in: path
        description: Идентификатор базы данных
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: backup_id
        in: path
        description: Идентификатор резевной копии
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: База данных из бэкапа успешно восстановлена.
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X PUT \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/dbs/1051/backups/123"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/dbs/1051/backups/123', {
              method: 'PUT',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.put(
              'https://api.timeweb.cloud/api/v1/dbs/1051/backups/123',
              '',
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.put('https://api.timeweb.cloud/api/v1/dbs/1051/backups/123', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/dbs/1051/backups/123');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"PUT\", \"https://api.timeweb.cloud/api/v1/dbs/1051/backups/123\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/dbs/1051/backups/123\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"PUT\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Databases
    delete:
      tags:
      - Базы данных
      summary: Удаление бэкапа базы данных
      description: |
        Чтобы удалить бэкап базы данных, отправьте запрос DELETE в `api/v1/dbs/{db_id}/backups/{backup_id}`.
      operationId: deleteDatabaseBackup
      parameters:
      - name: db_id
        in: path
        description: Идентификатор базы данных
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: backup_id
        in: path
        description: Идентификатор резевной копии
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: Бэкап успешно удален.
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/dbs/1051/backups/123"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/dbs/1051/backups/123', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/dbs/1051/backups/123', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.delete('https://api.timeweb.cloud/api/v1/dbs/1051/backups/123', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/dbs/1051/backups/123');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/dbs/1051/backups/123\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/dbs/1051/backups/123\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Databases
  /api/v1/presets/dbs:
    get:
      tags:
      - Базы данных
      summary: Получение списка тарифов для баз данных
      description: |-
        Чтобы получить список тарифов для баз данных, отправьте GET-запрос на `/api/v1/presets/dbs`.

         Тело ответа будет представлять собой объект JSON с ключом `databases_presets`.
      operationId: getDatabasesPresets
      responses:
        "200":
          description: Тарифы успешно получены.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_24'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/presets/dbs"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/presets/dbs', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/presets/dbs', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/presets/dbs', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/presets/dbs');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/presets/dbs\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/presets/dbs\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Databases
  /api/v1/dedicated-servers:
    get:
      tags:
      - Выделенные серверы
      summary: Получение списка выделенных серверов
      description: |-
        Чтобы получить список всех выделенных серверов на вашем аккаунте, отправьте GET-запрос на `/api/v1/dedicated-servers`.

         Тело ответа будет представлять собой объект JSON с ключом `dedicated_servers`.
      operationId: getDedicatedServers
      responses:
        "200":
          description: Объект JSON c ключом `dedicated_servers`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_25'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/dedicated-servers"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/dedicated-servers', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/dedicated-servers', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/dedicated-servers', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/dedicated-servers');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/dedicated-servers\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/dedicated-servers\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Dedicated servers
    post:
      tags:
      - Выделенные серверы
      summary: Создание выделенного сервера
      description: |-
        Чтобы создать выделенный сервер, отправьте POST-запрос в `api/v1/dedicated-servers`, задав необходимые атрибуты.

        Выделенный сервер будет создан с использованием предоставленной информации. Тело ответа будет содержать объект JSON с информацией о созданном выделенном сервере.
      operationId: createDedicatedServer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-dedicated-server'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_10'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"plan_id":2377,"preset_id":81,"payment_period":"P1M","name":"Mysterious Dunnock","comment":"Production Server","location":"russia","os_id":188,"cp_id":199,"bandwidth_id":483,"network_drive_id":446,"additional_ip_addr_id":477}' \
            "https://api.timeweb.cloud/api/v1/dedicated-servers"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/dedicated-servers', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'plan_id': 2377,
                  'preset_id': 81,
                  'payment_period': 'P1M',
                  'name': 'Mysterious Dunnock',
                  'comment': 'Production Server',
                  'location': 'russia',
                  'os_id': 188,
                  'cp_id': 199,
                  'bandwidth_id': 483,
                  'network_drive_id': 446,
                  'additional_ip_addr_id': 477
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/dedicated-servers',
              {
                  'plan_id': 2377,
                  'preset_id': 81,
                  'payment_period': 'P1M',
                  'name': 'Mysterious Dunnock',
                  'comment': 'Production Server',
                  'location': 'russia',
                  'os_id': 188,
                  'cp_id': 199,
                  'bandwidth_id': 483,
                  'network_drive_id': 446,
                  'additional_ip_addr_id': 477
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'plan_id': 2377,
              'preset_id': 81,
              'payment_period': 'P1M',
              'name': 'Mysterious Dunnock',
              'comment': 'Production Server',
              'location': 'russia',
              'os_id': 188,
              'cp_id': 199,
              'bandwidth_id': 483,
              'network_drive_id': 446,
              'additional_ip_addr_id': 477,
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/dedicated-servers', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"plan_id":2377,"preset_id":81,"payment_period":"P1M","name":"Mysterious Dunnock","comment":"Production Server","location":"russia","os_id":188,"cp_id":199,"bandwidth_id":483,"network_drive_id":446,"additional_ip_addr_id":477}'
          #response = requests.post('https://api.timeweb.cloud/api/v1/dedicated-servers', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/dedicated-servers');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"plan_id":2377,"preset_id":81,"payment_period":"P1M","name":"Mysterious Dunnock","comment":"Production Server","location":"russia","os_id":188,"cp_id":199,"bandwidth_id":483,"network_drive_id":446,"additional_ip_addr_id":477}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"plan_id\":2377,\"preset_id\":81,\"payment_period\"\
          :\"P1M\",\"name\":\"Mysterious Dunnock\",\"comment\":\"Production Server\"\
          ,\"location\":\"russia\",\"os_id\":188,\"cp_id\":199,\"bandwidth_id\":483,\"\
          network_drive_id\":446,\"additional_ip_addr_id\":477}`)\n\treq, err := http.NewRequest(\"\
          POST\", \"https://api.timeweb.cloud/api/v1/dedicated-servers\", data)\n\t\
          if err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\"\
          , \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer \"\
          \ + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/dedicated-servers\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\\"plan_id\\\":2377,\\\"preset_id\\\":81,\\\"payment_period\\\":\\\"P1M\\\
          \",\\\"name\\\":\\\"Mysterious Dunnock\\\",\\\"comment\\\":\\\"Production\
          \ Server\\\",\\\"location\\\":\\\"russia\\\",\\\"os_id\\\":188,\\\"cp_id\\\
          \":199,\\\"bandwidth_id\\\":483,\\\"network_drive_id\\\":446,\\\"additional_ip_addr_id\\\
          \":477}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Dedicated servers
  /api/v1/dedicated-servers/{dedicated_id}:
    get:
      tags:
      - Выделенные серверы
      summary: Получение выделенного сервера
      description: |
        Чтобы отобразить информацию об отдельном выделенном сервере, отправьте запрос GET на `api/v1/dedicated-servers/{dedicated_id}`.
      operationId: getDedicatedServer
      parameters:
      - name: dedicated_id
        in: path
        description: Уникальный идентификатор выделенного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON с ключом `dedicated_server`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_10'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/dedicated-servers/1051"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/dedicated-servers/1051', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/dedicated-servers/1051', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/dedicated-servers/1051', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/dedicated-servers/1051');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/dedicated-servers/1051\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/dedicated-servers/1051\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Dedicated servers
    delete:
      tags:
      - Выделенные серверы
      summary: Удаление выделенного сервера
      description: |
        Чтобы удалить выделенный сервер, отправьте запрос DELETE в `api/v1/dedicated-servers/{dedicated_id}`.
      operationId: deleteDedicatedServer
      parameters:
      - name: dedicated_id
        in: path
        description: Уникальный идентификатор выделенного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      responses:
        "204":
          description: Выделенный сервер успешно удален
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/dedicated/1051"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/dedicated/1051', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/dedicated/1051', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.delete('https://api.timeweb.cloud/api/v1/dedicated/1051', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/dedicated/1051');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/dedicated/1051\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/dedicated/1051\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Dedicated servers
    patch:
      tags:
      - Выделенные серверы
      summary: Обновление выделенного сервера
      description: |
        Чтобы обновить только определенные атрибуты выделенного сервера, отправьте запрос PATCH в `api/v1/dedicated-servers/{dedicated_id}`.
      operationId: updateDedicatedServer
      parameters:
      - name: dedicated_id
        in: path
        description: Уникальный идентификатор выделенного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dedicatedservers_dedicated_id_body'
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON с ключом `dedicated_server`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_10'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X PATCH \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"name":"Cute Corvus ","comment":"Development Server"}' \
            "https://api.timeweb.cloud/api/v1/dedicated/1051"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/dedicated/1051', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'name': 'Cute Corvus ',
                  'comment': 'Development Server'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud/api/v1/dedicated/1051',
              {
                  'name': 'Cute Corvus ',
                  'comment': 'Development Server'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'name': 'Cute Corvus ',
              'comment': 'Development Server',
          }

          response = requests.patch('https://api.timeweb.cloud/api/v1/dedicated/1051', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"name":"Cute Corvus ","comment":"Development Server"}'
          #response = requests.patch('https://api.timeweb.cloud/api/v1/dedicated/1051', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/dedicated/1051');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"name":"Cute Corvus ","comment":"Development Server"}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"name\":\"Cute Corvus \",\"comment\":\"\
          Development Server\"}`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/dedicated/1051\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/dedicated/1051\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\\"name\\\":\\\"Cute Corvus \\\",\\\"comment\\\":\\\"Development Server\\\
          \"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Dedicated servers
  /api/v1/presets/dedicated-servers:
    get:
      tags:
      - Выделенные серверы
      summary: Получение списка тарифов для выделенного сервера
      description: "Чтобы получить список всех тарифов выделенных серверов, отправ\
        ьте GET-запрос на `/api/v1/presets/dedicated-servers`."
      operationId: getDedicatedServersPresets
      parameters:
      - name: location
        in: query
        description: Получение тарифов определенной локации.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ru-1
          - ru-2
          - kz-1
          - pl-1
      responses:
        "200":
          description: Объект JSON c ключем `dedicated_servers_presets`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_26'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/presets/dedicated-servers"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/presets/dedicated-servers', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/presets/dedicated-servers', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/presets/dedicated-servers', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/presets/dedicated-servers');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/presets/dedicated-servers\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/presets/dedicated-servers\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Dedicated servers
  /api/v1/presets/dedicated-servers/{preset_id}/additional-services:
    get:
      tags:
      - Выделенные серверы
      summary: Получение дополнительных услуг для выделенного сервера
      description: "Чтобы получить список всех дополнительных услуг для выделенных\
        \ серверов, отправьте GET-запрос на `/api/v1/presets/dedicated-servers/{preset_id}/additional-services`."
      operationId: getDedicatedServerPresetAdditionalServices
      parameters:
      - name: preset_id
        in: path
        description: Уникальный идентификатор тарифа выделенного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      responses:
        "200":
          description: Объект JSON c ключем `dedicated_server_additional_services`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_27'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/presets/dedicated-servers/3017/additional-services"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/presets/dedicated-servers/3017/additional-services', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/presets/dedicated-servers/3017/additional-services', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get(
              'https://api.timeweb.cloud/api/v1/presets/dedicated-servers/3017/additional-services',
              headers=headers,
          )
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/presets/dedicated-servers/3017/additional-services');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/presets/dedicated-servers/3017/additional-services\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/presets/dedicated-servers/3017/additional-services\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Dedicated servers
  /api/v1/k8s/clusters:
    get:
      tags:
      - Kubernetes
      summary: Получение списка кластеров
      description: "Чтобы получить список кластеров, отправьте GET-запрос на `/api/v1/k8s/clusters`."
      operationId: getClusters
      parameters:
      - name: limit
        in: query
        description: "Обозначает количество записей, которое необходимо вернуть."
        required: false
        style: form
        explode: true
        schema:
          title: Limit
          type: integer
          description: "Обозначает количество записей, которое необходимо вернуть."
          default: 100
      - name: offset
        in: query
        description: Указывает на смещение относительно начала списка.
        required: false
        style: form
        explode: true
        schema:
          title: Offset
          type: integer
          description: Указывает на смещение относительно начала списка.
          default: 0
      responses:
        "200":
          description: Список кластеров
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_28'
              example:
                response_id: 68c76353-f100-455b-a4e9-52734f877861
                meta:
                  total: 1
                clusters:
                - id: 73835
                  name: Кластер 73835
                  created_at: 2023-01-13T10:10:29.729822
                  status: active
                  description: Описание кластера
                  ha: false
                  k8s_version: v1.22.16
                  network_driver: canal
                  ingress: false
                  preset_id: 403
                  cpu: 1
                  ram: 10240
                  disk: 100
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/k8s/clusters"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/k8s/clusters', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/k8s/clusters', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/k8s/clusters', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/k8s/clusters\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
    post:
      tags:
      - Kubernetes
      summary: Создание кластера
      description: "Чтобы создать кластер, отправьте POST-запрос на `/api/v1/k8s/clusters`."
      operationId: createCluster
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClusterIn'
        required: true
      responses:
        "201":
          description: Информация о кластере
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_11'
              example:
                response_id: 2b71e17b-2118-4f81-90d8-c8c4b9e8e4e3
                cluster:
                  id: 18685
                  name: Кластер 18685
                  created_at: 2023-01-13T10:10:29.742918
                  status: active
                  description: Описание кластера
                  ha: false
                  k8s_version: v1.22.16
                  network_driver: canal
                  ingress: true
                  preset_id: 403
                  cpu: 1
                  ram: 10240
                  disk: 100
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"name": "Fervent Pascal", "ha": false, "k8s_version": "v1.22.16", "network_driver": "canal", "ingress": false, "preset_id": 403, "worker_groups": {"name": "new group", "preset_id": 399, "node_count": 1}}' \
            "https://api.timeweb.cloud/api/v1/k8s/clusters"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/k8s/clusters', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{"name": "Fervent Pascal", "ha": false, "k8s_version": "v1.22.16", "network_driver": "canal", "ingress": false, "preset_id": 403, "worker_groups": {"name": "new group", "preset_id": 399, "node_count": 1}}',
              body: JSON.stringify({
                  'name': 'Fervent Pascal',
                  'ha': false,
                  'k8s_version': 'v1.22.16',
                  'network_driver': 'canal',
                  'ingress': false,
                  'preset_id': 403,
                  'worker_groups': {
                      'name': 'new group',
                      'preset_id': 399,
                      'node_count': 1
                  }
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/k8s/clusters',
              // '{"name": "Fervent Pascal", "ha": false, "k8s_version": "v1.22.16", "network_driver": "canal", "ingress": false, "preset_id": 403, "worker_groups": {"name": "new group", "preset_id": 399, "node_count": 1}}',
              {
                  'name': 'Fervent Pascal',
                  'ha': false,
                  'k8s_version': 'v1.22.16',
                  'network_driver': 'canal',
                  'ingress': false,
                  'preset_id': 403,
                  'worker_groups': {
                      'name': 'new group',
                      'preset_id': 399,
                      'node_count': 1
                  }
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              # Already added when you pass json=
              # 'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'name': 'Fervent Pascal',
              'ha': False,
              'k8s_version': 'v1.22.16',
              'network_driver': 'canal',
              'ingress': False,
              'preset_id': 403,
              'worker_groups': {
                  'name': 'new group',
                  'preset_id': 399,
                  'node_count': 1,
              },
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/k8s/clusters', headers=headers, json=json_data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"name": "Fervent Pascal", "ha": false, "k8s_version": "v1.22.16", "network_driver": "canal", "ingress": false, "preset_id": 403, "worker_groups": {"name": "new group", "preset_id": 399, "node_count": 1}}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"name\": \"Fervent Pascal\", \"ha\": false,\
          \ \"k8s_version\": \"v1.22.16\", \"network_driver\": \"canal\", \"ingress\"\
          : false, \"preset_id\": 403, \"worker_groups\": {\"name\": \"new group\"\
          , \"preset_id\": 399, \"node_count\": 1}}`)\n\treq, err := http.NewRequest(\"\
          POST\", \"https://api.timeweb.cloud/api/v1/k8s/clusters\", data)\n\tif err\
          \ != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\",\
          \ \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer \"\
          \ + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\\"name\\\": \\\"Fervent Pascal\\\", \\\"ha\\\": false, \\\"k8s_version\\\
          \": \\\"v1.22.16\\\", \\\"network_driver\\\": \\\"canal\\\", \\\"ingress\\\
          \": false, \\\"preset_id\\\": 403, \\\"worker_groups\\\": {\\\"name\\\"\
          : \\\"new group\\\", \\\"preset_id\\\": 399, \\\"node_count\\\": 1}}\");\n\
          \t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
  /api/v1/k8s/clusters/{cluster_id}:
    get:
      tags:
      - Kubernetes
      summary: Получение информации о кластере
      description: "Чтобы получить информацию о кластере, отправьте GET-запрос в `/api/v1/k8s/clusters/{cluster_id}`"
      operationId: getCluster
      parameters:
      - name: cluster_id
        in: path
        description: Уникальный идентификатор кластера
        required: true
        style: simple
        explode: false
        schema:
          title: Cluster Id
          type: integer
          description: Уникальный идентификатор кластера
      responses:
        "200":
          description: Информация о кластере
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_11'
              example:
                response_id: 511cf606-ab89-4105-891a-e6914608cd3e
                cluster:
                  id: 45059
                  name: Кластер 45059
                  created_at: 2023-01-13T10:10:29.737755
                  status: active
                  description: Описание кластера
                  ha: false
                  k8s_version: v1.22.16
                  network_driver: canal
                  ingress: true
                  preset_id: 403
                  cpu: 1
                  ram: 10240
                  disk: 100
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/k8s/clusters/46"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/k8s/clusters/46', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/k8s/clusters/46', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/k8s/clusters/46', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters/46');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/k8s/clusters/46\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters/46\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
    delete:
      tags:
      - Kubernetes
      summary: Удаление кластера
      description: "Чтобы удалить кластер, отправьте DELETE-запрос в `/api/v1/k8s/clusters/{cluster_id}`"
      operationId: deleteCluster
      parameters:
      - name: cluster_id
        in: path
        description: Уникальный идентификатор кластера
        required: true
        style: simple
        explode: false
        schema:
          title: Cluster Id
          type: integer
          description: Уникальный идентификатор кластера
      - name: hash
        in: query
        description: "Хеш, который совместно с кодом авторизации надо отправить дл\
          я удаления, если включено подтверждение удаления сервисов через Телеграм\
          ."
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 15095f25-aac3-4d60-a788-96cb5136f186
      - name: code
        in: query
        description: |-
          Код подтверждения, который придет к вам в Телеграм, после запроса удаления, если включено подтверждение удаления сервисов.

          При помощи API токена сервисы можно удалять без подтверждения, если параметр токена `is_able_to_delete` установлен в значение `true`
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "0000"
      responses:
        "200":
          description: Объект JSON c ключом `cluster_delete`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_29'
        "204":
          description: Кластер удален
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/k8s/clusters/10"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/k8s/clusters/10', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/k8s/clusters/10', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.delete('https://api.timeweb.cloud/api/v1/k8s/clusters/10', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters/10');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/k8s/clusters/10\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters/10\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
    patch:
      tags:
      - Kubernetes
      summary: Обновление информации о кластере
      description: "Чтобы обновить информацию о кластере, отправьте PATCH-запрос в\
        \ `/api/v1/k8s/clusters/{cluster_id}`"
      operationId: updateCluster
      parameters:
      - name: cluster_id
        in: path
        description: Уникальный идентификатор кластера
        required: true
        style: simple
        explode: false
        schema:
          title: Cluster Id
          type: integer
          description: Уникальный идентификатор кластера
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClusterEdit'
        required: true
      responses:
        "200":
          description: Информация о кластере
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_11'
              example:
                response_id: 383c587c-f421-45bd-9ac1-a890f13ac6dc
                cluster:
                  id: 13649
                  name: Кластер 13649
                  created_at: 2023-01-13T10:10:29.748020
                  status: active
                  description: Описание кластера
                  ha: false
                  k8s_version: v1.22.16
                  network_driver: canal
                  ingress: false
                  preset_id: 403
                  cpu: 1
                  ram: 10240
                  disk: 100
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X PATCH \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"description": "new description"}' \
            "https://api.timeweb.cloud/api/v1/k8s/clusters/45"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/k8s/clusters/45', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{"description": "new description"}',
              body: JSON.stringify({
                  'description': 'new description'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud/api/v1/k8s/clusters/45',
              // '{"description": "new description"}',
              {
                  'description': 'new description'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              # Already added when you pass json=
              # 'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'description': 'new description',
          }

          response = requests.patch('https://api.timeweb.cloud/api/v1/k8s/clusters/45', headers=headers, json=json_data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters/45');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"description": "new description"}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"description\": \"new description\"}`)\n\
          \treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/k8s/clusters/45\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters/45\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\\"description\\\": \\\"new description\\\"}\");\n\t\twriter.flush();\n\
          \t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
  /api/v1/k8s/clusters/{cluster_id}/resources:
    get:
      tags:
      - Kubernetes
      summary: Получение ресурсов кластера
      description: "Чтобы получить ресурсы кластера, отправьте GET-запрос в `/api/v1/k8s/clusters/{cluster_id}/resources`."
      operationId: getClusterResources
      parameters:
      - name: cluster_id
        in: path
        description: Уникальный идентификатор кластера
        required: true
        style: simple
        explode: false
        schema:
          title: Cluster Id
          type: integer
          description: Уникальный идентификатор кластера
      responses:
        "200":
          description: Список ресурсов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_30'
              example:
                response_id: a3044ff0-182f-42d5-aa05-d5c8367e72ae
                resources:
                  nodes: 10
                  cores:
                    requested: 10
                    allocatable: 10
                    capacity: 10
                    used: 5.5
                  memory:
                    requested: 10240
                    allocatable: 9216
                    capacity: 9216
                    used: 5632
                  pods:
                    requested: 10
                    allocatable: 10
                    capacity: 10
                    used: 5
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/k8s/clusters/41/resources"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/k8s/clusters/41/resources', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/k8s/clusters/41/resources', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/k8s/clusters/41/resources', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters/41/resources');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/k8s/clusters/41/resources\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters/41/resources\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
  /api/v1/k8s/clusters/{cluster_id}/kubeconfig:
    get:
      tags:
      - Kubernetes
      summary: Получение файла kubeconfig
      description: "Чтобы получить файл kubeconfig, отправьте GET-запрос в `/api/v1/k8s/clusters/{cluster_id}/kubeconfig`."
      operationId: getClusterKubeconfig
      parameters:
      - name: cluster_id
        in: path
        description: Уникальный идентификатор кластера
        required: true
        style: simple
        explode: false
        schema:
          title: Cluster Id
          type: integer
          description: Уникальный идентификатор кластера
      responses:
        "200":
          description: Загрузка конфигурации подключения к кластеру
          content:
            application/yaml:
              schema:
                title: Response 200 Получение Файла Kubeconfig Api V1  Customer  Clusters  Cluster
                  Id  Kubeconfig Get
                type: string
                x-content-type: application/yaml
              example: "{\"apiVersion\":\"v1\",\"kind\":\"Config\",\"clusters\":[{\"\
                name\":\"examply-example\",\"cluster\":{\"server\":\"https://k8saas.timeweb.com/k8s/clusters/c-12345\"\
                }}],\"users\":[{\"name\":\"examply-example\",\"user\":{\"token\":\"\
                kubeconfig-user-example:exampleexampleexample\"}}],\"contexts\":[{\"\
                name\":\"example-example\",\"context\":{\"user\":\"example-example\"\
                ,\"cluster\":\"example-example\"}}],\"current-context\":\"example-example\"\
                }"
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/k8s/clusters/7/kubeconfig"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/k8s/clusters/7/kubeconfig', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/k8s/clusters/7/kubeconfig', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/k8s/clusters/7/kubeconfig', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters/7/kubeconfig');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/k8s/clusters/7/kubeconfig\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters/7/kubeconfig\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
  /api/v1/k8s/clusters/{cluster_id}/groups:
    get:
      tags:
      - Kubernetes
      summary: Получение групп нод кластера
      description: "Чтобы получить группы нод кластера, отправьте GET-запрос в `/api/v1/k8s/clusters/{cluster_id}/groups`."
      operationId: getClusterNodeGroups
      parameters:
      - name: cluster_id
        in: path
        description: Уникальный идентификатор кластера
        required: true
        style: simple
        explode: false
        schema:
          title: Cluster Id
          type: integer
          description: Уникальный идентификатор кластера
      responses:
        "200":
          description: Список групп нод
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_31'
              example:
                response_id: aed71c10-95d8-4e35-85fc-acc5d916e1c3
                meta:
                  total: 3
                node_groups:
                - id: 2026
                  name: Группа нод 2026
                  created_at: 2023-01-13T10:10:29.753143
                  preset_id: 399
                  node_count: 7
                - id: 7844
                  name: Группа нод 7844
                  created_at: 2023-01-13T10:10:29.753229
                  preset_id: 399
                  node_count: 3
                - id: 2802
                  name: Группа нод 2802
                  created_at: 2023-01-13T10:10:29.753297
                  preset_id: 399
                  node_count: 7
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/k8s/clusters/64/groups"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/k8s/clusters/64/groups', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/k8s/clusters/64/groups', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/k8s/clusters/64/groups', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters/64/groups');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/k8s/clusters/64/groups\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters/64/groups\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
    post:
      tags:
      - Kubernetes
      summary: Создание группы нод
      description: "Чтобы создать группу нод кластера, отправьте POST-запрос в `/api/v1/k8s/clusters/{cluster_id}/groups`."
      operationId: createClusterNodeGroup
      parameters:
      - name: cluster_id
        in: path
        description: Уникальный идентификатор кластера
        required: true
        style: simple
        explode: false
        schema:
          title: Cluster Id
          type: integer
          description: Уникальный идентификатор кластера
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeGroupIn'
        required: true
      responses:
        "201":
          description: Информация о группе нод
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_12'
              example:
                response_id: 89e6b1c9-14b2-443e-b5c5-84914346ea79
                node_group:
                  id: 1509
                  name: Группа нод 1509
                  created_at: 2023-01-13T10:10:29.753638
                  preset_id: 399
                  node_count: 8
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"name": "group name", "preset_id": 399, "node_count": 1}' \
            "https://api.timeweb.cloud/api/v1/k8s/clusters/64/groups"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/k8s/clusters/64/groups', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{"name": "group name", "preset_id": 399, "node_count": 1}',
              body: JSON.stringify({
                  'name': 'group name',
                  'preset_id': 399,
                  'node_count': 1
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/k8s/clusters/64/groups',
              // '{"name": "group name", "preset_id": 399, "node_count": 1}',
              {
                  'name': 'group name',
                  'preset_id': 399,
                  'node_count': 1
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              # Already added when you pass json=
              # 'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'name': 'group name',
              'preset_id': 399,
              'node_count': 1,
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/k8s/clusters/64/groups', headers=headers, json=json_data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters/64/groups');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"name": "group name", "preset_id": 399, "node_count": 1}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"name\": \"group name\", \"preset_id\"\
          : 399, \"node_count\": 1}`)\n\treq, err := http.NewRequest(\"POST\", \"\
          https://api.timeweb.cloud/api/v1/k8s/clusters/64/groups\", data)\n\tif err\
          \ != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\",\
          \ \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer \"\
          \ + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters/64/groups\");\n\t\t\
          HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"name\\\": \\\"group name\\\", \\\"preset_id\\\"\
          : 399, \\\"node_count\\\": 1}\");\n\t\twriter.flush();\n\t\twriter.close();\n\
          \t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream\
          \ = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
  /api/v1/k8s/clusters/{cluster_id}/groups/{group_id}:
    get:
      tags:
      - Kubernetes
      summary: Получение информации о группе нод
      description: "Чтобы получить информацию о группе нод, отправьте GET-запрос в\
        \ `/api/v1/k8s/clusters/{cluster_id}/groups/{group_id}`."
      operationId: getClusterNodeGroup
      parameters:
      - name: cluster_id
        in: path
        description: Уникальный идентификатор кластера
        required: true
        style: simple
        explode: false
        schema:
          title: Cluster Id
          type: integer
          description: Уникальный идентификатор кластера
      - name: group_id
        in: path
        description: Уникальный идентификатор группы
        required: true
        style: simple
        explode: false
        schema:
          title: Group Id
          type: integer
          description: Уникальный идентификатор группы
      responses:
        "200":
          description: Информация о группе нод
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_12'
              example:
                response_id: 96118bab-77d1-4681-9b4c-6c3b89cbbf90
                node_group:
                  id: 341
                  name: Группа нод 341
                  created_at: 2023-01-13T10:10:29.753519
                  preset_id: 399
                  node_count: 8
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/k8s/clusters/14/groups/12"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/k8s/clusters/14/groups/12', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/k8s/clusters/14/groups/12', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/k8s/clusters/14/groups/12', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters/14/groups/12');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/k8s/clusters/14/groups/12\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters/14/groups/12\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
    delete:
      tags:
      - Kubernetes
      summary: Удаление группы нод
      description: "Чтобы удалить группу нод, отправьте DELETE-запрос в `/api/v1/k8s/clusters/{cluster_id}/groups/{group_id}`."
      operationId: deleteClusterNodeGroup
      parameters:
      - name: cluster_id
        in: path
        description: Уникальный идентификатор кластера
        required: true
        style: simple
        explode: false
        schema:
          title: Cluster Id
          type: integer
          description: Уникальный идентификатор кластера
      - name: group_id
        in: path
        description: Уникальный идентификатор группы
        required: true
        style: simple
        explode: false
        schema:
          title: Group Id
          type: integer
          description: Уникальный идентификатор группы
      responses:
        "204":
          description: Группа нод удалена
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/k8s/clusters/85/groups/46"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/k8s/clusters/85/groups/46', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/k8s/clusters/85/groups/46', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.delete('https://api.timeweb.cloud/api/v1/k8s/clusters/85/groups/46', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters/85/groups/46');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/k8s/clusters/85/groups/46\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters/85/groups/46\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
  /api/v1/k8s/clusters/{cluster_id}/groups/{group_id}/nodes:
    get:
      tags:
      - Kubernetes
      summary: "Получение списка нод, принадлежащих группе"
      description: "Чтобы получить список нод принадлежащих группе, отправьте GET-з\
        апрос в `/api/v1/k8s/clusters/{cluster_id}/groups/{group_id}/nodes`."
      operationId: getClusterNodesFromGroup
      parameters:
      - name: cluster_id
        in: path
        description: Уникальный идентификатор кластера
        required: true
        style: simple
        explode: false
        schema:
          title: Cluster Id
          type: integer
          description: Уникальный идентификатор кластера
      - name: group_id
        in: path
        description: Уникальный идентификатор группы
        required: true
        style: simple
        explode: false
        schema:
          title: Group Id
          type: integer
          description: Уникальный идентификатор группы
      - name: limit
        in: query
        description: "Обозначает количество записей, которое необходимо вернуть."
        required: false
        style: form
        explode: true
        schema:
          title: Limit
          type: integer
          description: "Обозначает количество записей, которое необходимо вернуть."
          default: 100
      - name: offset
        in: query
        description: "Указывает на смещение, относительно начала списка."
        required: false
        style: form
        explode: true
        schema:
          title: Offset
          type: integer
          description: "Указывает на смещение, относительно начала списка."
          default: 0
      responses:
        "200":
          description: Список нод
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_32'
              example:
                response_id: 9a5f84ec-47e7-485e-86f0-357d70c92c27
                meta:
                  total: 3
                nodes:
                - id: 5373
                  created_at: 2023-01-13T10:10:29.753764
                  type: worker
                  group_id: 1
                  status: active
                  preset_id: 399
                  cpu: 1
                  ram: 1024
                  disk: 10
                  network: 200
                - id: 2240
                  created_at: 2023-01-13T10:10:29.753879
                  type: worker
                  group_id: 1
                  status: active
                  preset_id: 399
                  cpu: 1
                  ram: 1024
                  disk: 10
                  network: 200
                - id: 6584
                  created_at: 2023-01-13T10:10:29.753984
                  type: worker
                  group_id: 1
                  status: active
                  preset_id: 399
                  cpu: 1
                  ram: 1024
                  disk: 10
                  network: 200
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/k8s/clusters/84/groups/63/nodes"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/k8s/clusters/84/groups/63/nodes', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/k8s/clusters/84/groups/63/nodes', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/k8s/clusters/84/groups/63/nodes', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters/84/groups/63/nodes');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/k8s/clusters/84/groups/63/nodes\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters/84/groups/63/nodes\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
    post:
      tags:
      - Kubernetes
      summary: Увеличение количества нод в группе на указанное количество
      description: "Чтобы увеличить количество нод в группе на указанное значение\
        , отправьте POST-запрос на `/api/v1/k8s/clusters/{cluster_id}/groups/{group_id}/nodes`"
      operationId: increaseCountOfNodesInGroup
      parameters:
      - name: cluster_id
        in: path
        description: Уникальный идентификатор кластера
        required: true
        style: simple
        explode: false
        schema:
          title: Cluster Id
          type: integer
          description: Уникальный идентификатор кластера
      - name: group_id
        in: path
        description: Уникальный идентификатор группы
        required: true
        style: simple
        explode: false
        schema:
          title: Group Id
          type: integer
          description: Уникальный идентификатор группы
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeCount'
        required: true
      responses:
        "201":
          description: Список нод
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_32'
              example:
                response_id: 25f53867-85e1-4425-9125-3860b39e1402
                meta:
                  total: 3
                nodes:
                - id: 804
                  created_at: 2023-01-13T10:10:29.754400
                  type: worker
                  group_id: 1
                  status: active
                  preset_id: 399
                  cpu: 1
                  ram: 1024
                  disk: 10
                  network: 200
                - id: 899
                  created_at: 2023-01-13T10:10:29.754504
                  type: worker
                  group_id: 1
                  status: active
                  preset_id: 399
                  cpu: 1
                  ram: 1024
                  disk: 10
                  network: 200
                - id: 5066
                  created_at: 2023-01-13T10:10:29.754614
                  type: worker
                  group_id: 1
                  status: active
                  preset_id: 399
                  cpu: 1
                  ram: 1024
                  disk: 10
                  network: 200
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"count": 2}' \
            "https://api.timeweb.cloud/api/v1/k8s/clusters/17/groups/56/nodes"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/k8s/clusters/17/groups/56/nodes', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{"count": 2}',
              body: JSON.stringify({
                  'count': 2
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/k8s/clusters/17/groups/56/nodes',
              // '{"count": 2}',
              {
                  'count': 2
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              # Already added when you pass json=
              # 'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'count': 2,
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/k8s/clusters/17/groups/56/nodes', headers=headers, json=json_data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters/17/groups/56/nodes');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"count": 2}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"count\": 2}`)\n\treq, err := http.NewRequest(\"\
          POST\", \"https://api.timeweb.cloud/api/v1/k8s/clusters/17/groups/56/nodes\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters/17/groups/56/nodes\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"count\\\": 2}\");\n\t\twriter.flush();\n\t\twriter.close();\n\
          \t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream\
          \ = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
    delete:
      tags:
      - Kubernetes
      summary: Уменьшение количества нод в группе на указанное количество
      description: "Чтобы уменьшить количество нод в группе на указанное значение\
        , отправьте DELETE-запрос в `/api/v1/k8s/clusters/{cluster_id}/groups/{group_id}/nodes`."
      operationId: reduceCountOfNodesInGroup
      parameters:
      - name: cluster_id
        in: path
        description: Уникальный идентификатор кластера
        required: true
        style: simple
        explode: false
        schema:
          title: Cluster Id
          type: integer
          description: Уникальный идентификатор кластера
      - name: group_id
        in: path
        description: Уникальный идентификатор группы
        required: true
        style: simple
        explode: false
        schema:
          title: Group Id
          type: integer
          description: Уникальный идентификатор группы
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeCount'
        required: true
      responses:
        "204":
          description: Количество нод уменьшено
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"count": 2}' \
            "https://api.timeweb.cloud/api/v1/k8s/clusters/31/groups/90/nodes"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/k8s/clusters/31/groups/90/nodes', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{"count": 2}',
              body: JSON.stringify({
                  'count': 2
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/k8s/clusters/31/groups/90/nodes', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              },
              // data: '{"count": 2}',
              data: {
                  'count': 2
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              # Already added when you pass json=
              # 'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'count': 2,
          }

          response = requests.delete('https://api.timeweb.cloud/api/v1/k8s/clusters/31/groups/90/nodes', headers=headers, json=json_data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters/31/groups/90/nodes');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"count": 2}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"count\": 2}`)\n\treq, err := http.NewRequest(\"\
          DELETE\", \"https://api.timeweb.cloud/api/v1/k8s/clusters/31/groups/90/nodes\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters/31/groups/90/nodes\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"count\\\": 2}\");\n\t\twriter.flush();\n\t\twriter.close();\n\
          \t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream\
          \ = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
  /api/v1/k8s/clusters/{cluster_id}/nodes:
    get:
      tags:
      - Kubernetes
      summary: Получение списка нод
      description: "Чтобы получить список нод, отправьте GET-запрос в `/api/v1/k8s/clusters/{cluster_id}/nodes`."
      operationId: getClusterNodes
      parameters:
      - name: cluster_id
        in: path
        description: Уникальный идентификатор кластера
        required: true
        style: simple
        explode: false
        schema:
          title: Cluster Id
          type: integer
          description: Уникальный идентификатор кластера
      responses:
        "200":
          description: Список нод
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_32'
              example:
                response_id: 9a5f84ec-47e7-485e-86f0-357d70c92c27
                meta:
                  total: 3
                nodes:
                - id: 5373
                  created_at: 2023-01-13T10:10:29.753764
                  type: worker
                  group_id: 1
                  status: active
                  preset_id: 399
                  cpu: 1
                  ram: 1024
                  disk: 10
                  network: 200
                - id: 2240
                  created_at: 2023-01-13T10:10:29.753879
                  type: worker
                  group_id: 1
                  status: active
                  preset_id: 399
                  cpu: 1
                  ram: 1024
                  disk: 10
                  network: 200
                - id: 6584
                  created_at: 2023-01-13T10:10:29.753984
                  type: worker
                  group_id: 1
                  status: active
                  preset_id: 399
                  cpu: 1
                  ram: 1024
                  disk: 10
                  network: 200
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/k8s/clusters/93/nodes"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/k8s/clusters/93/nodes', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/k8s/clusters/93/nodes', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/k8s/clusters/93/nodes', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters/93/nodes');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/k8s/clusters/93/nodes\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters/93/nodes\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
  /api/v1/k8s/clusters/{cluster_id}/nodes/{node_id}:
    delete:
      tags:
      - Kubernetes
      summary: Удаление ноды
      description: "Чтобы удалить ноду, отправьте DELETE-запрос в `/api/v1/k8s/clusters/{cluster_id}/nodes/{node_id}`."
      operationId: deleteClusterNode
      parameters:
      - name: cluster_id
        in: path
        description: Уникальный идентификатор кластера
        required: true
        style: simple
        explode: false
        schema:
          title: Cluster Id
          type: integer
          description: Уникальный идентификатор кластера
      - name: node_id
        in: path
        description: Уникальный идентификатор группы нод
        required: true
        style: simple
        explode: false
        schema:
          title: Node Id
          type: integer
          description: Уникальный идентификатор группы нод
      responses:
        "204":
          description: Нода удалена
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/k8s/clusters/46/nodes/76"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/k8s/clusters/46/nodes/76', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/k8s/clusters/46/nodes/76', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.delete('https://api.timeweb.cloud/api/v1/k8s/clusters/46/nodes/76', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/clusters/46/nodes/76');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/k8s/clusters/46/nodes/76\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/clusters/46/nodes/76\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
  /api/v1/k8s/k8s_versions:
    get:
      tags:
      - Kubernetes
      summary: Получение списка версий k8s
      description: "Чтобы получить список версий k8s, отправьте GET-запрос в `/api/v1/k8s/k8s_versions`."
      operationId: getK8SVersions
      responses:
        "200":
          description: Список версий k8s
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_33'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/k8s/k8s-versions"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/k8s/k8s-versions', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/k8s/k8s-versions', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/k8s/k8s-versions', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/k8s-versions');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/k8s/k8s-versions\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/k8s-versions\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
  /api/v1/k8s/network_drivers:
    get:
      tags:
      - Kubernetes
      summary: Получение списка сетевых драйверов k8s
      description: "Чтобы получить список сетевых драйверов k8s, отправьте GET-зап\
        рос в `/api/v1/k8s/network_drivers`."
      operationId: getK8SNetworkDrivers
      responses:
        "200":
          description: Список сетевых драйверов k8s
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_34'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/k8s/network-drivers"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/k8s/network-drivers', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/k8s/network-drivers', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/k8s/network-drivers', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/network-drivers');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/k8s/network-drivers\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/network-drivers\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
  /api/v1/presets/k8s:
    get:
      tags:
      - Kubernetes
      summary: Получение списка тарифов
      description: "Чтобы получить список тарифов, отправьте GET-запрос в `/api/v1/presets/k8s`."
      operationId: getKubernetesPresets
      responses:
        "200":
          description: Список тарифов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_35'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/k8s/presets"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/k8s/presets', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/k8s/presets', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/k8s/presets', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/k8s/presets');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/k8s/presets\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/k8s/presets\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
  /api/v1/servers:
    get:
      tags:
      - Облачные серверы
      summary: Получение списка серверов
      description: |-
        Чтобы получить список серверов, отправьте GET-запрос на `/api/v1/servers`.

         Тело ответа будет представлять собой объект JSON с ключом `servers`.
      operationId: getServers
      parameters:
      - name: limit
        in: query
        description: "Обозначает количество записей, которое необходимо вернуть."
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 100
      - name: offset
        in: query
        description: Указывает на смещение относительно начала списка.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      responses:
        "200":
          description: Объект JSON c ключом `servers`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_36'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/servers"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/servers', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/servers', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/servers\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
    post:
      tags:
      - Облачные серверы
      summary: Создание сервера
      description: |-
        Чтобы создать сервер, отправьте POST-запрос в `api/v1/servers`, задав необходимые атрибуты. Обязательно должен присутствовать один из параметров `configuration` или `preset_id`, а также `image_id` или `os_id`.

        Cервер будет создан с использованием предоставленной информации. Тело ответа будет содержать объект JSON с информацией о созданном сервере.
      operationId: createServer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-server'
        required: true
      responses:
        "201":
          description: Объект JSON c ключом `server`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_13'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{
            "is_ddos_guard": false,
            "os_id": 65,
            "bandwidth": 200,
            "comment": "comment",
            "name": "name",
            "preset_id": 122,
            "is_local_network": false
          }' "https://api.timeweb.cloud/api/v1/servers"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{\n  "is_ddos_guard": false,\n  "os_id": 65,\n  "bandwidth": 200,\n  "comment": "comment",\n  "name": "name",\n  "preset_id": 122,\n  "is_local_network": false\n}',
              body: JSON.stringify({
                  'is_ddos_guard': false,
                  'os_id': 65,
                  'bandwidth': 200,
                  'comment': 'comment',
                  'name': 'name',
                  'preset_id': 122,
                  'is_local_network': false
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/servers',
              // '{\n  "is_ddos_guard": false,\n  "os_id": 65,\n  "bandwidth": 200,\n  "comment": "comment",\n  "name": "name",\n  "preset_id": 122,\n  "is_local_network": false\n}',
              {
                  'is_ddos_guard': false,
                  'os_id': 65,
                  'bandwidth': 200,
                  'comment': 'comment',
                  'name': 'name',
                  'preset_id': 122,
                  'is_local_network': false
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'is_ddos_guard': False,
              'os_id': 65,
              'bandwidth': 200,
              'comment': 'comment',
              'name': 'name',
              'preset_id': 122,
              'is_local_network': False,
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/servers', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{\n  "is_ddos_guard": false,\n  "os_id": 65,\n  "bandwidth": 200,\n  "comment": "comment",\n  "name": "name",\n  "preset_id": 122,\n  "is_local_network": false\n}'
          #response = requests.post('https://api.timeweb.cloud/api/v1/servers', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"is_ddos_guard\": false,\n  \"os_id\": 65,\n  \"bandwidth\": 200,\n  \"comment\": \"comment\",\n  \"name\": \"name\",\n  \"preset_id\": 122,\n  \"is_local_network\": false\n}");

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\n  \"is_ddos_guard\": false,\n  \"os_id\"\
          : 65,\n  \"bandwidth\": 200,\n  \"comment\": \"comment\",\n  \"name\": \"\
          name\",\n  \"preset_id\": 122,\n  \"is_local_network\": false\n}`)\n\treq,\
          \ err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/servers\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/servers\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\n  \\\"is_ddos_guard\\\": false,\\n  \\\"os_id\\\": 65,\\n  \\\"bandwidth\\\
          \": 200,\\n  \\\"comment\\\": \\\"comment\\\",\\n  \\\"name\\\": \\\"name\\\
          \",\\n  \\\"preset_id\\\": 122,\\n  \\\"is_local_network\\\": false\\n}\"\
          );\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
  /api/v1/servers/{server_id}:
    get:
      tags:
      - Облачные серверы
      summary: Получение сервера
      description: "Чтобы получить сервер, отправьте запрос GET в `/api/v1/servers/{server_id}`."
      operationId: getServer
      parameters:
      - name: server_id
        in: path
        description: Уникальный идентификатор облачного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      responses:
        "200":
          description: Объект JSON c ключом `server`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_13'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
           "https://api.timeweb.cloud/api/v1/servers/123"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers/123', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/servers/123', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/servers/123', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/servers/123\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
    delete:
      tags:
      - Облачные серверы
      summary: Удаление сервера
      description: |-
        Чтобы удалить сервер, отправьте запрос DELETE в `/api/v1/servers/{server_id}`.\
         Обратите внимание, если на аккаунте включено удаление серверов по смс, то вернется ошибка 423.
      operationId: deleteServer
      parameters:
      - name: server_id
        in: path
        description: Уникальный идентификатор облачного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      - name: hash
        in: query
        description: "Хеш, который совместно с кодом авторизации надо отправить дл\
          я удаления, если включено подтверждение удаления сервисов через Телеграм\
          ."
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 15095f25-aac3-4d60-a788-96cb5136f186
      - name: code
        in: query
        description: |-
          Код подтверждения, который придет к вам в Телеграм, после запроса удаления, если включено подтверждение удаления сервисов.

          При помощи API токена сервисы можно удалять без подтверждения, если параметр токена `is_able_to_delete` установлен в значение `true`
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "0000"
      responses:
        "200":
          description: Объект JSON c ключом `server_delete`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_37'
        "204":
          description: Успешное удаление сервера
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/servers/123"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers/123', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/servers/123', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.delete('https://api.timeweb.cloud/api/v1/servers/123', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/servers/123\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
    patch:
      tags:
      - Облачные серверы
      summary: Изменение сервера
      description: "Чтобы обновить только определенные атрибуты сервера, отправьте\
        \ запрос PATCH в `/api/v1/servers/{server_id}`."
      operationId: updateServer
      parameters:
      - name: server_id
        in: path
        description: Уникальный идентификатор облачного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-server'
        required: true
      responses:
        "200":
          description: Объект JSON c ключом `server`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_13'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X PATCH \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{
            "os_id": 65,
            "bandwidth": 200,
            "comment": "comment",
            "name": "name",
            "preset_id": 122
          }' "https://api.timeweb.cloud/api/v1/servers/123"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers/123', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{\n  "os_id": 65,\n  "bandwidth": 200,\n  "comment": "comment",\n  "name": "name",\n  "preset_id": 122\n}',
              body: JSON.stringify({
                  'os_id': 65,
                  'bandwidth': 200,
                  'comment': 'comment',
                  'name': 'name',
                  'preset_id': 122
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud/api/v1/servers/123',
              // '{\n  "os_id": 65,\n  "bandwidth": 200,\n  "comment": "comment",\n  "name": "name",\n  "preset_id": 122\n}',
              {
                  'os_id': 65,
                  'bandwidth': 200,
                  'comment': 'comment',
                  'name': 'name',
                  'preset_id': 122
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'os_id': 65,
              'bandwidth': 200,
              'comment': 'comment',
              'name': 'name',
              'preset_id': 122,
          }

          response = requests.patch('https://api.timeweb.cloud/api/v1/servers/123', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{\n  "os_id": 65,\n  "bandwidth": 200,\n  "comment": "comment",\n  "name": "name",\n  "preset_id": 122\n}'
          #response = requests.patch('https://api.timeweb.cloud/api/v1/servers/123', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"os_id\": 65,\n  \"bandwidth\": 200,\n  \"comment\": \"comment\",\n  \"name\": \"name\",\n  \"preset_id\": 122\n}");

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\n  \"os_id\": 65,\n  \"bandwidth\": 200,\n\
          \  \"comment\": \"comment\",\n  \"name\": \"name\",\n  \"preset_id\": 122\n\
          }`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/servers/123\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/servers/123\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\n  \\\"os_id\\\": 65,\\n  \\\"bandwidth\\\": 200,\\n  \\\"comment\\\"\
          : \\\"comment\\\",\\n  \\\"name\\\": \\\"name\\\",\\n  \\\"preset_id\\\"\
          : 122\\n}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
  /api/v1/servers/{server_id}/action:
    post:
      tags:
      - Облачные серверы
      summary: Выполнение действия над сервером
      description: "Чтобы выполнить действие над сервером, отправьте POST-запрос н\
        а `/api/v1/servers/{server_id}/action`."
      operationId: performActionOnServer
      parameters:
      - name: server_id
        in: path
        description: Уникальный идентификатор облачного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server_id_action_body'
        required: true
      responses:
        "204":
          description: Успешное выполнение действия
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{
            "action": "shutdown"
          }' "https://api.timeweb.cloud/api/v1/servers/123/action"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers/123/action', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{\n  "action": "shutdown"\n}',
              body: JSON.stringify({
                  'action': 'shutdown'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/servers/123/action',
              // '{\n  "action": "shutdown"\n}',
              {
                  'action': 'shutdown'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'action': 'shutdown',
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/servers/123/action', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{\n  "action": "shutdown"\n}'
          #response = requests.post('https://api.timeweb.cloud/api/v1/servers/123/action', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/action');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"action\": \"shutdown\"\n}");

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\n  \"action\": \"shutdown\"\n}`)\n\treq,\
          \ err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/servers/123/action\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/servers/123/action\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\n  \\\"action\\\": \\\"shutdown\\\"\\n}\");\n\t\twriter.flush();\n\t\t\
          writer.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
  /api/v1/servers/{server_id}/clone:
    post:
      tags:
      - Облачные серверы
      summary: Клонирование сервера
      description: "Чтобы клонировать сервер, отправьте POST-запрос на `/api/v1/servers/{server_id}/clone`."
      operationId: cloneServer
      parameters:
      - name: server_id
        in: path
        description: Уникальный идентификатор облачного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      responses:
        "201":
          description: Объект JSON c ключом `server`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_13'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
           "https://api.timeweb.cloud/api/v1/servers/123/clone"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers/123/clone', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/servers/123/clone',
              '',
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/servers/123/clone', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/clone');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/servers/123/clone\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/clone\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
  /api/v1/servers/{server_id}/statistics:
    get:
      tags:
      - Облачные серверы
      summary: Получение статистики сервера
      description: "Чтобы получить статистику сервера, отправьте GET-запрос на `/api/v1/servers/{server_id}/statistics`."
      operationId: getServerStatistics
      parameters:
      - name: server_id
        in: path
        description: Уникальный идентификатор облачного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      - name: date_from
        in: query
        description: "Дата начала сбора статистики. Строка в формате ISO 8061, зак\
          одированная в ASCII, пример: `2023-05-25%202023-05-25T14%3A35%3A38`"
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: date_to
        in: query
        description: "Дата окончания сбора статистики. Строка в формате ISO 8061,\
          \ закодированная в ASCII, пример: `2023-05-26%202023-05-25T14%3A35%3A38`"
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: "Объект JSON c ключами `cpu`, `disk`, `network_traffic`, `ram`"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_38'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/servers/123/statistics"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers/123/statistics', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/servers/123/statistics', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/servers/123/statistics', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/statistics');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/servers/123/statistics\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/statistics\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
  /api/v1/os/servers:
    get:
      tags:
      - Облачные серверы
      summary: Получение списка операционных систем
      description: |-
        Чтобы получить список всех операционных систем, отправьте GET-запрос на `/api/v1/os/servers`.

         Тело ответа будет представлять собой объект JSON с ключом `servers_os`.
      operationId: getOsList
      responses:
        "200":
          description: Объект JSON c ключом `servers_os`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_39'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/os/servers"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/os/servers', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/os/servers', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/os/servers', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/os/servers');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/os/servers\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/os/servers\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
  /api/v1/presets/servers:
    get:
      tags:
      - Облачные серверы
      summary: Получение списка тарифов серверов
      description: |-
        Чтобы получить список всех тарифов серверов, отправьте GET-запрос на `/api/v1/presets/servers`.

         Тело ответа будет представлять собой объект JSON с ключом `server_presets`.
      operationId: getServersPresets
      responses:
        "200":
          description: Объект JSON c ключом `server_presets`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_40'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/presets/servers"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/presets/servers', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/presets/servers', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/presets/servers', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/presets/servers');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/presets/servers\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/presets/servers\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
  /api/v1/configurator/servers:
    get:
      tags:
      - Облачные серверы
      summary: Получение списка конфигураторов серверов
      description: |-
        Чтобы получить список всех конфигураторов серверов, отправьте GET-запрос на `/api/v1/configurator/servers`.

         Тело ответа будет представлять собой объект JSON с ключом `server_configurators`.
      operationId: getConfigurators
      responses:
        "200":
          description: Объект JSON c ключом `server_configurators`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_41'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/configurator/servers"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/configurator/servers', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/configurator/servers', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/configurator/servers', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/configurator/servers');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/configurator/servers\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/configurator/servers\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
  /api/v1/software/servers:
    get:
      tags:
      - Облачные серверы
      summary: Получение списка ПО из маркетплейса
      description: |-
        Чтобы получить список ПО из маркетплейса, отправьте GET-запрос на `/api/v1/software/servers`.

         Тело ответа будет представлять собой объект JSON с ключом `servers_software`.
      operationId: getSoftware
      responses:
        "200":
          description: Объект JSON c ключом `servers_software`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_42'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/software/servers"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/software/servers', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/software/servers', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/software/servers', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/software/servers');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/software/servers\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/software/servers\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
  /api/v1/servers/{server_id}/boot-mode:
    post:
      tags:
      - Облачные серверы
      summary: Выбор типа загрузки операционной системы сервера
      description: |-
        Чтобы изменить тип загрузки операционной системы сервера, отправьте POST-запрос на `/api/v1/servers/{server_id}/boot-mode`. \
         После смены типа загрузки сервер будет перезапущен.
      operationId: updateServerOSBootMode
      parameters:
      - name: server_id
        in: path
        description: Уникальный идентификатор облачного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server_id_bootmode_body'
      responses:
        "204":
          description: Успешная смена загрузки операционной системы сервера
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" -d '{ "boot_mode": "default" }' \
            "https://api.timeweb.cloud/api/v1/servers/123/boot-mode"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers/123/boot-mode', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{ "boot_mode": "default" }',
              body: JSON.stringify({
                  'boot_mode': 'default'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/servers/123/boot-mode',
              // '{ "boot_mode": "default" }',
              {
                  'boot_mode': 'default'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'boot_mode': 'default',
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/servers/123/boot-mode', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{ "boot_mode": "default" }'
          #response = requests.post('https://api.timeweb.cloud/api/v1/servers/123/boot-mode', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/boot-mode');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{ "boot_mode": "default" }');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{ \"boot_mode\": \"default\" }`)\n\treq,\
          \ err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/servers/123/boot-mode\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/servers/123/boot-mode\");\n\t\t\
          HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{ \\\"boot_mode\\\": \\\"default\\\" }\");\n\t\twriter.flush();\n\
          \t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
  /api/v1/servers/{server_id}/local-networks/nat-mode:
    patch:
      tags:
      - Облачные серверы
      summary: Изменение правил маршрутизации трафика сервера (NAT)
      description: "Чтобы измененить правила маршрутизации трафика сервера (NAT),\
        \ отправьте PATCH-запрос на `/api/v1/servers/{server_id}/local-networks/nat-mode`."
      operationId: updateServerNAT
      parameters:
      - name: server_id
        in: path
        description: Уникальный идентификатор облачного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/localnetworks_natmode_body'
      responses:
        "204":
          description: Успешна смена правила маршрутизации трафика
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X PATCH \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" -d '{ "nat_mode": "no_nat" }' \
            "https://api.timeweb.cloud/api/v1/servers/123/local-networks/nat-mode"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers/123/local-networks/nat-mode', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{ "nat_mode": "no_nat" }',
              body: JSON.stringify({
                  'nat_mode': 'no_nat'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud/api/v1/servers/123/local-networks/nat-mode',
              // '{ "nat_mode": "no_nat" }',
              {
                  'nat_mode': 'no_nat'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'nat_mode': 'no_nat',
          }

          response = requests.patch('https://api.timeweb.cloud/api/v1/servers/123/local-networks/nat-mode', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{ "nat_mode": "no_nat" }'
          #response = requests.patch('https://api.timeweb.cloud/api/v1/servers/123/local-networks/nat-mode', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/local-networks/nat-mode');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{ "nat_mode": "no_nat" }');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{ \"nat_mode\": \"no_nat\" }`)\n\treq, err\
          \ := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/servers/123/local-networks/nat-mode\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/servers/123/local-networks/nat-mode\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{ \\\"nat_mode\\\": \\\"no_nat\\\" }\");\n\t\twriter.flush();\n\
          \t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
  /api/v1/servers/{server_id}/ips:
    get:
      tags:
      - Облачные серверы
      summary: Получение списка IP-адресов сервера
      description: |-
        Чтобы получить список IP-адресов сервера, отправьте GET-запрос на `/api/v1/servers/{server_id}/ips`. \
         На данный момент IPv6 доступны только для локации `ru-1`.
      operationId: getServerIPs
      parameters:
      - name: server_id
        in: path
        description: Уникальный идентификатор облачного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      responses:
        "200":
          description: Объект JSON c ключом `server_ips`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_43'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
           "https://api.timeweb.cloud/api/v1/servers/123/ips"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers/123/ips', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/servers/123/ips', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/servers/123/ips', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/ips');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/servers/123/ips\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/ips\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
    post:
      tags:
      - Облачные серверы
      summary: Добавление IP-адреса сервера
      description: |-
        Чтобы добавить IP-адрес сервера, отправьте POST-запрос на `/api/v1/servers/{server_id}/ips`. \
         На данный момент IPv6 доступны только для серверов с локацией `ru-1`.
      operationId: addServerIP
      parameters:
      - name: server_id
        in: path
        description: Уникальный идентификатор облачного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server_id_ips_body'
        required: true
      responses:
        "201":
          description: Объект JSON c ключом `server_ip`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_14'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{
            "type": "ipv4"
          }' "https://api.timeweb.cloud/api/v1/servers/123/ips"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers/123/ips', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{\n  "type": "ipv4"\n}',
              body: JSON.stringify({
                  'type': 'ipv4'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/servers/123/ips',
              // '{\n  "type": "ipv4"\n}',
              {
                  'type': 'ipv4'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'type': 'ipv4',
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/servers/123/ips', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{\n  "type": "ipv4"\n}'
          #response = requests.post('https://api.timeweb.cloud/api/v1/servers/123/ips', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/ips');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"type\": \"ipv4\"\n}");

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\n  \"type\": \"ipv4\"\n}`)\n\treq, err\
          \ := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/servers/123/ips\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/servers/123/ips\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\n  \\\"type\\\": \\\"ipv4\\\"\\n}\");\n\t\twriter.flush();\n\t\twriter.close();\n\
          \t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream\
          \ = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
    delete:
      tags:
      - Облачные серверы
      summary: Удаление IP-адреса сервера
      description: "Чтобы удалить IP-адрес сервера, отправьте DELETE-запрос на `/api/v1/servers/{server_id}/ips`.\
        \ Нельзя удалить основной IP-адрес"
      operationId: deleteServerIP
      parameters:
      - name: server_id
        in: path
        description: Уникальный идентификатор облачного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server_id_ips_body_1'
        required: true
      responses:
        "204":
          description: IP-адрес успешно удален
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X PATCH \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{
            "ip": "1.1.1.1"
          }' "https://api.timeweb.cloud/api/v1/servers/123/ips"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers/123/ips', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{\n  "ip": "1.1.1.1"\n}',
              body: JSON.stringify({
                  'ip': '1.1.1.1'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud/api/v1/servers/123/ips',
              // '{\n  "ip": "1.1.1.1"\n}',
              {
                  'ip': '1.1.1.1'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'ip': '1.1.1.1',
          }

          response = requests.patch('https://api.timeweb.cloud/api/v1/servers/123/ips', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{\n  "ip": "1.1.1.1"\n}'
          #response = requests.patch('https://api.timeweb.cloud/api/v1/servers/123/ips', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/ips');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"ip\": \"1.1.1.1\"\n}");

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\n  \"ip\": \"1.1.1.1\"\n}`)\n\treq, err\
          \ := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/servers/123/ips\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/servers/123/ips\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\n  \\\"ip\\\": \\\"1.1.1.1\\\"\\n}\");\n\t\twriter.flush();\n\t\twriter.close();\n\
          \t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream\
          \ = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
    patch:
      tags:
      - Облачные серверы
      summary: Изменение IP-адреса сервера
      description: "Чтобы изменить IP-адрес сервера, отправьте POST-запрос на `/api/v1/servers/{server_id}/ips`."
      operationId: updateServerIP
      parameters:
      - name: server_id
        in: path
        description: Уникальный идентификатор облачного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server_id_ips_body_2'
        required: true
      responses:
        "200":
          description: Объект JSON c ключом `server_ip`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_14'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -H\
          \ \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\n  \"ptr\"\
          : \"1197521-cl1233.tw1.ru\", \n  \"ip\": \"1.1.1.1\"\n}' \"https://api.timeweb.cloud/api/v1/servers/123/ips\""
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers/123/ips', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{\n  "ptr": "1197521-cl1233.tw1.ru", \n  "ip": "1.1.1.1"\n}',
              body: JSON.stringify({
                  'ptr': '1197521-cl1233.tw1.ru',
                  'ip': '1.1.1.1'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud/api/v1/servers/123/ips',
              // '{\n  "ptr": "1197521-cl1233.tw1.ru", \n  "ip": "1.1.1.1"\n}',
              {
                  'ptr': '1197521-cl1233.tw1.ru',
                  'ip': '1.1.1.1'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'ptr': '1197521-cl1233.tw1.ru',
              'ip': '1.1.1.1',
          }

          response = requests.patch('https://api.timeweb.cloud/api/v1/servers/123/ips', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{\n  "ptr": "1197521-cl1233.tw1.ru", \n  "ip": "1.1.1.1"\n}'
          #response = requests.patch('https://api.timeweb.cloud/api/v1/servers/123/ips', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/ips');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"ptr\": \"1197521-cl1233.tw1.ru\", \n  \"ip\": \"1.1.1.1\"\n}");

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\n  \"ptr\": \"1197521-cl1233.tw1.ru\"\
          , \n  \"ip\": \"1.1.1.1\"\n}`)\n\treq, err := http.NewRequest(\"PATCH\"\
          , \"https://api.timeweb.cloud/api/v1/servers/123/ips\", data)\n\tif err\
          \ != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\",\
          \ \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer \"\
          \ + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/servers/123/ips\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\n  \\\"ptr\\\": \\\"1197521-cl1233.tw1.ru\\\", \\n  \\\"ip\\\": \\\"\
          1.1.1.1\\\"\\n}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
  /api/v1/servers/{server_id}/logs:
    get:
      tags:
      - Облачные серверы
      summary: Получение списка логов сервера
      description: "Чтобы получить список логов сервера, отправьте GET-запрос на `/api/v1/servers/{server_id}/logs`."
      operationId: getServerLogs
      parameters:
      - name: server_id
        in: path
        description: Уникальный идентификатор облачного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      - name: limit
        in: query
        description: "Обозначает количество записей, которое необходимо вернуть."
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 100
      - name: offset
        in: query
        description: Указывает на смещение относительно начала списка.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      - name: order
        in: query
        description: Сортировка элементов по дате
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: asc
          enum:
          - asc
          - desc
      responses:
        "200":
          description: Объект JSON c ключом `server_logs`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_44'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
           "https://api.timeweb.cloud/api/v1/servers/123/logs"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers/123/logs', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/servers/123/logs', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/servers/123/logs', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/logs');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/servers/123/logs\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/logs\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
  /api/v1/servers/{server_id}/disks:
    get:
      tags:
      - Облачные серверы
      summary: Получение списка дисков сервера
      description: "Чтобы получить список дисков сервера, отправьте GET-запрос на\
        \ `/api/v1/servers/{server_id}/disks`."
      operationId: getServerDisks
      parameters:
      - name: server_id
        in: path
        description: Уникальный идентификатор облачного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      responses:
        "200":
          description: Объект JSON c ключом `server_disks`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_45'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
           "https://api.timeweb.cloud/api/v1/servers/123/disks"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers/123/disks', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/servers/123/disks', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/servers/123/disks', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/disks');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/servers/123/disks\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/disks\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
    post:
      tags:
      - Облачные серверы
      summary: Создание диска сервера
      description: "Чтобы создать диск сервера, отправьте POST-запрос на `/api/v1/servers/{server_id}/disks`.\
        \ Системный диск создать нельзя."
      operationId: createServerDisk
      parameters:
      - name: server_id
        in: path
        description: Уникальный идентификатор облачного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server_id_disks_body'
      responses:
        "201":
          description: Успешное создание диска сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_15'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" -d '{ "size": 10240 }' \
            "https://api.timeweb.cloud/api/v1/servers/123/disks"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers/123/disks', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{ "size": 10240 }',
              body: JSON.stringify({
                  'size': 10240
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/servers/123/disks',
              // '{ "size": 10240 }',
              {
                  'size': 10240
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'size': 10240,
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/servers/123/disks', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{ "size": 10240 }'
          #response = requests.post('https://api.timeweb.cloud/api/v1/servers/123/disks', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/disks');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{ "size": 10240 }');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{ \"size\": 10240 }`)\n\treq, err := http.NewRequest(\"\
          POST\", \"https://api.timeweb.cloud/api/v1/servers/123/disks\", data)\n\t\
          if err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\"\
          , \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer \"\
          \ + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/servers/123/disks\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          { \\\"size\\\": 10240 }\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\
          \thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream\
          \ = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
  /api/v1/servers/{server_id}/disks/{disk_id}:
    get:
      tags:
      - Облачные серверы
      summary: Получение диска сервера
      description: "Чтобы получить диск сервера, отправьте GET-запрос на `/api/v1/servers/{server_id}/disks/{disk_id}`."
      operationId: getServerDisk
      parameters:
      - name: server_id
        in: path
        description: Уникальный идентификатор облачного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      - name: disk_id
        in: path
        description: Уникальный идентификатор диска сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      responses:
        "200":
          description: Успешное получение диска сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_15'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/servers/123/disks/321"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers/123/disks/321', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/servers/123/disks/321', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/servers/123/disks/321', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/disks/321');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/servers/123/disks/321\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/disks/321\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
    delete:
      tags:
      - Облачные серверы
      summary: Удаление диска сервера
      description: "Чтобы удалить диск сервера, отправьте DELETE-запрос на `/api/v1/servers/{server_id}/disks/{disk_id}`.\
        \ Нельзя удалять системный диск."
      operationId: deleteServerDisk
      parameters:
      - name: server_id
        in: path
        description: Уникальный идентификатор облачного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      - name: disk_id
        in: path
        description: Уникальный идентификатор диска сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      responses:
        "204":
          description: Успешное удаление диска сервера
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/servers/123/disks/321"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers/123/disks/321', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/servers/123/disks/321', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.delete('https://api.timeweb.cloud/api/v1/servers/123/disks/321', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/disks/321');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/servers/123/disks/321\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/disks/321\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
    patch:
      tags:
      - Облачные серверы
      summary: Изменение параметров диска сервера
      description: "Чтобы изменить параметры диска сервера, отправьте PATCH-запрос\
        \ на `/api/v1/servers/{server_id}/disks/{disk_id}`."
      operationId: updateServerDisk
      parameters:
      - name: server_id
        in: path
        description: Уникальный идентификатор облачного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      - name: disk_id
        in: path
        description: Уникальный идентификатор диска сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/disks_disk_id_body'
      responses:
        "200":
          description: Успешное изменение параметров диска сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_15'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X PATCH \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" -d '{ "size": 10240 }' \
            "https://api.timeweb.cloud/api/v1/servers/123/disks/321"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers/123/disks/321', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{ "size": 10240 }',
              body: JSON.stringify({
                  'size': 10240
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud/api/v1/servers/123/disks/321',
              // '{ "size": 10240 }',
              {
                  'size': 10240
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'size': 10240,
          }

          response = requests.patch('https://api.timeweb.cloud/api/v1/servers/123/disks/321', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{ "size": 10240 }'
          #response = requests.patch('https://api.timeweb.cloud/api/v1/servers/123/disks/321', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/disks/321');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{ "size": 10240 }');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{ \"size\": 10240 }`)\n\treq, err := http.NewRequest(\"\
          PATCH\", \"https://api.timeweb.cloud/api/v1/servers/123/disks/321\", data)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\"\
          , \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer \"\
          \ + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/servers/123/disks/321\");\n\t\t\
          HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{ \\\"size\\\": 10240 }\");\n\t\twriter.flush();\n\t\t\
          writer.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
  /api/v1/servers/{server_id}/disks/{disk_id}/auto-backups:
    get:
      tags:
      - Облачные серверы
      summary: Получить настройки автобэкапов диска сервера
      description: "Чтобы полученить настройки автобэкапов диска сервера, отправьт\
        е GET-запрос на `/api/v1/servers/{server_id}/disks/{disk_id}/auto-backups`."
      operationId: getServerDiskAutoBackupSettings
      parameters:
      - name: server_id
        in: path
        description: Уникальный идентификатор облачного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      - name: disk_id
        in: path
        description: Уникальный идентификатор диска сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      responses:
        "200":
          description: Объект JSON c ключом `auto_backups_settings`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_46'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/servers/123/disks/321/auto-backups"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers/123/disks/321/auto-backups', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/servers/123/disks/321/auto-backups', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/servers/123/disks/321/auto-backups', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/disks/321/auto-backups');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/servers/123/disks/321/auto-backups\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/disks/321/auto-backups\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
    patch:
      tags:
      - Облачные серверы
      summary: Изменение настроек автобэкапов диска сервера
      description: "Чтобы изменить настройки автобэкапов диска сервера, отправьте\
        \ PATCH-запрос на `/api/v1/servers/{server_id}/disks/{disk_id}/auto-backups`."
      operationId: updateServerDiskAutoBackupSettings
      parameters:
      - name: server_id
        in: path
        description: Уникальный идентификатор облачного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      - name: disk_id
        in: path
        description: Уникальный идентификатор диска сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      requestBody:
        description: "При значении `is_enabled`: `true`, поля `copy_count`, `creation_start_at`,\
          \ `interval` являются обязательными"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auto-backup'
      responses:
        "200":
          description: Объект JSON c ключом `auto_backups_settings`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_46'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -H\
          \ \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" -d '{ \"copy_count\": 1,\
          \ \n \"creation_start_at\": \"2024-02-02T00:00:00.000Z\", \n \"is_enabled\"\
          : true, \n \"interval\": \"week\"}' \\\n  \"https://api.timeweb.cloud/api/v1/servers/123/disks/321/auto-backups\""
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers/123/disks/321/auto-backups', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{ "copy_count": 1, \n "creation_start_at": "2024-02-02T00:00:00.000Z", \n "is_enabled": true, \n "interval": "week"}',
              body: JSON.stringify({
                  'copy_count': 1,
                  'creation_start_at': '2024-02-02T00:00:00.000Z',
                  'is_enabled': true,
                  'interval': 'week'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud/api/v1/servers/123/disks/321/auto-backups',
              // '{ "copy_count": 1, \n "creation_start_at": "2024-02-02T00:00:00.000Z", \n "is_enabled": true, \n "interval": "week"}',
              {
                  'copy_count': 1,
                  'creation_start_at': '2024-02-02T00:00:00.000Z',
                  'is_enabled': true,
                  'interval': 'week'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'copy_count': 1,
              'creation_start_at': '2024-02-02T00:00:00.000Z',
              'is_enabled': True,
              'interval': 'week',
          }

          response = requests.patch('https://api.timeweb.cloud/api/v1/servers/123/disks/321/auto-backups', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{ "copy_count": 1, \n "creation_start_at": "2024-02-02T00:00:00.000Z", \n "is_enabled": true, \n "interval": "week"}'
          #response = requests.patch('https://api.timeweb.cloud/api/v1/servers/123/disks/321/auto-backups', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/disks/321/auto-backups');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, "{ \"copy_count\": 1, \n \"creation_start_at\": \"2024-02-02T00:00:00.000Z\", \n \"is_enabled\": true, \n \"interval\": \"week\"}");

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{ \"copy_count\": 1, \n \"creation_start_at\"\
          : \"2024-02-02T00:00:00.000Z\", \n \"is_enabled\": true, \n \"interval\"\
          : \"week\"}`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/servers/123/disks/321/auto-backups\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/servers/123/disks/321/auto-backups\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{ \\\"copy_count\\\": 1, \\n \\\"creation_start_at\\\"\
          : \\\"2024-02-02T00:00:00.000Z\\\", \\n \\\"is_enabled\\\": true, \\n \\\
          \"interval\\\": \\\"week\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\
          \t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream\
          \ = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
  /api/v1/servers/{server_id}/disks/{disk_id}/backups:
    get:
      tags:
      - Облачные серверы
      summary: Получение списка бэкапов диска сервера
      description: |-
        Чтобы получить список бэкапов диска сервера, отправьте GET-запрос на `/api/v1/servers/{server_id}/disks/{disk_id}/backups`.

         Тело ответа будет представлять собой объект JSON с ключом `backups`.
      operationId: getServerDiskBackups
      parameters:
      - name: server_id
        in: path
        description: Уникальный идентификатор облачного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      - name: disk_id
        in: path
        description: Уникальный идентификатор диска сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      responses:
        "200":
          description: Объект JSON c ключом `backups`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_47'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/servers/123431/disks/123321/backups"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers/123431/disks/123321/backups', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/servers/123431/disks/123321/backups', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/servers/123431/disks/123321/backups', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123431/disks/123321/backups');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/servers/123431/disks/123321/backups\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123431/disks/123321/backups\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
    post:
      tags:
      - Облачные серверы
      summary: Создание бэкапа диска сервера
      description: |-
        Чтобы создать бэкап диска сервера, отправьте POST-запрос на `/api/v1/servers/{server_id}/disks/{disk_id}/backups`.

         Тело ответа будет представлять собой объект JSON с ключом `backup`.
      operationId: createServerDiskBackup
      parameters:
      - name: server_id
        in: path
        description: Уникальный идентификатор облачного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      - name: disk_id
        in: path
        description: Уникальный идентификатор диска сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/disk_id_backups_body'
      responses:
        "201":
          description: Объект JSON c ключом `backup`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_16'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
           -d '{ "comment": "comment"}' \
           "https://api.timeweb.cloud/api/v1/servers/123456/disks/456321/backups"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers/123456/disks/456321/backups', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{ "comment": "comment"}',
              body: JSON.stringify({
                  'comment': 'comment'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/servers/123456/disks/456321/backups',
              // '{ "comment": "comment"}',
              {
                  'comment': 'comment'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'comment': 'comment',
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/servers/123456/disks/456321/backups', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{ "comment": "comment"}'
          #response = requests.post('https://api.timeweb.cloud/api/v1/servers/123456/disks/456321/backups', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123456/disks/456321/backups');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{ "comment": "comment"}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{ \"comment\": \"comment\"}`)\n\treq, err\
          \ := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/servers/123456/disks/456321/backups\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/servers/123456/disks/456321/backups\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{ \\\"comment\\\": \\\"comment\\\"}\");\n\t\twriter.flush();\n\
          \t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
  /api/v1/servers/{server_id}/disks/{disk_id}/backups/{backup_id}:
    get:
      tags:
      - Облачные серверы
      summary: Получение бэкапа диска сервера
      description: |-
        Чтобы получить бэкап диска сервера, отправьте GET-запрос на `/api/v1/servers/{server_id}/disks/{disk_id}/backups/{backup_id}`.

         Тело ответа будет представлять собой объект JSON с ключом `backup`.
      operationId: getServerDiskBackup
      parameters:
      - name: server_id
        in: path
        description: Уникальный идентификатор облачного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      - name: disk_id
        in: path
        description: Уникальный идентификатор диска сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      - name: backup_id
        in: path
        description: Уникальный идентификатор бэкапа сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      responses:
        "200":
          description: Объект JSON c ключом `backup`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_48'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
    delete:
      tags:
      - Облачные серверы
      summary: Удаление бэкапа диска сервера
      description: "Чтобы удалить бэкап диска сервера, отправьте DELETE-запрос на\
        \ `/api/v1/servers/{server_id}/disks/{disk_id}/backups/{backup_id}`."
      operationId: deleteServerDiskBackup
      parameters:
      - name: server_id
        in: path
        description: Уникальный идентификатор облачного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      - name: disk_id
        in: path
        description: Уникальный идентификатор диска сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      - name: backup_id
        in: path
        description: Уникальный идентификатор бэкапа сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      responses:
        "204":
          description: Успешное удаление бэкапа.
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.delete('https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
    patch:
      tags:
      - Облачные серверы
      summary: Изменение бэкапа диска сервера
      description: "Чтобы изменить бэкап диска сервера, отправьте PATCH-запрос на\
        \ `/api/v1/servers/{server_id}/disks/{disk_id}/backups/{backup_id}`."
      operationId: updateServerDiskBackup
      parameters:
      - name: server_id
        in: path
        description: Уникальный идентификатор облачного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      - name: disk_id
        in: path
        description: Уникальный идентификатор диска сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      - name: backup_id
        in: path
        description: Уникальный идентификатор бэкапа сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/backups_backup_id_body'
      responses:
        "200":
          description: Объект JSON c ключом `backup`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_48'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X PATCH \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" -d '{ "comment": "comment"}' \
            "https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{ "comment": "comment"}',
              body: JSON.stringify({
                  'comment': 'comment'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123',
              // '{ "comment": "comment"}',
              {
                  'comment': 'comment'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'comment': 'comment',
          }

          response = requests.patch('https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{ "comment": "comment"}'
          #response = requests.patch('https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{ "comment": "comment"}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{ \"comment\": \"comment\"}`)\n\treq, err\
          \ := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{ \\\"comment\\\": \\\"comment\\\"}\");\n\t\twriter.flush();\n\
          \t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
  /api/v1/servers/{server_id}/disks/{disk_id}/backups/{backup_id}/action:
    post:
      tags:
      - Облачные серверы
      summary: Выполнение действия над бэкапом диска сервера
      description: "Чтобы выполнить действие над бэкапом диска сервера, отправьте\
        \ POST-запрос на `/api/v1/servers/{server_id}/disks/{disk_id}/backups/{backup_id}/action`."
      operationId: performActionOnBackup
      parameters:
      - name: server_id
        in: path
        description: Уникальный идентификатор облачного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      - name: disk_id
        in: path
        description: Уникальный идентификатор диска сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      - name: backup_id
        in: path
        description: Уникальный идентификатор бэкапа сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/backup_id_action_body'
      responses:
        "204":
          description: Успешное выполнение действия
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" -d '{ "action": "mount"}' \
            "https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123/action"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123/action', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{ "action": "mount"}',
              body: JSON.stringify({
                  'action': 'mount'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123/action',
              // '{ "action": "mount"}',
              {
                  'action': 'mount'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'action': 'mount',
          }

          response = requests.post(
              'https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123/action',
              headers=headers,
              json=json_data,
          )

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{ "action": "mount"}'
          #response = requests.post('https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123/action', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123/action');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{ "action": "mount"}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{ \"action\": \"mount\"}`)\n\treq, err :=\
          \ http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123/action\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/servers/123/disks/321/backups/123/action\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{ \\\"action\\\": \\\"mount\\\"}\");\n\t\twriter.flush();\n\
          \t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
  /api/v1/servers/{server_id}/image-unmount:
    post:
      tags:
      - Облачные серверы
      summary: Отмонтирование ISO образа и перезагрузка сервера
      description: "Чтобы отмонтировать ISO образ и перезагрузить сервер, отправьт\
        е POST-запрос на `/api/v1/servers/{server_id}/image-unmount`."
      operationId: imageUnmountAndServerReload
      parameters:
      - name: server_id
        in: path
        description: Уникальный идентификатор облачного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      responses:
        "200":
          description: ISO образ в процессе отмонтирования
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
           "https://api.timeweb.cloud/api/v1/servers/123456/image-unmount"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers/123456/image-unmount', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/servers/123456/image-unmount',
              '',
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/servers/123456/image-unmount', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123456/image-unmount');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/servers/123456/image-unmount\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123456/image-unmount\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Servers
  /api/v1/projects:
    get:
      tags:
      - Проекты
      summary: Получение списка проектов
      description: |-
        Чтобы получить список всех проектов на вашем аккаунте, отправьте GET-запрос на `/api/v1/dedicated-servers`.

         Тело ответа будет представлять собой объект JSON с ключом `projects`.
      operationId: getProjects
      responses:
        "200":
          description: Объект JSON c ключом `projects`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_49'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/projects"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/projects', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/projects', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/projects', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/projects\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Projects
    post:
      tags:
      - Проекты
      summary: Создание проекта
      description: |-
        Чтобы создать проект, отправьте POST-запрос в `api/v1/projects`, задав необходимые атрибуты.

        Проект будет создан с использованием предоставленной информации. Тело ответа будет содержать объект JSON с информацией о созданном проекте.
      operationId: createProject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-project'
        required: true
      responses:
        "201":
          description: Объект JSON c ключом `project`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_17'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"name":"Project"}' \
            "https://api.timeweb.cloud/api/v1/projects"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/projects', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'name': 'Project'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/projects',
              {
                  'name': 'Project'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'name': 'Project',
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/projects', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"name":"Project"}'
          #response = requests.post('https://api.timeweb.cloud/api/v1/projects', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"name":"Project"}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"name\":\"Project\"}`)\n\treq, err :=\
          \ http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/projects\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/projects\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\\"name\\\":\\\"Project\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\
          \t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream\
          \ = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Projects
  /api/v1/projects/{project_id}:
    get:
      tags:
      - Проекты
      summary: Получение проекта по идентификатору
      description: "Чтобы получить проект по идентификатору, отправьте GET-запрос\
        \ на `/api/v1/projects/{project_id}`."
      operationId: getProject
      parameters:
      - name: project_id
        in: path
        description: Уникальный идентификатор проекта.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 99
      responses:
        "200":
          description: Объект JSON c ключом `project`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_17'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/projects/99"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/projects/99', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/projects/99', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/projects/99', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/projects/99\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/99\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Projects
    put:
      tags:
      - Проекты
      summary: Изменение проекта
      description: "Чтобы изменить проект, отправьте запрос PUT в `api/v1/projects/{project_id}`."
      operationId: updateProject
      parameters:
      - name: project_id
        in: path
        description: Уникальный идентификатор проекта.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 99
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-project'
        required: true
      responses:
        "200":
          description: Объект JSON c ключом `project`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_17'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X PUT \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"name":"Project"}' \
            "https://api.timeweb.cloud/api/v1/projects/99"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/projects/99', {
              method: 'PUT',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'name': 'Project'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.put(
              'https://api.timeweb.cloud/api/v1/projects/99',
              {
                  'name': 'Project'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'name': 'Project',
          }

          response = requests.put('https://api.timeweb.cloud/api/v1/projects/99', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"name":"Project"}'
          #response = requests.put('https://api.timeweb.cloud/api/v1/projects/99', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"name":"Project"}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"name\":\"Project\"}`)\n\treq, err :=\
          \ http.NewRequest(\"PUT\", \"https://api.timeweb.cloud/api/v1/projects/99\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/projects/99\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          PUT\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\\"name\\\":\\\"Project\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\
          \t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream\
          \ = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Projects
    delete:
      tags:
      - Проекты
      summary: Удаление проекта
      description: "Чтобы удалить проект, отправьте запрос DELETE в `api/v1/projects/{project_id}`."
      operationId: deleteProject
      parameters:
      - name: project_id
        in: path
        description: Уникальный идентификатор проекта.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 99
      responses:
        "204":
          description: Проект успешно удален
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/projects/99"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/projects/99', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/projects/99', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.delete('https://api.timeweb.cloud/api/v1/projects/99', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/projects/99\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/99\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Projects
  /api/v1/projects/{project_id}/resources/balancers:
    get:
      tags:
      - Проекты
      summary: Получение списка балансировщиков проекта
      description: "Чтобы получить список балансировщиков проекта, отправьте GET-з\
        апрос на `/api/v1/projects/{project_id}/resources/balancers`."
      operationId: getProjectBalancers
      parameters:
      - name: project_id
        in: path
        description: Уникальный идентификатор проекта.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 99
      responses:
        "200":
          description: Объект JSON c ключом `balancers`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_50'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/projects/99/resources/balancers"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/projects/99/resources/balancers', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/projects/99/resources/balancers', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/projects/99/resources/balancers', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99/resources/balancers');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/projects/99/resources/balancers\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/99/resources/balancers\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Projects
    post:
      tags:
      - Проекты
      summary: Добавление балансировщика в проект
      description: |-
        Чтобы добавить балансировщик в проект, отправьте POST-запрос на `/api/v1/projects/{project_id}/resources/balancers`, задав необходимые атрибуты.

        Балансировщик будет добавлен в указанный проект. Тело ответа будет содержать объект JSON с информацией о добавленном балансировщике.
      operationId: addBalancerToProject
      parameters:
      - name: project_id
        in: path
        description: Уникальный идентификатор проекта.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 99
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/resources_balancers_body'
        required: true
      responses:
        "200":
          description: Объект JSON c ключом `resource`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_51'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"resource_id":1}' \
            "https://api.timeweb.cloud/api/v1/projects/99/resources/balancers"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/projects/99/resources/balancers', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'resource_id': 1
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/projects/99/resources/balancers',
              {
                  'resource_id': 1
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'resource_id': 1,
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/projects/99/resources/balancers', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"resource_id":1}'
          #response = requests.post('https://api.timeweb.cloud/api/v1/projects/99/resources/balancers', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99/resources/balancers');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"resource_id":1}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"resource_id\":1}`)\n\treq, err := http.NewRequest(\"\
          POST\", \"https://api.timeweb.cloud/api/v1/projects/99/resources/balancers\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/projects/99/resources/balancers\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"resource_id\\\":1}\");\n\t\twriter.flush();\n\t\t\
          writer.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Projects
  /api/v1/projects/{project_id}/resources/buckets:
    get:
      tags:
      - Проекты
      summary: Получение списка хранилищ проекта
      description: "Чтобы получить список хранилищ проекта, отправьте GET-запрос н\
        а `/api/v1/projects/{project_id}/resources/buckets`."
      operationId: getProjectStorages
      parameters:
      - name: project_id
        in: path
        description: Уникальный идентификатор проекта.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 99
      responses:
        "200":
          description: Объект JSON c ключом `buckets`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_52'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/projects/99/resources/buckets"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/projects/99/resources/buckets', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/projects/99/resources/buckets', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/projects/99/resources/buckets', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99/resources/buckets');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/projects/99/resources/buckets\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/99/resources/buckets\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Projects
    post:
      tags:
      - Проекты
      summary: Добавление хранилища в проект
      description: |-
        Чтобы добавить хранилище в проект, отправьте POST-запрос на `/api/v1/projects/{project_id}/resources/buckets`, задав необходимые атрибуты.

        Хранилище будет добавлено в указанный проект. Тело ответа будет содержать объект JSON с информацией о добавленном хранилище.
      operationId: addStorageToProject
      parameters:
      - name: project_id
        in: path
        description: Уникальный идентификатор проекта.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 99
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/resources_buckets_body'
        required: true
      responses:
        "200":
          description: Объект JSON c ключом `resource`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_51'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"resource_id":1}' \
            "https://api.timeweb.cloud/api/v1/projects/99/resources/buckets"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/projects/99/resources/buckets', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'resource_id': 1
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/projects/99/resources/buckets',
              {
                  'resource_id': 1
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'resource_id': 1,
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/projects/99/resources/buckets', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"resource_id":1}'
          #response = requests.post('https://api.timeweb.cloud/api/v1/projects/99/resources/buckets', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99/resources/buckets');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"resource_id":1}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"resource_id\":1}`)\n\treq, err := http.NewRequest(\"\
          POST\", \"https://api.timeweb.cloud/api/v1/projects/99/resources/buckets\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/projects/99/resources/buckets\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"resource_id\\\":1}\");\n\t\twriter.flush();\n\t\t\
          writer.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Projects
  /api/v1/projects/{project_id}/resources/clusters:
    get:
      tags:
      - Проекты
      summary: Получение списка кластеров проекта
      description: "Чтобы получить список кластеров проекта, отправьте GET-запрос\
        \ на `/api/v1/projects/{project_id}/resources/clusters`."
      operationId: getProjectClusters
      parameters:
      - name: project_id
        in: path
        description: Уникальный идентификатор проекта.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 99
      responses:
        "200":
          description: Объект JSON c ключом `clusters`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_53'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/projects/99/resources/clusters"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/projects/99/resources/clusters', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/projects/99/resources/clusters', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/projects/99/resources/clusters', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99/resources/clusters');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/projects/99/resources/clusters\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/99/resources/clusters\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Projects
    post:
      tags:
      - Проекты
      summary: Добавление кластера в проект
      description: |-
        Чтобы добавить кластер в проект, отправьте POST-запрос на `/api/v1/projects/{project_id}/resources/clusters`, задав необходимые атрибуты.

        Кластер будет добавлен в указанный проект. Тело ответа будет содержать объект JSON с информацией о добавленном кластере.
      operationId: addClusterToProject
      parameters:
      - name: project_id
        in: path
        description: Уникальный идентификатор проекта.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 99
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/resources_clusters_body'
        required: true
      responses:
        "200":
          description: Объект JSON c ключом `resource`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_51'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"resource_id":1}' \
            "https://api.timeweb.cloud/api/v1/projects/99/resources/clusters"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/projects/99/resources/clusters', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'resource_id': 1
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/projects/99/resources/clusters',
              {
                  'resource_id': 1
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'resource_id': 1,
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/projects/99/resources/clusters', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"resource_id":1}'
          #response = requests.post('https://api.timeweb.cloud/api/v1/projects/99/resources/clusters', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99/resources/clusters');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"resource_id":1}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"resource_id\":1}`)\n\treq, err := http.NewRequest(\"\
          POST\", \"https://api.timeweb.cloud/api/v1/projects/99/resources/clusters\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/projects/99/resources/clusters\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"resource_id\\\":1}\");\n\t\twriter.flush();\n\t\t\
          writer.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Projects
  /api/v1/projects/{project_id}/resources/servers:
    get:
      tags:
      - Проекты
      summary: Получение списка серверов проекта
      description: "Чтобы получить список серверов проекта, отправьте GET-запрос н\
        а `/api/v1/projects/{project_id}/resources/servers`."
      operationId: getProjectServers
      parameters:
      - name: project_id
        in: path
        description: Уникальный идентификатор проекта.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 99
      responses:
        "200":
          description: Объект JSON c ключом `servers`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_54'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/projects/99/resources/servers"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/projects/99/resources/servers', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/projects/99/resources/servers', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/projects/99/resources/servers', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99/resources/servers');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/projects/99/resources/servers\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/99/resources/servers\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Projects
    post:
      tags:
      - Проекты
      summary: Добавление сервера в проект
      description: |-
        Чтобы добавить сервер в проект, отправьте POST-запрос на `/api/v1/projects/{project_id}/resources/servers`, задав необходимые атрибуты.

        Сервер будет добавлен в указанный проект. Тело ответа будет содержать объект JSON с информацией о добавленном сервере.
      operationId: addServerToProject
      parameters:
      - name: project_id
        in: path
        description: Уникальный идентификатор проекта.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 99
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/resources_servers_body'
        required: true
      responses:
        "200":
          description: Объект JSON c ключом `resource`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_51'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"resource_id":1}' \
            "https://api.timeweb.cloud/api/v1/projects/99/resources/servers"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/projects/99/resources/servers', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'resource_id': 1
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/projects/99/resources/servers',
              {
                  'resource_id': 1
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'resource_id': 1,
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/projects/99/resources/servers', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"resource_id":1}'
          #response = requests.post('https://api.timeweb.cloud/api/v1/projects/99/resources/servers', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99/resources/servers');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"resource_id":1}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"resource_id\":1}`)\n\treq, err := http.NewRequest(\"\
          POST\", \"https://api.timeweb.cloud/api/v1/projects/99/resources/servers\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/projects/99/resources/servers\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"resource_id\\\":1}\");\n\t\twriter.flush();\n\t\t\
          writer.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Projects
  /api/v1/projects/{project_id}/resources/databases:
    get:
      tags:
      - Проекты
      summary: Получение списка баз данных проекта
      description: "Чтобы получить список баз данных проекта, отправьте GET-запрос\
        \ на `/api/v1/projects/{project_id}/resources/databases`."
      operationId: getProjectDatabases
      parameters:
      - name: project_id
        in: path
        description: Уникальный идентификатор проекта.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 99
      responses:
        "200":
          description: Объект JSON c ключом `databases`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_55'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/projects/99/resources/databases"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/projects/99/resources/databases', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/projects/99/resources/databases', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/projects/99/resources/databases', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99/resources/databases');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/projects/99/resources/databases\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/99/resources/databases\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Projects
    post:
      tags:
      - Проекты
      summary: Добавление базы данных в проект
      description: |-
        Чтобы добавить базу данных в проект, отправьте POST-запрос на `/api/v1/projects/{project_id}/resources/databases`, задав необходимые атрибуты.

        База данных будет добавлена в указанный проект. Тело ответа будет содержать объект JSON с информацией о добавленной базе данных.
      operationId: addDatabaseToProject
      parameters:
      - name: project_id
        in: path
        description: Уникальный идентификатор проекта.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 99
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/resources_databases_body'
        required: true
      responses:
        "200":
          description: Объект JSON c ключом `resource`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_51'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"resource_id":1}' \
            "https://api.timeweb.cloud/api/v1/projects/99/resources/databases"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/projects/99/resources/databases', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'resource_id': 1
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/projects/99/resources/databases',
              {
                  'resource_id': 1
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'resource_id': 1,
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/projects/99/resources/databases', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"resource_id":1}'
          #response = requests.post('https://api.timeweb.cloud/api/v1/projects/99/resources/databases', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99/resources/databases');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"resource_id":1}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"resource_id\":1}`)\n\treq, err := http.NewRequest(\"\
          POST\", \"https://api.timeweb.cloud/api/v1/projects/99/resources/databases\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/projects/99/resources/databases\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"resource_id\\\":1}\");\n\t\twriter.flush();\n\t\t\
          writer.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Projects
  /api/v1/projects/{project_id}/resources/dedicated:
    get:
      tags:
      - Проекты
      summary: Получение списка выделенных серверов проекта
      description: "Чтобы получить список выделенных серверов проекта, отправьте GET-з\
        апрос на `/api/v1/projects/{project_id}/resources/dedicated`."
      operationId: getProjectDedicatedServers
      parameters:
      - name: project_id
        in: path
        description: Уникальный идентификатор проекта.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 99
      responses:
        "200":
          description: Объект JSON c ключом `dedicated_servers`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_56'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/projects/99/resources/dedicated"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/projects/99/resources/dedicated', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/projects/99/resources/dedicated', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/projects/99/resources/dedicated', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99/resources/dedicated');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/projects/99/resources/dedicated\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/99/resources/dedicated\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Projects
    post:
      tags:
      - Проекты
      summary: Добавление выделенного сервера в проект
      description: |-
        Чтобы добавить выделенный сервер в проект, отправьте POST-запрос на `/api/v1/projects/{project_id}/resources/dedicated`, задав необходимые атрибуты.

        Выделенный сервер будет добавлен в указанный проект. Тело ответа будет содержать объект JSON с информацией о добавленном выделенном сервере.
      operationId: addDedicatedServerToProject
      parameters:
      - name: project_id
        in: path
        description: Уникальный идентификатор проекта.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 99
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/resources_dedicated_body'
        required: true
      responses:
        "200":
          description: Объект JSON c ключом `resource`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_51'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"resource_id":1}' \
            "https://api.timeweb.cloud/api/v1/projects/99/resources/databases"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/projects/99/resources/databases', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'resource_id': 1
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/projects/99/resources/databases',
              {
                  'resource_id': 1
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'resource_id': 1,
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/projects/99/resources/databases', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"resource_id":1}'
          #response = requests.post('https://api.timeweb.cloud/api/v1/projects/99/resources/databases', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99/resources/databases');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"resource_id":1}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"resource_id\":1}`)\n\treq, err := http.NewRequest(\"\
          POST\", \"https://api.timeweb.cloud/api/v1/projects/99/resources/databases\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/projects/99/resources/databases\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"resource_id\\\":1}\");\n\t\twriter.flush();\n\t\t\
          writer.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Projects
  /api/v1/projects/{project_id}/resources:
    get:
      tags:
      - Проекты
      summary: Получение всех ресурсов проекта
      description: "Чтобы получить все ресурсы проекта, отправьте GET-запрос на `/api/v1/projects/{project_id}/resources`."
      operationId: getAllProjectResources
      parameters:
      - name: project_id
        in: path
        description: Уникальный идентификатор проекта.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 99
      responses:
        "200":
          description: "Объект JSON c ключами: `servers`, `balancers`, `buckets`,\
            \ `clusters`, `databases`, `dedicated_servers`"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_57'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/projects/99/resources"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/projects/99/resources', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/projects/99/resources', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/projects/99/resources', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99/resources');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/projects/99/resources\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/99/resources\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Projects
  /api/v1/projects/resources/balancers:
    get:
      tags:
      - Проекты
      summary: Получение списка всех балансировщиков на аккаунте
      description: "Чтобы получить список всех балансировщиков на аккаунте, отправ\
        ьте GET-запрос на `/api/v1/projects/resources/balancers`."
      operationId: getAccountBalancers
      responses:
        "200":
          description: Объект JSON c ключом `balancers`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_50'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/projects/resources/balancers"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/projects/resources/balancers', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/projects/resources/balancers', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/projects/resources/balancers', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/resources/balancers');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/projects/resources/balancers\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/resources/balancers\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Projects
  /api/v1/projects/resources/servers:
    get:
      tags:
      - Проекты
      summary: Получение списка всех серверов на аккаунте
      description: "Чтобы получить список всех серверов на аккаунте, отправьте GET-з\
        апрос на `/api/v1/projects/resources/servers`."
      operationId: getAccountServers
      responses:
        "200":
          description: Объект JSON c ключом `servers`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_54'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/projects/resources/servers"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/projects/resources/servers', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/projects/resources/servers', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/projects/resources/servers', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/resources/servers');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/projects/resources/servers\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/resources/servers\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Projects
  /api/v1/projects/resources/buckets:
    get:
      tags:
      - Проекты
      summary: Получение списка всех хранилищ на аккаунте
      description: "Чтобы получить список всех хранилищ на аккаунте, отправьте GET-з\
        апрос на `/api/v1/projects/resources/buckets`."
      operationId: getAccountStorages
      responses:
        "200":
          description: Объект JSON c ключом `buckets`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_52'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/projects/resources/buckets"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/projects/resources/buckets', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/projects/resources/buckets', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/projects/resources/buckets', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/resources/buckets');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/projects/resources/buckets\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/resources/buckets\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Projects
  /api/v1/projects/resources/clusters:
    get:
      tags:
      - Проекты
      summary: Получение списка всех кластеров на аккаунте
      description: "Чтобы получить список всех кластеров на аккаунте, отправьте GET-з\
        апрос на `/api/v1/projects/resources/clusters`."
      operationId: getAccountClusters
      responses:
        "200":
          description: Объект JSON c ключом `clusters`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_53'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/projects/resources/clusters"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/projects/resources/clusters', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/projects/resources/clusters', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/projects/resources/clusters', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/resources/clusters');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/projects/resources/clusters\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/resources/clusters\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Projects
  /api/v1/projects/resources/databases:
    get:
      tags:
      - Проекты
      summary: Получение списка всех баз данных на аккаунте
      description: "Чтобы получить список всех баз данных на аккаунте, отправьте GET-з\
        апрос на `/api/v1/projects/resources/databases`."
      operationId: getAccountDatabases
      responses:
        "200":
          description: Объект JSON c ключом `databases`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_55'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/projects/resources/databases"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/projects/resources/databases', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/projects/resources/databases', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/projects/resources/databases', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/resources/databases');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/projects/resources/databases\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/resources/databases\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Projects
  /api/v1/projects/resources/dedicated:
    get:
      tags:
      - Проекты
      summary: Получение списка всех выделенных серверов на аккаунте
      description: "Чтобы получить список всех выделенных серверов на аккаунте, от\
        правьте GET-запрос на `/api/v1/projects/resources/dedicated`."
      operationId: getAccountDedicatedServers
      responses:
        "200":
          description: Объект JSON c ключом `dedicated_servers`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_56'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      security:
      - Bearer: []
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/projects/resources/dedicated"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/projects/resources/dedicated', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/projects/resources/dedicated', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/projects/resources/dedicated', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/resources/dedicated');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/projects/resources/dedicated\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/projects/resources/dedicated\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Projects
  /api/v1/projects/{project_id}/resources/transfer:
    put:
      tags:
      - Проекты
      summary: Перенести ресурс в другой проект
      description: |
        Чтобы перенести ресурс в другой проект, отправьте запрос PUT в `api/v1/projects/{project_id}/resources/transfer`.
      operationId: transferResourceToAnotherProject
      parameters:
      - name: project_id
        in: path
        description: Уникальный идентификатор проекта.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 99
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/resource-transfer'
        required: true
      responses:
        "200":
          description: Объект JSON c ключом `resource`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_51'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X PUT \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"to_project":1,"resource_id":1,"resource_type":"server"}' \
            "https://api.timeweb.cloud/api/v1/projects/99/resources/transfer"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/projects/99/resources/transfer', {
              method: 'PUT',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'to_project': 1,
                  'resource_id': 1,
                  'resource_type': 'server'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.put(
              'https://api.timeweb.cloud/api/v1/projects/99/resources/transfer',
              {
                  'to_project': 1,
                  'resource_id': 1,
                  'resource_type': 'server'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'to_project': 1,
              'resource_id': 1,
              'resource_type': 'server',
          }

          response = requests.put('https://api.timeweb.cloud/api/v1/projects/99/resources/transfer', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"to_project":1,"resource_id":1,"resource_type":"server"}'
          #response = requests.put('https://api.timeweb.cloud/api/v1/projects/99/resources/transfer', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/projects/99/resources/transfer');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"to_project":1,"resource_id":1,"resource_type":"server"}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"to_project\":1,\"resource_id\":1,\"resource_type\"\
          :\"server\"}`)\n\treq, err := http.NewRequest(\"PUT\", \"https://api.timeweb.cloud/api/v1/projects/99/resources/transfer\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/projects/99/resources/transfer\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"PUT\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"to_project\\\":1,\\\"resource_id\\\":1,\\\"resource_type\\\
          \":\\\"server\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Projects
  /api/v1/storages/buckets:
    get:
      tags:
      - S3-хранилище
      summary: Получение списка хранилищ аккаунта
      description: "Чтобы получить список хранилищ аккаунта, отправьте GET-запрос\
        \ на `/api/v1/storages/buckets`."
      operationId: getStorages
      responses:
        "200":
          description: Объект JSON c ключом `buckets`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_52'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/storages/buckets"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/storages/buckets', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/storages/buckets', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/storages/buckets', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/buckets');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/storages/buckets\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/storages/buckets\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - S3
    post:
      tags:
      - S3-хранилище
      summary: Создание хранилища
      description: "Чтобы создать хранилище, отправьте POST-запрос на `/api/v1/storages/buckets`."
      operationId: createStorage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/storages_buckets_body'
        required: true
      responses:
        "201":
          description: Объект JSON c ключом `bucket`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_18'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"name":"test","type":"private","preset_id":1}' \
            "https://api.timeweb.cloud/api/v1/storages/buckets"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/storages/buckets', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'name': 'test',
                  'type': 'private',
                  'preset_id': 1
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/storages/buckets',
              {
                  'name': 'test',
                  'type': 'private',
                  'preset_id': 1
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'name': 'test',
              'type': 'private',
              'preset_id': 1,
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/storages/buckets', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"name":"test","type":"private","preset_id":1}'
          #response = requests.post('https://api.timeweb.cloud/api/v1/storages/buckets', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/buckets');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"name":"test","type":"private","preset_id":1}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"name\":\"test\",\"type\":\"private\"\
          ,\"preset_id\":1}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/storages/buckets\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/storages/buckets\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\\"name\\\":\\\"test\\\",\\\"type\\\":\\\"private\\\",\\\"preset_id\\\"\
          :1}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - S3
  /api/v1/storages/buckets/{bucket_id}:
    delete:
      tags:
      - S3-хранилище
      summary: Удаление хранилища на аккаунте
      description: "Чтобы удалить хранилище, отправьте DELETE-запрос на `/api/v1/storages/buckets/{bucket_id}`."
      operationId: deleteStorage
      parameters:
      - name: bucket_id
        in: path
        description: Уникальный идентификатор хранилища.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      - name: hash
        in: query
        description: "Хеш, который совместно с кодом авторизации надо отправить дл\
          я удаления, если включено подтверждение удаления сервисов через Телеграм\
          ."
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 15095f25-aac3-4d60-a788-96cb5136f186
      - name: code
        in: query
        description: |-
          Код подтверждения, который придет к вам в Телеграм, после запроса удаления, если включено подтверждение удаления сервисов.

          При помощи API токена сервисы можно удалять без подтверждения, если параметр токена `is_able_to_delete` установлен в значение `true`
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "0000"
      responses:
        "200":
          description: Объект JSON c ключом `bucket_delete`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_58'
        "204":
          description: Хранилище успешно удалено
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/storages/buckets/1"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/storages/buckets/1', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/storages/buckets/1', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.delete('https://api.timeweb.cloud/api/v1/storages/buckets/1', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/buckets/1');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/storages/buckets/1\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/storages/buckets/1\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - S3
    patch:
      tags:
      - S3-хранилище
      summary: Изменение хранилища на аккаунте
      description: "Чтобы изменить хранилище, отправьте PATCH-запрос на `/api/v1/storages/buckets/{bucket_id}`."
      operationId: updateStorage
      parameters:
      - name: bucket_id
        in: path
        description: Уникальный идентификатор хранилища.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/buckets_bucket_id_body'
        required: true
      responses:
        "200":
          description: Объект JSON c ключом `bucket`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_18'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X PATCH \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"preset_id":1}' \
            "https://api.timeweb.cloud/api/v1/storages/buckets"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/storages/buckets', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'preset_id': 1
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud/api/v1/storages/buckets',
              {
                  'preset_id': 1
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'preset_id': 1,
          }

          response = requests.patch('https://api.timeweb.cloud/api/v1/storages/buckets', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"preset_id":1}'
          #response = requests.patch('https://api.timeweb.cloud/api/v1/storages/buckets', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/buckets');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"preset_id":1}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"preset_id\":1}`)\n\treq, err := http.NewRequest(\"\
          PATCH\", \"https://api.timeweb.cloud/api/v1/storages/buckets\", data)\n\t\
          if err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\"\
          , \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer \"\
          \ + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/storages/buckets\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\\"preset_id\\\":1}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\t\
          httpConn.getOutputStream().close();\n\n\t\tInputStream responseStream =\
          \ httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - S3
  /api/v1/presets/storages:
    get:
      tags:
      - S3-хранилище
      summary: Получение списка тарифов для хранилищ
      description: |-
        Чтобы получить список тарифов для хранилищ, отправьте GET-запрос на `/api/v1/presets/storages`.

         Тело ответа будет представлять собой объект JSON с ключом `storages_presets`.
      operationId: getStoragesPresets
      responses:
        "200":
          description: Объект JSON с ключом `storages_presets`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_59'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/presets/storages"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/presets/storages', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/presets/storages', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/presets/storages', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/presets/storages');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/presets/storages\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/presets/storages\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - S3
  /api/v1/storages/users:
    get:
      tags:
      - S3-хранилище
      summary: Получение списка пользователей хранилищ аккаунта
      description: "Чтобы получить список пользователей хранилищ аккаунта, отправь\
        те GET-запрос на `/api/v1/storages/users`."
      operationId: getStorageUsers
      responses:
        "200":
          description: Объект JSON c ключом `users`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_60'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/storages/users"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/storages/users', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/storages/users', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/storages/users', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/users');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/storages/users\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/storages/users\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - S3
  /api/v1/storages/users/{user_id}:
    patch:
      tags:
      - S3-хранилище
      summary: Изменение пароля пользователя-администратора хранилища
      description: "Чтобы изменить пароль пользователя-администратора хранилища, о\
        тправьте POST-запрос на `/api/v1/storages/users/{user_id}`."
      operationId: updateStorageUser
      parameters:
      - name: user_id
        in: path
        description: Уникальный идентификатор пользователя хранилища.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users_user_id_body'
        required: true
      responses:
        "200":
          description: Объект JSON c ключом `user`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_61'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"secret_key":"password"}' \
            "https://api.timeweb.cloud/api/v1/storages/users/1"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/storages/users/1', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'secret_key': 'password'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/storages/users/1',
              {
                  'secret_key': 'password'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'secret_key': 'password',
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/storages/users/1', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"secret_key":"password"}'
          #response = requests.post('https://api.timeweb.cloud/api/v1/storages/users/1', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/users/1');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"secret_key":"password"}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"secret_key\":\"password\"}`)\n\treq,\
          \ err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/storages/users/1\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/storages/users/1\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\\"secret_key\\\":\\\"password\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\
          \t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream\
          \ = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - S3
  /api/v1/storages/buckets/{bucket_id}/transfer-status:
    get:
      tags:
      - S3-хранилище
      summary: Получение статуса переноса хранилища от стороннего S3 в Timeweb Cloud
      description: "Чтобы получить статус переноса хранилища от стороннего S3 в Timeweb\
        \ Cloud, отправьте GET-запрос на `/api/v1/storages/buckets/{bucket_id}/transfer-status`."
      operationId: getStorageTransferStatus
      parameters:
      - name: bucket_id
        in: path
        description: Уникальный идентификатор хранилища.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      responses:
        "200":
          description: Объект JSON c ключом `transfer_status`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_62'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/storages/buckets/1051/transfer-status"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/storages/buckets/1051/transfer-status', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/storages/buckets/1051/transfer-status', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/storages/buckets/1051/transfer-status', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/buckets/1051/transfer-status');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/storages/buckets/1051/transfer-status\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/storages/buckets/1051/transfer-status\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - S3
  /api/v1/storages/transfer:
    post:
      tags:
      - S3-хранилище
      summary: Перенос хранилища от стороннего провайдера S3 в Timeweb Cloud
      description: "Чтобы перенести хранилище от стороннего провайдера S3 в Timeweb\
        \ Cloud, отправьте POST-запрос на `/api/v1/storages/transfer`."
      operationId: transferStorage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/storages_transfer_body'
        required: true
      responses:
        "204":
          description: Задание на перенос отправлено
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"access_key":"access_key","secret_key":"secret_key","location":"ru-1","path_style":true,"endpoint":"https://s3.test.ru","bucket_name":"bucket_name","new_bucket_name":"new_bucket_name"}' \
            "https://api.timeweb.cloud/api/v1/storages/transfer"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/storages/transfer', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'access_key': 'access_key',
                  'secret_key': 'secret_key',
                  'location': 'ru-1',
                  'path_style': true,
                  'endpoint': 'https://s3.test.ru',
                  'bucket_name': 'bucket_name',
                  'new_bucket_name': 'new_bucket_name'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/storages/transfer',
              {
                  'access_key': 'access_key',
                  'secret_key': 'secret_key',
                  'location': 'ru-1',
                  'path_style': true,
                  'endpoint': 'https://s3.test.ru',
                  'bucket_name': 'bucket_name',
                  'new_bucket_name': 'new_bucket_name'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'access_key': 'access_key',
              'secret_key': 'secret_key',
              'location': 'ru-1',
              'path_style': True,
              'endpoint': 'https://s3.test.ru',
              'bucket_name': 'bucket_name',
              'new_bucket_name': 'new_bucket_name',
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/storages/transfer', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"access_key":"access_key","secret_key":"secret_key","location":"ru-1","path_style":true,"endpoint":"https://s3.test.ru","bucket_name":"bucket_name","new_bucket_name":"new_bucket_name"}'
          #response = requests.post('https://api.timeweb.cloud/api/v1/storages/transfer', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/transfer');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"access_key":"access_key","secret_key":"secret_key","location":"ru-1","path_style":true,"endpoint":"https://s3.test.ru","bucket_name":"bucket_name","new_bucket_name":"new_bucket_name"}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"access_key\":\"access_key\",\"secret_key\"\
          :\"secret_key\",\"location\":\"ru-1\",\"path_style\":true,\"endpoint\":\"\
          https://s3.test.ru\",\"bucket_name\":\"bucket_name\",\"new_bucket_name\"\
          :\"new_bucket_name\"}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/storages/transfer\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/storages/transfer\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\\"access_key\\\":\\\"access_key\\\",\\\"secret_key\\\":\\\"secret_key\\\
          \",\\\"location\\\":\\\"ru-1\\\",\\\"path_style\\\":true,\\\"endpoint\\\"\
          :\\\"https://s3.test.ru\\\",\\\"bucket_name\\\":\\\"bucket_name\\\",\\\"\
          new_bucket_name\\\":\\\"new_bucket_name\\\"}\");\n\t\twriter.flush();\n\t\
          \twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - S3
  /api/v1/storages/buckets/{bucket_id}/subdomains:
    get:
      tags:
      - S3-хранилище
      summary: Получение списка поддоменов хранилища
      description: "Чтобы получить список поддоменов хранилища, отправьте GET-запр\
        ос на `/api/v1/storages/buckets/{bucket_id}/subdomains`."
      operationId: getStorageSubdomains
      parameters:
      - name: bucket_id
        in: path
        description: Уникальный идентификатор хранилища.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      responses:
        "200":
          description: Объект JSON c ключом `subdomains`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_63'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - S3
    post:
      tags:
      - S3-хранилище
      summary: Добавление поддоменов для хранилища
      description: "Чтобы добавить поддомены для хранилища, отправьте POST-запрос\
        \ на `/api/v1/storages/buckets/{bucket_id}/subdomains`."
      operationId: addStorageSubdomains
      parameters:
      - name: bucket_id
        in: path
        description: Уникальный идентификатор хранилища.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bucket_id_subdomains_body'
        required: true
      responses:
        "200":
          description: Объект JSON c ключом `subdomains`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_64'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"subdomains":["test.example.com"]}' \
            "https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'subdomains': [
                      'test.example.com'
                  ]
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains',
              {
                  'subdomains': [
                      'test.example.com'
                  ]
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'subdomains': [
                  'test.example.com',
              ],
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"subdomains":["test.example.com"]}'
          #response = requests.post('https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"subdomains":["test.example.com"]}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"subdomains\":[\"test.example.com\"]}`)\n\
          \treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"subdomains\\\":[\\\"test.example.com\\\"]}\");\n\
          \t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - S3
    delete:
      tags:
      - S3-хранилище
      summary: Удаление поддоменов хранилища
      description: "Чтобы удалить поддомены хранилища, отправьте DELETE-запрос на\
        \ `/api/v1/storages/buckets/{bucket_id}/subdomains`."
      operationId: deleteStorageSubdomains
      parameters:
      - name: bucket_id
        in: path
        description: Уникальный идентификатор хранилища.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bucket_id_subdomains_body_1'
        required: true
      responses:
        "200":
          description: Объект JSON c ключом `subdomains`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_64'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"subdomains":["test.example.com"]}' \
            "https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'subdomains': [
                      'test.example.com'
                  ]
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              },
              data: {
                  'subdomains': [
                      'test.example.com'
                  ]
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'subdomains': [
                  'test.example.com',
              ],
          }

          response = requests.delete('https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"subdomains":["test.example.com"]}'
          #response = requests.delete('https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"subdomains":["test.example.com"]}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"subdomains\":[\"test.example.com\"]}`)\n\
          \treq, err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/storages/buckets/1051/subdomains\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"subdomains\\\":[\\\"test.example.com\\\"]}\");\n\
          \t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - S3
  /api/v1/storages/buckets/{bucket_id}/object-manager/list:
    get:
      tags:
      - S3-хранилище
      summary: Получение списка файлов в хранилище по префиксу
      description: "Чтобы получить список файлов в хранилище по префиксу, отправьт\
        е GET-запрос на `/api/v1/storages/buckets/{bucket_id}/object-manager/list`."
      operationId: getStorageFilesList
      parameters:
      - name: bucket_id
        in: path
        description: Уникальный идентификатор хранилища.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      - name: prefix
        in: query
        description: Префикс для поиска файла.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: example
      - name: is_multipart
        in: query
        description: "Это логическое значение, которое используется для обозначени\
          я multipart-загрузки."
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          example: true
      responses:
        "200":
          description: Объект JSON c ключом `files`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_65'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/list"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/list', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/list', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/list', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/list');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/list\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/list\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - S3
  /api/v1/storages/buckets/{bucket_id}/object-manager/rename:
    post:
      tags:
      - S3-хранилище
      summary: Переименование файла/директории в хранилище
      description: "Чтобы переименовать файл/директорию в хранилище, отправьте POST-з\
        апрос на `/api/v1/storages/buckets/{bucket_id}/object-manager/rename`."
      operationId: renameStorageFile
      parameters:
      - name: bucket_id
        in: path
        description: Уникальный идентификатор хранилища.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/objectmanager_rename_body'
        required: true
      responses:
        "204":
          description: Файл успешно переименован
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"new_filename":"new_name","old_filename":"old_name"}' \
            "https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/rename"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/rename', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'new_filename': 'new_name',
                  'old_filename': 'old_name'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/rename',
              {
                  'new_filename': 'new_name',
                  'old_filename': 'old_name'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'new_filename': 'new_name',
              'old_filename': 'old_name',
          }

          response = requests.post(
              'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/rename',
              headers=headers,
              json=json_data,
          )

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"new_filename":"new_name","old_filename":"old_name"}'
          #response = requests.post(
          #    'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/rename',
          #    headers=headers,
          #    data=data,
          #)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/rename');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"new_filename":"new_name","old_filename":"old_name"}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"new_filename\":\"new_name\",\"old_filename\"\
          :\"old_name\"}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/rename\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/rename\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"new_filename\\\":\\\"new_name\\\",\\\"old_filename\\\
          \":\\\"old_name\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\t\
          httpConn.getOutputStream().close();\n\n\t\tInputStream responseStream =\
          \ httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - S3
  /api/v1/storages/buckets/{bucket_id}/object-manager/remove:
    delete:
      tags:
      - S3-хранилище
      summary: Удаление файла/директории в хранилище
      description: "Чтобы удалить файл или директорию с вложениями, отправьте DELETE-з\
        апрос на `/api/v1/storages/buckets/{bucket_id}/object-manager/remove`."
      operationId: deleteStorageFile
      parameters:
      - name: bucket_id
        in: path
        description: Уникальный идентификатор хранилища.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      - name: is_multipart
        in: query
        description: "Это логическое значение, которое используется для обозначени\
          я multipart-загрузки."
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          example: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/objectmanager_remove_body'
        required: true
      responses:
        "204":
          description: Задание на удаление отправлено
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"source":["test1/test2"]}' \
            "https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/remove"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/remove', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'source': [
                      'test1/test2'
                  ]
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/remove', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              },
              data: {
                  'source': [
                      'test1/test2'
                  ]
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'source': [
                  'test1/test2',
              ],
          }

          response = requests.delete(
              'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/remove',
              headers=headers,
              json=json_data,
          )

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"source":["test1/test2"]}'
          #response = requests.delete(
          #    'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/remove',
          #    headers=headers,
          #    data=data,
          #)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/remove');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"source":["test1/test2"]}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"source\":[\"test1/test2\"]}`)\n\treq,\
          \ err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/remove\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/remove\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"source\\\":[\\\"test1/test2\\\"]}\");\n\t\twriter.flush();\n\
          \t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - S3
  /api/v1/storages/buckets/{bucket_id}/object-manager/copy:
    post:
      tags:
      - S3-хранилище
      summary: Копирование файла/директории в хранилище
      description: "Чтобы скопировать файла или директорию с вложениями, отправьте\
        \ POST-запрос на `/api/v1/storages/buckets/{bucket_id}/object-manager/copy`."
      operationId: copyStorageFile
      parameters:
      - name: bucket_id
        in: path
        description: Уникальный идентификатор хранилища.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/objectmanager_copy_body'
        required: true
      responses:
        "204":
          description: Задание на копирование отправлено
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"destination":"new_path","source":["test1/test2"]}' \
            "https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/copy"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/copy', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'destination': 'new_path',
                  'source': [
                      'test1/test2'
                  ]
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/copy',
              {
                  'destination': 'new_path',
                  'source': [
                      'test1/test2'
                  ]
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'destination': 'new_path',
              'source': [
                  'test1/test2',
              ],
          }

          response = requests.post(
              'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/copy',
              headers=headers,
              json=json_data,
          )

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"destination":"new_path","source":["test1/test2"]}'
          #response = requests.post(
          #    'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/copy',
          #    headers=headers,
          #    data=data,
          #)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/copy');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"destination":"new_path","source":["test1/test2"]}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"destination\":\"new_path\",\"source\"\
          :[\"test1/test2\"]}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/copy\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/copy\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"destination\\\":\\\"new_path\\\",\\\"source\\\"\
          :[\\\"test1/test2\\\"]}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\
          \thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream\
          \ = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - S3
  /api/v1/storages/buckets/{bucket_id}/object-manager/upload:
    post:
      tags:
      - S3-хранилище
      summary: Загрузка файлов в хранилище
      description: "Чтобы загрузить файлы в хранилище, отправьте POST-запрос на `/api/v1/storages/buckets/{bucket_id}/object-manager/upload`."
      operationId: uploadFileToStorage
      parameters:
      - name: bucket_id
        in: path
        description: Уникальный идентификатор хранилища.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      - name: path
        in: query
        description: Путь до директории в хранилище
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: test1/tes2
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/objectmanager_upload_body'
        required: true
      responses:
        "204":
          description: Файл успешно загружен
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: multipart/form-data" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -F "files=@path/to/local/file.jpg" \
            "https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/upload"
      - lang: JavaScript
        source: |
          const form = new FormData();
          form.append('files', File(['<data goes here>'], 'path/to/local/file.jpg'));

          fetch('https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/upload', {
              method: 'POST',
              headers: {
                  'Content-Type': 'multipart/form-data',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: form
          });
      - lang: Node
        source: |
          const axios = require('axios');
          const FormData = require('form-data');
          const fs = require('fs');

          const form = new FormData();
          form.append('files', fs.readFileSync('path/to/local/file.jpg'), 'path/to/local/file.jpg');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/upload',
              form,
              {
                  headers: {
                      ...form.getHeaders(),
                      'Content-Type': 'multipart/form-data',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              # requests won't add a boundary if this header is set when you pass files=
              # 'Content-Type': 'multipart/form-data',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          files = {
              'files': open('path/to/local/file.jpg', 'rb'),
          }

          response = requests.post(
              'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/upload',
              headers=headers,
              files=files,
          )
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/upload');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: multipart/form-data',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, [
              'files' => new CURLFile('path/to/local/file.jpg'),
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"\
          log\"\n\t\"mime/multipart\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\
          \n)\n\nfunc main() {\n\tform := new(bytes.Buffer)\n\twriter := multipart.NewWriter(form)\n\
          \tfw, err := writer.CreateFormFile(\"path/to/local/file.jpg\", filepath.Base(\"\
          path/to/local/file.jpg\"))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\
          \tfd, err := os.Open(\"path/to/local/file.jpg\")\n\tif err != nil {\n\t\t\
          log.Fatal(err)\n\t}\n\tdefer fd.Close()\n\t_, err = io.Copy(fw, fd)\n\t\
          if err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\twriter.Close()\n\n\tclient\
          \ := &http.Client{}\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/upload\"\
          , form)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Authorization\", \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\treq.Header.Set(\"\
          Content-Type\", writer.FormDataContentType())\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/upload\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"multipart/form-data\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - S3
  /api/v1/storages/buckets/{bucket_id}/object-manager/mkdir:
    post:
      tags:
      - S3-хранилище
      summary: Создание директории в хранилище
      description: "Чтобы создать директорию в хранилище, отправьте POST-запрос на\
        \ `/api/v1/storages/buckets/{bucket_id}/object-manager/mkdir`."
      operationId: createFolderInStorage
      parameters:
      - name: bucket_id
        in: path
        description: Уникальный идентификатор хранилища.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/objectmanager_mkdir_body'
        required: true
      responses:
        "201":
          description: Директория успешно создана
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"dir_name":"dir"}' \
            "https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/mkdir"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/mkdir', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'dir_name': 'dir'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/mkdir',
              {
                  'dir_name': 'dir'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'dir_name': 'dir',
          }

          response = requests.post(
              'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/mkdir',
              headers=headers,
              json=json_data,
          )

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"dir_name":"dir"}'
          #response = requests.post(
          #    'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/mkdir',
          #    headers=headers,
          #    data=data,
          #)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/mkdir');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"dir_name":"dir"}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"dir_name\":\"dir\"}`)\n\treq, err :=\
          \ http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/mkdir\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/storages/buckets/1051/object-manager/mkdir\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"dir_name\\\":\\\"dir\\\"}\");\n\t\twriter.flush();\n\
          \t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - S3
  /api/v1/storages/certificates/generate:
    post:
      tags:
      - S3-хранилище
      summary: Добавление сертификата для поддомена хранилища
      description: "Чтобы добавить сертификат для поддомена хранилища, отправьте POST-з\
        апрос на `/api/v1/storages/certificates/generate`."
      operationId: addStorageSubdomainCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/certificates_generate_body'
        required: true
      responses:
        "204":
          description: Сертификат добавлен
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"subdomain":"test.example.com"}' \
            "https://api.timeweb.cloud/api/v1/storages/certificates/generate"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/storages/certificates/generate', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'subdomain': 'test.example.com'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/storages/certificates/generate',
              {
                  'subdomain': 'test.example.com'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'subdomain': 'test.example.com',
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/storages/certificates/generate', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"subdomain":"test.example.com"}'
          #response = requests.post('https://api.timeweb.cloud/api/v1/storages/certificates/generate', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/storages/certificates/generate');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"subdomain":"test.example.com"}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"subdomain\":\"test.example.com\"}`)\n\
          \treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/storages/certificates/generate\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/storages/certificates/generate\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"subdomain\\\":\\\"test.example.com\\\"}\");\n\t\t\
          writer.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - S3
  /api/v1/auth/api-keys:
    get:
      tags:
      - Токены API
      summary: Получение списка выпущенных токенов
      description: "Чтобы получить список выпущенных токенов, отправьте GET-запрос\
        \ на `/api/v1/auth/api-keys`."
      operationId: getTokens
      responses:
        "200":
          description: Объект JSON c ключом `api_keys`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_66'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/auth/api-keys"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/auth/api-keys', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/auth/api-keys', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/auth/api-keys', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/auth/api-keys');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/auth/api-keys\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/auth/api-keys\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - API keys
    post:
      tags:
      - Токены API
      summary: Создание токена
      description: |-
        Чтобы создать токен, отправьте POST-запрос на `/api/v1/auth/api-keys`, задав необходимые атрибуты.

        Токен будет создан с использованием предоставленной информации. Тело ответа будет содержать объект JSON с информацией о созданном токене.
      operationId: createToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-api-key'
        required: true
      responses:
        "201":
          description: Ответ будет представлять собой объект JSON c ключом `api_key`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_19'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"name":"example","expire":"2023-12-20T12:03:53.755Z"}' \
            "https://api.timeweb.cloud/api/v1/auth/api-keys"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/auth/api-keys', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'name': 'example',
                  'expire': '2023-12-20T12:03:53.755Z'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/auth/api-keys',
              {
                  'name': 'example',
                  'expire': '2023-12-20T12:03:53.755Z'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'name': 'example',
              'expire': '2023-12-20T12:03:53.755Z',
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/auth/api-keys', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"name":"example","expire":"2023-12-20T12:03:53.755Z"}'
          #response = requests.post('https://api.timeweb.cloud/api/v1/auth/api-keys', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/auth/api-keys');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"name":"example","expire":"2023-12-20T12:03:53.755Z"}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"name\":\"example\",\"expire\":\"2023-12-20T12:03:53.755Z\"\
          }`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/auth/api-keys\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/auth/api-keys\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\\"name\\\":\\\"example\\\",\\\"expire\\\":\\\"2023-12-20T12:03:53.755Z\\\
          \"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - API keys
  /api/v1/auth/api-keys/{token_id}:
    put:
      tags:
      - Токены API
      summary: Перевыпустить токен
      description: "Чтобы перевыпустить токен, отправьте PUT-запрос на `/api/v1/auth/api-keys/{token_id}`,\
        \ задав необходимые атрибуты."
      operationId: reissueToken
      parameters:
      - name: token_id
        in: path
        description: Идентификатор токена
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/refresh-api-key'
        required: true
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `api_key`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_19'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X PUT \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b', {
              method: 'PUT',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.put(
              'https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b',
              '',
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.put(
              'https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b',
              headers=headers,
          )
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"PUT\", \"https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"PUT\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - API keys
    delete:
      tags:
      - Токены API
      summary: Удалить токен
      description: "Чтобы удалить токен, отправьте DELETE-запрос на `/api/v1/auth/api-keys/{token_id}`."
      operationId: deleteToken
      parameters:
      - name: token_id
        in: path
        description: Идентификатор токена
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      responses:
        "204":
          description: Токен успешно удален.
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.delete(
              'https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b',
              headers=headers,
          )
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - API keys
    patch:
      tags:
      - Токены API
      summary: Изменить токен
      description: "Чтобы изменить токен, отправьте PATCH-запрос на `/api/v1/auth/api-keys/{token_id}`,\
        \ задав необходимые атрибуты."
      operationId: updateToken
      parameters:
      - name: token_id
        in: path
        description: Идентификатор токена
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/edit-api-key'
        required: true
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `api_key`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_67'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X PATCH \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"name":"example","is_able_to_delete":true}' \
            "https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'name': 'example',
                  'is_able_to_delete': true
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b',
              {
                  'name': 'example',
                  'is_able_to_delete': true
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'name': 'example',
              'is_able_to_delete': True,
          }

          response = requests.patch(
              'https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b',
              headers=headers,
              json=json_data,
          )

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"name":"example","is_able_to_delete":true}'
          #response = requests.patch(
          #    'https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b',
          #    headers=headers,
          #    data=data,
          #)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"name":"example","is_able_to_delete":true}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"name\":\"example\",\"is_able_to_delete\"\
          :true}`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/auth/api-keys/913a3a06-1eb9-4e9c-bc63-6ca6944e883b\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"name\\\":\\\"example\\\",\\\"is_able_to_delete\\\
          \":true}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - API keys
  /api/v1/auth/access:
    get:
      tags:
      - Аккаунт
      summary: Получить информацию о ограничениях авторизации пользователя
      description: |-
        Чтобы получить информацию о ограничениях авторизации пользователя, отправьте GET-запрос на `/api/v1/auth/access`.

         Тело ответа будет представлять собой объект JSON с ключами `is_ip_restrictions_enabled`, `is_country_restrictions_enabled` и `white_list`.
      operationId: getAuthAccessSettings
      responses:
        "200":
          description: "Объект JSON c ключами `is_ip_restrictions_enabled`, `is_country_restrictions_enabled`\
            \ и `white_list`"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_68'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/auth/access"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/auth/access', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/auth/access', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/auth/access', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/auth/access');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/auth/access\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/auth/access\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Account
  /api/v1/auth/access/countries/enabled:
    post:
      tags:
      - Аккаунт
      summary: Включение/отключение ограничений по стране
      description: "Чтобы включить/отключить ограничения по стране, отправьте POST-з\
        апрос в `api/v1/access/countries/enabled`, передав в теле запроса параметр\
        \ `is_enabled`"
      operationId: updateAuthRestrictionsByCountries
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/countries_enabled_body'
        required: true
      responses:
        "204":
          description: Ограничения по странам успешно изменены
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{
            "is_enabled": true
          }' "https://api.timeweb.cloud/api/v1/access/countries/enabled"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/access/countries/enabled', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{\n  "is_enabled": true\n}',
              body: JSON.stringify({
                  'is_enabled': true
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/access/countries/enabled',
              // '{\n  "is_enabled": true\n}',
              {
                  'is_enabled': true
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'is_enabled': True,
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/access/countries/enabled', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{\n  "is_enabled": true\n}'
          #response = requests.post('https://api.timeweb.cloud/api/v1/access/countries/enabled', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/access/countries/enabled');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"is_enabled\": true\n}");

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\n  \"is_enabled\": true\n}`)\n\treq, err\
          \ := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/access/countries/enabled\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/access/countries/enabled\");\n\t\
          \tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\n  \\\"is_enabled\\\": true\\n}\");\n\t\twriter.flush();\n\
          \t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Account
  /api/v1/auth/access/countries:
    get:
      tags:
      - Аккаунт
      summary: Получение списка стран
      description: |-
        Чтобы получить список стран, отправьте GET-запрос на `/api/v1/auth/access/countries`.

         Тело ответа будет представлять собой объект JSON с ключом `countries`.
      operationId: getCountries
      responses:
        "200":
          description: Объект JSON c ключом `countries`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_69'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/auth/access/countries"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/auth/access/countries', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/auth/access/countries', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/auth/access/countries', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/auth/access/countries');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/auth/access/countries\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/auth/access/countries\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Account
    post:
      tags:
      - Аккаунт
      summary: Добавление стран в список разрешенных
      description: "Чтобы добавить страны в список разрешенных, отправьте POST-зап\
        рос в `api/v1/access/countries`, передав в теле запроса параметр `countries`\
        \ со списком стран."
      operationId: addCountriesToAllowedList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/access_countries_body'
        required: true
      responses:
        "201":
          description: Объект JSON c ключом `countries`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_20'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{
            "countries": ["RU"]
          }' "https://api.timeweb.cloud/api/v1/access/countries"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/access/countries', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{\n  "countries": ["RU"]\n}',
              body: JSON.stringify({
                  'countries': [
                      'RU'
                  ]
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/access/countries',
              // '{\n  "countries": ["RU"]\n}',
              {
                  'countries': [
                      'RU'
                  ]
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'countries': [
                  'RU',
              ],
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/access/countries', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{\n  "countries": ["RU"]\n}'
          #response = requests.post('https://api.timeweb.cloud/api/v1/access/countries', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/access/countries');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"countries\": [\"RU\"]\n}");

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\n  \"countries\": [\"RU\"]\n}`)\n\treq,\
          \ err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/access/countries\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/access/countries\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\n  \\\"countries\\\": [\\\"RU\\\"]\\n}\");\n\t\twriter.flush();\n\t\t\
          writer.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Account
    delete:
      tags:
      - Аккаунт
      summary: Удаление стран из списка разрешенных
      description: "Чтобы удалить страны из списка разрешенных, отправьте DELETE-з\
        апрос в `api/v1/access/countries`, передав в теле запроса параметр `countries`\
        \ со списком стран."
      operationId: deleteCountriesFromAllowedList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/access_countries_body_1'
        required: true
      responses:
        "200":
          description: Объект JSON c ключом `countries`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_70'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{
            "countries": ["RU"]
          }' "https://api.timeweb.cloud/api/v1/access/countries"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/access/countries', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{\n  "countries": ["RU"]\n}',
              body: JSON.stringify({
                  'countries': [
                      'RU'
                  ]
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/access/countries', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              },
              // data: '{\n  "countries": ["RU"]\n}',
              data: {
                  'countries': [
                      'RU'
                  ]
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'countries': [
                  'RU',
              ],
          }

          response = requests.delete('https://api.timeweb.cloud/api/v1/access/countries', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{\n  "countries": ["RU"]\n}'
          #response = requests.delete('https://api.timeweb.cloud/api/v1/access/countries', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/access/countries');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"countries\": [\"RU\"]\n}");

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\n  \"countries\": [\"RU\"]\n}`)\n\treq,\
          \ err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/access/countries\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/access/countries\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          DELETE\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\n  \\\"countries\\\": [\\\"RU\\\"]\\n}\");\n\t\twriter.flush();\n\t\t\
          writer.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Account
  /api/v1/auth/access/ips/enabled:
    post:
      tags:
      - Аккаунт
      summary: Включение/отключение ограничений по IP-адресу
      description: "Чтобы включить/отключить ограничения по IP-адресу, отправьте POST-з\
        апрос в `api/v1/access/ips/enabled`, передав в теле запроса параметр `is_enabled`"
      operationId: updateAuthRestrictionsByIP
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ips_enabled_body'
        required: true
      responses:
        "204":
          description: Ограничения по IP-адресу успешно изменены
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{
            "is_enabled": true
          }' "https://api.timeweb.cloud/api/v1/access/ips/enabled"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/access/ips/enabled', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{\n  "is_enabled": true\n}',
              body: JSON.stringify({
                  'is_enabled': true
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/access/ips/enabled',
              // '{\n  "is_enabled": true\n}',
              {
                  'is_enabled': true
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'is_enabled': True,
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/access/ips/enabled', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{\n  "is_enabled": true\n}'
          #response = requests.post('https://api.timeweb.cloud/api/v1/access/ips/enabled', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/access/ips/enabled');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"is_enabled\": true\n}");

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\n  \"is_enabled\": true\n}`)\n\treq, err\
          \ := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/access/ips/enabled\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/access/ips/enabled\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\n  \\\"is_enabled\\\": true\\n}\");\n\t\twriter.flush();\n\t\twriter.close();\n\
          \t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream\
          \ = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Account
  /api/v1/auth/access/ips:
    post:
      tags:
      - Аккаунт
      summary: Добавление IP-адресов в список разрешенных
      description: "Чтобы добавить IP-адреса в список разрешенных, отправьте POST-з\
        апрос в `api/v1/access/ips`, передав в теле запроса параметр `ips` со спис\
        ком IP-адресов."
      operationId: addIPsToAllowedList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/access_ips_body'
        required: true
      responses:
        "201":
          description: Объект JSON c ключом `ips`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_21'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{
            "ips": ["123.231.125.128"]
          }' "https://api.timeweb.cloud/api/v1/access/ips"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/access/ips', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{\n  "ips": ["123.231.125.128"]\n}',
              body: JSON.stringify({
                  'ips': [
                      '123.231.125.128'
                  ]
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/access/ips',
              // '{\n  "ips": ["123.231.125.128"]\n}',
              {
                  'ips': [
                      '123.231.125.128'
                  ]
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'ips': [
                  '123.231.125.128',
              ],
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/access/ips', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{\n  "ips": ["123.231.125.128"]\n}'
          #response = requests.post('https://api.timeweb.cloud/api/v1/access/ips', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/access/ips');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"ips\": [\"123.231.125.128\"]\n}");

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\n  \"ips\": [\"123.231.125.128\"]\n}`)\n\
          \treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/access/ips\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/access/ips\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\n  \\\"ips\\\": [\\\"123.231.125.128\\\"]\\n}\");\n\t\twriter.flush();\n\
          \t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Account
    delete:
      tags:
      - Аккаунт
      summary: Удаление IP-адресов из списка разрешенных
      description: "Чтобы удалить IP-адреса из списка разрешенных, отправьте DELETE-з\
        апрос в `api/v1/access/ips`, передав в теле запроса параметр `ips` со спис\
        ком IP-адресов."
      operationId: deleteIPsFromAllowedList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/access_ips_body_1'
        required: true
      responses:
        "200":
          description: Объект JSON c ключом `ips`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_71'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{
            "ips": ["123.231.125.128"]
          }' "https://api.timeweb.cloud/api/v1/access/ips"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/access/ips', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{\n  "ips": ["123.231.125.128"]\n}',
              body: JSON.stringify({
                  'ips': [
                      '123.231.125.128'
                  ]
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/access/ips', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              },
              // data: '{\n  "ips": ["123.231.125.128"]\n}',
              data: {
                  'ips': [
                      '123.231.125.128'
                  ]
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'ips': [
                  '123.231.125.128',
              ],
          }

          response = requests.delete('https://api.timeweb.cloud/api/v1/access/ips', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{\n  "ips": ["123.231.125.128"]\n}'
          #response = requests.delete('https://api.timeweb.cloud/api/v1/access/ips', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/access/ips');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"ips\": [\"123.231.125.128\"]\n}");

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\n  \"ips\": [\"123.231.125.128\"]\n}`)\n\
          \treq, err := http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/access/ips\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/access/ips\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          DELETE\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\n  \\\"ips\\\": [\\\"123.231.125.128\\\"]\\n}\");\n\t\twriter.flush();\n\
          \t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Account
  /api/v1/mail:
    get:
      tags:
      - Почта
      summary: Получение списка почтовых ящиков аккаунта
      description: "Чтобы получить список почтовых ящиков аккаунта, отправьте GET-з\
        апрос на `/api/v1/mail`."
      operationId: getMailboxes
      parameters:
      - name: limit
        in: query
        description: "Обозначает количество записей, которое необходимо вернуть."
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 100
      - name: offset
        in: query
        description: Указывает на смещение относительно начала списка.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      - name: search
        in: query
        description: Поиск почтового ящика по названию
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `mailboxes`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_72'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/mail"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/mail', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/mail', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/mail', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/mail');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/mail\", nil)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\"\
          , \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer \"\
          \ + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/mail\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Mail
  /api/v1/mail/quota:
    get:
      tags:
      - Почта
      summary: Получение квоты почты аккаунта
      description: "Чтобы получить квоту почты аккаунта, отправьте GET-запрос на `/api/v1/mail/quota`."
      operationId: getMailQuota
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `quota`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_73'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/mail/quota"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/mail/quota', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/mail/quota', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/mail/quota', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/mail/quota');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/mail/quota\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/mail/quota\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Mail
    patch:
      tags:
      - Почта
      summary: Изменение квоты почты аккаунта
      description: "Чтобы получить инфомацию по квоте почты аккаунта, отправьте GET-з\
        апрос на `/api/v1/mail/quota`."
      operationId: updateMailQuota
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mail_quota_body'
        required: true
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `quota`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_73'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X PATCH \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"total": 1024}' \
            "https://api.timeweb.cloud/api/v1/mail/quota"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/mail/quota', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{"total": 1024}',
              body: JSON.stringify({
                  'total': 1024
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud/api/v1/mail/quota',
              // '{"total": 1024}',
              {
                  'total': 1024
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              # Already added when you pass json=
              # 'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'total': 1024,
          }

          response = requests.patch('https://api.timeweb.cloud/api/v1/mail/quota', headers=headers, json=json_data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/mail/quota');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"total": 1024}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"total\": 1024}`)\n\treq, err := http.NewRequest(\"\
          PATCH\", \"https://api.timeweb.cloud/api/v1/mail/quota\", data)\n\tif err\
          \ != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\",\
          \ \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer \"\
          \ + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/mail/quota\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\\"total\\\": 1024}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\t\
          httpConn.getOutputStream().close();\n\n\t\tInputStream responseStream =\
          \ httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Mail
  /api/v1/mail/domains/{domain}:
    get:
      tags:
      - Почта
      summary: Получение списка почтовых ящиков домена
      description: "Чтобы получить список почтовых ящиков домена, отправьте GET-за\
        прос на `/api/v1/mail/domains/{domain}`."
      operationId: getDomainMailboxes
      parameters:
      - name: domain
        in: path
        description: Полное имя домена
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: somedomain.ru
      - name: limit
        in: query
        description: "Обозначает количество записей, которое необходимо вернуть."
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 100
      - name: offset
        in: query
        description: Указывает на смещение относительно начала списка.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      - name: search
        in: query
        description: Поиск почтового ящика по названию
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `mailboxes`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_72'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/mail/domains/{domain}"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/mail/domains/{domain}', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/mail/domains/{domain}', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/mail/domains/{domain}', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/mail/domains/{domain}');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/mail/domains/{domain}\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/mail/domains/{domain}\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Mail
    post:
      tags:
      - Почта
      summary: Создание почтового ящика
      description: "Чтобы создать почтовый ящик, отправьте POST-запрос на `/api/v1/mail/domains/{domain}`."
      operationId: createDomainMailbox
      parameters:
      - name: domain
        in: path
        description: Полное имя домена
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: somedomain.ru
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/domains_domain_body'
        required: true
      responses:
        "201":
          description: Ответ будет представлять собой объект JSON c ключом `mailbox`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_22'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"mailbox": "mail", "password": "zHas2-"}' \
            "https://api.timeweb.cloud/api/v1/mail/domains/{domain}"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/mail/domains/{domain}', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{"mailbox": "mail", "password": "zHas2-"}',
              body: JSON.stringify({
                  'mailbox': 'mail',
                  'password': 'zHas2-'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/mail/domains/{domain}',
              // '{"mailbox": "mail", "password": "zHas2-"}',
              {
                  'mailbox': 'mail',
                  'password': 'zHas2-'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              # Already added when you pass json=
              # 'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'mailbox': 'mail',
              'password': 'zHas2-',
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/mail/domains/{domain}', headers=headers, json=json_data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/mail/domains/{domain}');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"mailbox": "mail", "password": "zHas2-"}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"mailbox\": \"mail\", \"password\": \"\
          zHas2-\"}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/mail/domains/{domain}\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/mail/domains/{domain}\");\n\t\t\
          HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"mailbox\\\": \\\"mail\\\", \\\"password\\\": \\\"\
          zHas2-\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Mail
  /api/v1/mail/domains/{domain}/info:
    get:
      tags:
      - Почта
      summary: Получение почтовой информации о домене
      description: "Чтобы получить почтовую информацию о домене, отправьте GET-зап\
        рос на `/api/v1/mail/domains/{domain}/info`."
      operationId: getDomainMailInfo
      parameters:
      - name: domain
        in: path
        description: Полное имя домена
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: somedomain.ru
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `domain_info`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_74'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/mail/domains/{domain}/info"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/mail/domains/{domain}/info', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/mail/domains/{domain}/info', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/mail/domains/{domain}/info', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/mail/domains/{domain}/info');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/mail/domains/{domain}/info\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/mail/domains/{domain}/info\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Mail
    patch:
      tags:
      - Почта
      summary: Изменение почтовой информации о домене
      description: "Чтобы изменить почтовую информацию о домене, отправьте PATCH-з\
        апрос на `/api/v1/mail/domains/{domain}/info`."
      operationId: updateDomainMailInfo
      parameters:
      - name: domain
        in: path
        description: Полное имя домена
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: somedomain.ru
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/domain_info_body'
        required: true
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `domain_info`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_74'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X PATCH \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"email": "test@timeweb.ru"}' \
            "https://api.timeweb.cloud/api/v1/mail/domains/{domain}/info"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/mail/domains/{domain}/info', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{"email": "test@timeweb.ru"}',
              body: JSON.stringify({
                  'email': 'test@timeweb.ru'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud/api/v1/mail/domains/{domain}/info',
              // '{"email": "test@timeweb.ru"}',
              {
                  'email': 'test@timeweb.ru'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              # Already added when you pass json=
              # 'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'email': 'test@timeweb.ru',
          }

          response = requests.patch('https://api.timeweb.cloud/api/v1/mail/domains/{domain}/info', headers=headers, json=json_data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/mail/domains/{domain}/info');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"email": "test@timeweb.ru"}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"email\": \"test@timeweb.ru\"}`)\n\treq,\
          \ err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/mail/domains/{domain}/info\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/mail/domains/{domain}/info\");\n\
          \t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"email\\\": \\\"test@timeweb.ru\\\"}\");\n\t\twriter.flush();\n\
          \t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Mail
  /api/v1/mail/domains/{domain}/mailboxes/{mailbox}:
    get:
      tags:
      - Почта
      summary: Получение почтового ящика
      description: "Чтобы получить почтовый ящик, отправьте GET-запрос на `/api/v1/mail/domains/{domain}/mailboxes/{mailbox}`."
      operationId: getMailbox
      parameters:
      - name: domain
        in: path
        description: Полное имя домена
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: somedomain.ru
      - name: mailbox
        in: path
        description: Название почтового ящика
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: mailbox
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `mailbox`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_22'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Mail
    delete:
      tags:
      - Почта
      summary: Удаление почтового ящика
      description: "Чтобы удалить почтовый ящик, отправьте DELETE-запрос на `/api/v1/mail/domains/{domain}/mailboxes/{mailbox}`."
      operationId: deleteMailbox
      parameters:
      - name: domain
        in: path
        description: Полное имя домена
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: somedomain.ru
      - name: mailbox
        in: path
        description: Название почтового ящика
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: mailbox
      responses:
        "204":
          description: Успешное удаление почтового ящика
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X PATCH \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
           "https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}',
              '',
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.patch('https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Mail
    patch:
      tags:
      - Почта
      summary: Изменение почтового ящика
      description: "Чтобы изменить почтовый ящик, отправьте PATCH-запрос на `/api/v1/mail/domains/{domain}/mailboxes/{mailbox}`."
      operationId: updateMailbox
      parameters:
      - name: domain
        in: path
        description: Полное имя домена
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: somedomain.ru
      - name: mailbox
        in: path
        description: Название почтового ящика
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: mailbox
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-mailbox'
        required: true
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `mailbox`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_22'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X PATCH \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"comment": "new comment", \
           "password": "new password", }' \
            "https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: '{"comment": "new comment", \\\n "password": "new password", }'
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}',
              '{"comment": "new comment", \\\n "password": "new password", }',
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          data = '{"comment": "new comment", \\\n "password": "new password", }'

          response = requests.patch(
              'https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}',
              headers=headers,
              data=data,
          )
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, "{\"comment\": \"new comment\", \\\n \"password\": \"new password\", }");

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"comment\": \"new comment\", \\\n \"password\"\
          : \"new password\", }`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/mail/domains/{domain}/mailboxes/{mailbox}\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"comment\\\": \\\"new comment\\\", \\\\\\n \\\"password\\\
          \": \\\"new password\\\", }\");\n\t\twriter.flush();\n\t\twriter.close();\n\
          \t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream\
          \ = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Mail
  /api/v1/domains:
    get:
      tags:
      - Домены
      summary: Получение списка всех доменов
      description: |-
        Чтобы получить список всех доменов на вашем аккаунте, отправьте GET-запрос на `/api/v1/domains`.

         Тело ответа будет представлять собой объект JSON с ключом `domains`.
      operationId: getDomains
      parameters:
      - name: limit
        in: query
        description: "Обозначает количество записей, которое необходимо вернуть."
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 100
      - name: offset
        in: query
        description: Указывает на смещение относительно начала списка.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      - name: idn_name
        in: query
        description: Интернационализированное доменное имя.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: xn--e1afmkfd.xn--p1ai
      - name: linked_ip
        in: query
        description: Привязанный к домену IP-адрес.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 192.168.1.1
      - name: order
        in: query
        description: Порядок доменов.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: asc
          enum:
          - asc
          - dsc
      - name: sort
        in: query
        description: Сортировка доменов.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: idn_name
          enum:
          - idn_name
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `domains`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_75'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/domains"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/domains', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/domains', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/domains', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/domains\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/domains\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Domains
  /api/v1/domains/{fqdn}:
    get:
      tags:
      - Домены
      summary: Получение информации о домене
      description: "Чтобы отобразить информацию об отдельном домене, отправьте зап\
        рос GET на `/api/v1/domains/{fqdn}`."
      operationId: getDomain
      parameters:
      - name: fqdn
        in: path
        description: Полное имя домена.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: somedomain.ru
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `domain`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_76'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/domains/somedomain.ru"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/domains/somedomain.ru', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/domains/somedomain.ru', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/domains/somedomain.ru', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains/somedomain.ru');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/domains/somedomain.ru\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Domains
    delete:
      tags:
      - Домены
      summary: Удаление домена
      description: "Чтобы удалить домен, отправьте запрос DELETE на `/api/v1/domains/{fqdn}`."
      operationId: deleteDomain
      parameters:
      - name: fqdn
        in: path
        description: Полное имя домена.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: somedomain.ru
      responses:
        "204":
          description: Домен успешно удален.
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/domains/somedomain.ru"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/domains/somedomain.ru', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/domains/somedomain.ru', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.delete('https://api.timeweb.cloud/api/v1/domains/somedomain.ru', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains/somedomain.ru');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/domains/somedomain.ru\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Domains
    patch:
      tags:
      - Домены
      summary: Включение/выключение автопродления домена
      description: "Чтобы включить/выключить автопродление домена, отправьте запро\
        с PATCH на `/api/v1/domains/{fqdn}`, передав в теле запроса параметр `is_autoprolong_enabled`"
      operationId: updateDomainAutoProlongation
      parameters:
      - name: fqdn
        in: path
        description: Полное имя домена.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: somedomain.ru
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-domain'
        required: true
      responses:
        "200":
          description: Объект JSON c ключом `domain`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_77'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X PATCH \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"is_autoprolong_enabled":true}' \
            "https://api.timeweb.cloud/api/v1/domains/somedomain.ru"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/domains/somedomain.ru', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'is_autoprolong_enabled': true
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud/api/v1/domains/somedomain.ru',
              {
                  'is_autoprolong_enabled': true
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'is_autoprolong_enabled': True,
          }

          response = requests.patch('https://api.timeweb.cloud/api/v1/domains/somedomain.ru', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"is_autoprolong_enabled":true}'
          #response = requests.patch('https://api.timeweb.cloud/api/v1/domains/somedomain.ru', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains/somedomain.ru');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"is_autoprolong_enabled":true}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"is_autoprolong_enabled\":true}`)\n\t\
          req, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/domains/somedomain.ru\");\n\t\t\
          HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"is_autoprolong_enabled\\\":true}\");\n\t\twriter.flush();\n\
          \t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Domains
  /api/v1/domains/{fqdn}/dns-records:
    get:
      tags:
      - Домены
      summary: Получить информацию обо всех пользовательских DNS-записях домена или
        поддомена
      description: "Чтобы получить информацию обо всех пользовательских DNS-запися\
        х домена или поддомена, отправьте запрос GET на `/api/v1/domains/{fqdn}/dns-records`."
      operationId: getDomainDNSRecords
      parameters:
      - name: fqdn
        in: path
        description: Полное имя домена или поддомена.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: somedomain.ru
      - name: limit
        in: query
        description: "Обозначает количество записей, которое необходимо вернуть."
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 100
      - name: offset
        in: query
        description: Указывает на смещение относительно начала списка.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `dns_records`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_78'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Domains
    post:
      tags:
      - Домены
      summary: Добавить информацию о DNS-записи для домена или поддомена
      description: |-
        Чтобы добавить информацию о DNS-записи для домена или поддомена, отправьте запрос POST на `/api/v1/domains/{fqdn}/dns-records`, задав необходимые атрибуты.

        DNS-запись будет добавлена с использованием предоставленной информации. Тело ответа будет содержать объект JSON с информацией о добавленной DNS-записи.
      operationId: createDomainDNSRecord
      parameters:
      - name: fqdn
        in: path
        description: Полное имя домена или поддомена.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: somedomain.ru
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-dns'
        required: true
      responses:
        "201":
          description: Ответ будет представлять собой объект JSON c ключом `dns_record`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_23'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"type":"A","value":"172.168.1.1"}' \
            "https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'type': 'A',
                  'value': '172.168.1.1'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records',
              {
                  'type': 'A',
                  'value': '172.168.1.1'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'type': 'A',
              'value': '172.168.1.1',
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"type":"A","value":"172.168.1.1"}'
          #response = requests.post('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"type":"A","value":"172.168.1.1"}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"type\":\"A\",\"value\":\"172.168.1.1\"\
          }`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"type\\\":\\\"A\\\",\\\"value\\\":\\\"172.168.1.1\\\
          \"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Domains
  /api/v1/domains/{fqdn}/dns-records/{record_id}:
    delete:
      tags:
      - Домены
      summary: Удалить информацию о DNS-записи для домена или поддомена
      description: "Чтобы удалить информацию о DNS-записи для домена или поддомена\
        , отправьте запрос DELETE на `/api/v1/domains/{fqdn}/dns-records/{record_id}`."
      operationId: deleteDomainDNSRecord
      parameters:
      - name: fqdn
        in: path
        description: Полное имя домена или поддомена.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: somedomain.ru
      - name: record_id
        in: path
        description: Идентификатор DNS-записи домена или поддомена.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 123
      responses:
        "204":
          description: Информация о DNS-записи успешно удалена.
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records/123"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records/123', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records/123', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.delete('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records/123', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records/123');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records/123\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records/123\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Domains
    patch:
      tags:
      - Домены
      summary: Обновить информацию о DNS-записи домена или поддомена
      description: |-
        Чтобы обновить информацию о DNS-записи для домена или поддомена, отправьте запрос PATCH на `/api/v1/domains/{fqdn}/dns-records/{record_id}`, задав необходимые атрибуты.

        DNS-запись будет обновлена с использованием предоставленной информации. Тело ответа будет содержать объект JSON с информацией об добавленной DNS-записи.
      operationId: updateDomainDNSRecord
      parameters:
      - name: fqdn
        in: path
        description: Полное имя домена или поддомена.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: somedomain.ru
      - name: record_id
        in: path
        description: Идентификатор DNS-записи домена или поддомена.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 123
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-dns'
        required: true
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `dns_record`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_23'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X PATCH \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"type":"A","value":"172.168.1.1"}' \
            "https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records/123"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records/123', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'type': 'A',
                  'value': '172.168.1.1'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records/123',
              {
                  'type': 'A',
                  'value': '172.168.1.1'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'type': 'A',
              'value': '172.168.1.1',
          }

          response = requests.patch(
              'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records/123',
              headers=headers,
              json=json_data,
          )

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"type":"A","value":"172.168.1.1"}'
          #response = requests.patch('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records/123', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records/123');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"type":"A","value":"172.168.1.1"}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"type\":\"A\",\"value\":\"172.168.1.1\"\
          }`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records/123\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/dns-records/123\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"type\\\":\\\"A\\\",\\\"value\\\":\\\"172.168.1.1\\\
          \"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Domains
  /api/v1/domains/{fqdn}/default-dns-records:
    get:
      tags:
      - Домены
      summary: Получить информацию обо всех DNS-записях по умолчанию домена или поддомена
      description: "Чтобы получить информацию обо всех DNS-записях по умолчанию до\
        мена или поддомена, отправьте запрос GET на `/api/v1/domains/{fqdn}/default-dns-records`."
      operationId: getDomainDefaultDNSRecords
      parameters:
      - name: fqdn
        in: path
        description: Полное имя домена или поддомена.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: somedomain.ru
      - name: limit
        in: query
        description: "Обозначает количество записей, которое необходимо вернуть."
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 100
      - name: offset
        in: query
        description: Указывает на смещение относительно начала списка.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `dns_records`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_78'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/domains/somedomain.ru/default-dns-records"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/default-dns-records', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/default-dns-records', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/default-dns-records', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/default-dns-records');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/default-dns-records\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/default-dns-records\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Domains
  /api/v1/domains/{fqdn}/subdomains/{subdomain_fqdn}:
    post:
      tags:
      - Домены
      summary: Добавление поддомена
      description: |-
        Чтобы добавить поддомен, отправьте запрос POST на `/api/v1/domains/{fqdn}/subdomains/{subdomain_fqdn}`, задав необходимые атрибуты.

        Поддомен будет добавлен с использованием предоставленной информации. Тело ответа будет содержать объект JSON с информацией о добавленном поддомене.
      operationId: addSubdomain
      parameters:
      - name: fqdn
        in: path
        description: Полное имя домена.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: somedomain.ru
      - name: subdomain_fqdn
        in: path
        description: Полное имя поддомена.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: sub.somedomain.ru
      responses:
        "201":
          description: Ответ будет представлять собой объект JSON c ключом `subdomain`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_24'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/domains/somedomain.ru/subdomains/sub.somedomain.ru"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/subdomains/sub.somedomain.ru', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/subdomains/sub.somedomain.ru',
              '',
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.post(
              'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/subdomains/sub.somedomain.ru',
              headers=headers,
          )
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/subdomains/sub.somedomain.ru');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/subdomains/sub.somedomain.ru\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/subdomains/sub.somedomain.ru\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Domains
    delete:
      tags:
      - Домены
      summary: Удаление поддомена
      description: "Чтобы удалить поддомен, отправьте запрос DELETE на `/api/v1/domains/{fqdn}/subdomains/{subdomain_fqdn}`."
      operationId: deleteSubdomain
      parameters:
      - name: fqdn
        in: path
        description: Полное имя домена.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: somedomain.ru
      - name: subdomain_fqdn
        in: path
        description: Полное имя поддомена.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: sub.somedomain.ru
      responses:
        "204":
          description: Поддомен успешно удален
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/domains/somedomain.ru/subdomains/sub.somedomain.ru"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/subdomains/sub.somedomain.ru', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/subdomains/sub.somedomain.ru', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.delete(
              'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/subdomains/sub.somedomain.ru',
              headers=headers,
          )
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/subdomains/sub.somedomain.ru');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/subdomains/sub.somedomain.ru\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/subdomains/sub.somedomain.ru\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Domains
  /api/v1/domains/{fqdn}/name-servers:
    get:
      tags:
      - Домены
      summary: Получение списка name-серверов домена
      description: "Чтобы получить список name-серверов домена, отправьте запрос GET\
        \ на `/api/v1/domains/{fqdn}/name-servers`."
      operationId: getDomainNameServers
      parameters:
      - name: fqdn
        in: path
        description: Полное имя домена.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: somedomain.ru
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `name_servers`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_79'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/domains/somedomain.ru/name-servers"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/name-servers', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/name-servers', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/name-servers', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/name-servers');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/name-servers\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/name-servers\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Domains
    put:
      tags:
      - Домены
      summary: Изменение name-серверов домена
      description: |-
        Чтобы изменить name-серверы домена, отправьте запрос PUT на `/api/v1/domains/{fqdn}/name-servers`, задав необходимые атрибуты.

        Name-серверы будут изменены с использованием предоставленной информации. Тело ответа будет содержать объект JSON с информацией о name-серверах домена.
      operationId: updateDomainNameServers
      parameters:
      - name: fqdn
        in: path
        description: Полное имя домена.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: somedomain.ru
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-domain-name-servers'
        required: true
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `name_servers`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_79'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X PUT \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"name_servers":[{"host":"ns1.timeweb.ru"},{"host":"ns2.timeweb.ru"}]}' \
            "https://api.timeweb.cloud/api/v1/domains/somedomain.ru/name-servers"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/name-servers', {
              method: 'PUT',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'name_servers': [
                      {
                          'host': 'ns1.timeweb.ru'
                      },
                      {
                          'host': 'ns2.timeweb.ru'
                      }
                  ]
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.put(
              'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/name-servers',
              {
                  'name_servers': [
                      {
                          'host': 'ns1.timeweb.ru'
                      },
                      {
                          'host': 'ns2.timeweb.ru'
                      }
                  ]
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'name_servers': [
                  {
                      'host': 'ns1.timeweb.ru',
                  },
                  {
                      'host': 'ns2.timeweb.ru',
                  },
              ],
          }

          response = requests.put('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/name-servers', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"name_servers":[{"host":"ns1.timeweb.ru"},{"host":"ns2.timeweb.ru"}]}'
          #response = requests.put('https://api.timeweb.cloud/api/v1/domains/somedomain.ru/name-servers', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains/somedomain.ru/name-servers');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"name_servers":[{"host":"ns1.timeweb.ru"},{"host":"ns2.timeweb.ru"}]}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"name_servers\":[{\"host\":\"ns1.timeweb.ru\"\
          },{\"host\":\"ns2.timeweb.ru\"}]}`)\n\treq, err := http.NewRequest(\"PUT\"\
          , \"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/name-servers\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/domains/somedomain.ru/name-servers\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"PUT\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"name_servers\\\":[{\\\"host\\\":\\\"ns1.timeweb.ru\\\
          \"},{\\\"host\\\":\\\"ns2.timeweb.ru\\\"}]}\");\n\t\twriter.flush();\n\t\
          \twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Domains
  /api/v1/domains-requests:
    get:
      tags:
      - Домены
      summary: Получение списка заявок на регистрацию/продление/трансфер домена
      description: "Чтобы получить список заявок на регистрацию/продление/трансфер\
        \ домена, отправьте запрос GET на `/api/v1/domains-requests`."
      operationId: getDomainRequests
      parameters:
      - name: person_id
        in: query
        description: "Идентификатор администратора, на которого зарегистрирован до\
          мен."
        required: false
        style: form
        explode: true
        schema:
          type: integer
          example: 123
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `requests`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_80'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/domains-requests"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/domains-requests', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/domains-requests', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/domains-requests', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains-requests');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/domains-requests\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/domains-requests\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Domains
    post:
      tags:
      - Домены
      summary: Создание заявки на регистрацию/продление/трансфер домена
      description: |-
        Чтобы создать заявку на регистрацию/продление/трансфер домена, отправьте POST-запрос в `api/v1/domains-requests`, задав необходимые атрибуты.

        Заявка будет создана с использованием предоставленной информации. Тело ответа будет содержать объект JSON с информацией о созданной заявке.
      operationId: createDomainRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1_domainsrequests_body'
        required: true
      responses:
        "201":
          description: Ответ будет представлять собой объект JSON c ключом `request`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_25'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"action":"register","fqdn":"somedomain.ru","person_id":123,"is_autoprolong_enabled":true,"period":"P1Y"}' \
            "https://api.timeweb.cloud/api/v1/domains-requests"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/domains-requests', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'action': 'register',
                  'fqdn': 'somedomain.ru',
                  'person_id': 123,
                  'is_autoprolong_enabled': true,
                  'period': 'P1Y'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/domains-requests',
              {
                  'action': 'register',
                  'fqdn': 'somedomain.ru',
                  'person_id': 123,
                  'is_autoprolong_enabled': true,
                  'period': 'P1Y'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'action': 'register',
              'fqdn': 'somedomain.ru',
              'person_id': 123,
              'is_autoprolong_enabled': True,
              'period': 'P1Y',
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/domains-requests', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"action":"register","fqdn":"somedomain.ru","person_id":123,"is_autoprolong_enabled":true,"period":"P1Y"}'
          #response = requests.post('https://api.timeweb.cloud/api/v1/domains-requests', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains-requests');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"action":"register","fqdn":"somedomain.ru","person_id":123,"is_autoprolong_enabled":true,"period":"P1Y"}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"action\":\"register\",\"fqdn\":\"somedomain.ru\"\
          ,\"person_id\":123,\"is_autoprolong_enabled\":true,\"period\":\"P1Y\"}`)\n\
          \treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/domains-requests\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/domains-requests\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\\"action\\\":\\\"register\\\",\\\"fqdn\\\":\\\"somedomain.ru\\\",\\\"\
          person_id\\\":123,\\\"is_autoprolong_enabled\\\":true,\\\"period\\\":\\\"\
          P1Y\\\"}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Domains
  /api/v1/domains-requests/{request_id}:
    get:
      tags:
      - Домены
      summary: Получение заявки на регистрацию/продление/трансфер домена
      description: "Чтобы получить заявку на регистрацию/продление/трансфер домена\
        , отправьте запрос GET на `/api/v1/domains-requests/{request_id}`."
      operationId: getDomainRequest
      parameters:
      - name: request_id
        in: path
        description: Идентификатор заявки на регистрацию/продление/трансфер домена.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 123
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `request`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_25'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/domains-requests/123"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/domains-requests/123', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/domains-requests/123', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/domains-requests/123', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains-requests/123');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/domains-requests/123\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/domains-requests/123\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Domains
    patch:
      tags:
      - Домены
      summary: Оплата/обновление заявки на регистрацию/продление/трансфер домена
      description: |-
        Чтобы оплатить/обновить заявку на регистрацию/продление/трансфер домена, отправьте запрос PATCH на `/api/v1/domains-requests/{request_id}`, задав необходимые атрибуты.

        Заявка будет обновлена с использованием предоставленной информации. Тело ответа будет содержать объект JSON с информацией о обновленной заявке.
      operationId: updateDomainRequest
      parameters:
      - name: request_id
        in: path
        description: Идентификатор заявки на регистрацию/продление/трансфер домена.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 123
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/domainsrequests_request_id_body'
        required: true
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `request`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_25'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X PATCH \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{"money_source":"use"}' \
            "https://api.timeweb.cloud/api/v1/domains-requests/123"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/domains-requests/123', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              body: JSON.stringify({
                  'money_source': 'use'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud/api/v1/domains-requests/123',
              {
                  'money_source': 'use'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'money_source': 'use',
          }

          response = requests.patch('https://api.timeweb.cloud/api/v1/domains-requests/123', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{"money_source":"use"}'
          #response = requests.patch('https://api.timeweb.cloud/api/v1/domains-requests/123', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/domains-requests/123');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, '{"money_source":"use"}');

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\"money_source\":\"use\"}`)\n\treq, err\
          \ := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/domains-requests/123\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/domains-requests/123\");\n\t\t\
          HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\\"money_source\\\":\\\"use\\\"}\");\n\t\twriter.flush();\n\
          \t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Domains
  /api/v1/tlds:
    get:
      tags:
      - Домены
      summary: Получить информацию о доменных зонах
      description: "Чтобы получить информацию о доменных зонах, отправьте запрос GET\
        \ на `/api/v1/tlds`."
      operationId: getTLDs
      parameters:
      - name: is_published
        in: query
        description: "Это логическое значение, которое показывает, опубликована ли\
          \ доменная зона."
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          example: true
      - name: is_registered
        in: query
        description: "Это логическое значение, которое показывает, зарегистрирован\
          а ли доменная зона."
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          example: true
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `top_level_domains`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_81'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/tlds"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/tlds', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/tlds', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/tlds', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/tlds');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/tlds\", nil)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\"\
          , \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer \"\
          \ + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/tlds\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Domains
  /api/v1/tlds/{tld_id}:
    get:
      tags:
      - Домены
      summary: Получить информацию о доменной зоне по идентификатору
      description: "Чтобы получить информацию о доменной зоне по идентификатору, о\
        тправьте запрос GET на `/api/v1/tlds/{tld_id}`."
      operationId: getTLD
      parameters:
      - name: tld_id
        in: path
        description: Идентификатор доменной зоны.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 123
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `top_level_domain`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_82'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/tlds/123"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/tlds/123', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/tlds/123', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/tlds/123', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/tlds/123');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/tlds/123\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/tlds/123\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Domains
  /api/v1/check-domain/{fqdn}:
    get:
      tags:
      - Домены
      summary: "Проверить, доступен ли домен для регистрации"
      description: "Чтобы проверить, доступен ли домен для регистрации, отправьте\
        \ запрос GET на `/api/v1/check-domain/{fqdn}`."
      operationId: checkDomain
      parameters:
      - name: fqdn
        in: path
        description: Полное имя домена.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: somedomain.ru
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON c ключом `is_domain_available`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_83'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/check-domain/somedomain.ru"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/check-domain/somedomain.ru', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/check-domain/somedomain.ru', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/check-domain/somedomain.ru', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/check-domain/somedomain.ru');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/check-domain/somedomain.ru\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/check-domain/somedomain.ru\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Domains
  /api/v1/add-domain/{fqdn}:
    post:
      tags:
      - Домены
      summary: Добавление домена на аккаунт
      description: "Чтобы добавить домен на свой аккаунт, отправьте запрос POST на\
        \ `/api/v1/add-domain/{fqdn}`."
      operationId: addDomain
      parameters:
      - name: fqdn
        in: path
        description: Полное имя домена.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: somedomain.ru
      responses:
        "204":
          description: Домен успешно добавлен на ваш аккаунт.
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/add-domain/somedomain.ru"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/add-domain/somedomain.ru', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/add-domain/somedomain.ru',
              '',
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/add-domain/somedomain.ru', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/add-domain/somedomain.ru');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/add-domain/somedomain.ru\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/add-domain/somedomain.ru\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - Domains
  /api/v2/vpcs:
    get:
      tags:
      - VPC
      summary: Получение списка VPCs
      description: "Чтобы получить список VPCs, отправьте GET-запрос на `/api/v2/vpcs`."
      operationId: getVPCs
      responses:
        "200":
          description: Объект JSON c ключом `vpcs`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_84'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v2/vpcs"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v2/vpcs', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v2/vpcs', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v2/vpcs', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v2/vpcs');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v2/vpcs\", nil)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"Content-Type\"\
          , \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer \"\
          \ + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v2/vpcs\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - VPC
    post:
      tags:
      - VPC
      summary: Создание VPC
      description: "Чтобы создать создать VPC, отправьте POST-запрос в `/api/v2/vpcs`,\
        \ задав необходимые атрибуты."
      operationId: createVPC
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-vpc'
        required: true
      responses:
        "201":
          description: Объект JSON c ключом `vpc`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_26'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{
            "description": "Описание для примера"
          }' "https://api.timeweb.cloud/api/v2/vpcs"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v2/vpcs', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{\n  "description": "Описание для примера"\n}',
              body: JSON.stringify({
                  'description': '\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435 \u0434\u043B\u044F \u043F\u0440\u0438\u043C\u0435\u0440\u0430'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v2/vpcs',
              // '{\n  "description": "Описание для примера"\n}',
              {
                  'description': '\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435 \u0434\u043B\u044F \u043F\u0440\u0438\u043C\u0435\u0440\u0430'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'description': 'Описание для примера',
          }

          response = requests.post('https://api.timeweb.cloud/api/v2/vpcs', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{\n  "description": "Описание для примера"\n}'.encode()
          #response = requests.post('https://api.timeweb.cloud/api/v2/vpcs', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v2/vpcs');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"description\": \"Описание для примера\"\n}");

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\n  \"description\": \"Описание для при\
          мера\"\n}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v2/vpcs\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v2/vpcs\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\n  \\\"description\\\": \\\"Описание для примера\\\"\\n}\");\n\t\twriter.flush();\n\
          \t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - VPC
  /api/v2/vpcs/{vpc_id}:
    get:
      tags:
      - VPC
      summary: Получение VPC
      description: "Чтобы отобразить информацию об отдельном VPC, отправьте запрос\
        \ GET на `api/v2/vpcs/{vpc_id}`."
      operationId: getVPC
      parameters:
      - name: vpc_id
        in: path
        description: Идентификатор сети
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: Идентификатор сети
          example: network-1234567890
      responses:
        "200":
          description: Ответ будет представлять собой объект JSON с ключом `vpc`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_26'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v2/vpcs/network-1234567890"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v2/vpcs/network-1234567890', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v2/vpcs/network-1234567890', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v2/vpcs/network-1234567890', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v2/vpcs/network-1234567890');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v2/vpcs/network-1234567890\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v2/vpcs/network-1234567890\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - VPC
    patch:
      tags:
      - VPC
      summary: Изменение VPC по идентификатору сети
      description: "Чтобы изменить VPC, отправьте PATCH-запрос на `/api/v2/vpcs/{vpc_id}`"
      operationId: updateVPCs
      parameters:
      - name: vpc_id
        in: path
        description: Идентификатор сети
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: Идентификатор сети
          example: network-1234567890
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-vpc'
        required: true
      responses:
        "200":
          description: Объект JSON c ключом `vpc`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_26'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -H\
          \ \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\n  \"description\"\
          : \"Сеть для примера\" \n}' \"https://api.timeweb.cloud/api/v2/vpcs/network-1234567890\""
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v2/vpcs/network-1234567890', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{\n  "description": "Сеть для примера" \n}',
              body: JSON.stringify({
                  'description': '\u0421\u0435\u0442\u044C \u0434\u043B\u044F \u043F\u0440\u0438\u043C\u0435\u0440\u0430'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud/api/v2/vpcs/network-1234567890',
              // '{\n  "description": "Сеть для примера" \n}',
              {
                  'description': '\u0421\u0435\u0442\u044C \u0434\u043B\u044F \u043F\u0440\u0438\u043C\u0435\u0440\u0430'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'description': 'Сеть для примера',
          }

          response = requests.patch('https://api.timeweb.cloud/api/v2/vpcs/network-1234567890', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{\n  "description": "Сеть для примера" \n}'.encode()
          #response = requests.patch('https://api.timeweb.cloud/api/v2/vpcs/network-1234567890', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v2/vpcs/network-1234567890');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"description\": \"Сеть для примера\" \n}");

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\n  \"description\": \"Сеть для примера\
          \" \n}`)\n\treq, err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v2/vpcs/network-1234567890\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v2/vpcs/network-1234567890\");\n\t\
          \tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"PATCH\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\n  \\\"description\\\": \\\"Сеть для примера\\\" \\\
          n}\");\n\t\twriter.flush();\n\t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - VPC
  /api/v2/vpcs/{vpc_id}/services:
    get:
      tags:
      - VPC
      summary: Получение списка сервисов в VPC
      description: "Чтобы получить список сервисов, отправьте GET-запрос на `/api/v2/vpcs/{vpc_id}/services`."
      operationId: getVPCServices
      parameters:
      - name: vpc_id
        in: path
        description: Идентификатор сети
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: Идентификатор сети
          example: network-1234567890
      responses:
        "200":
          description: Объект JSON c ключом `services`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_85'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v2/vpcs/network-1234567890/services"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v2/vpcs/network-1234567890/services', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v2/vpcs/network-1234567890/services', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v2/vpcs/network-1234567890/services', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v2/vpcs/network-1234567890/services');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v2/vpcs/network-1234567890/services\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v2/vpcs/network-1234567890/services\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - VPC
  /api/v1/vpcs/{vpc_id}:
    delete:
      tags:
      - VPC
      summary: Удаление VPC по идентификатору сети
      description: "Чтобы удалить VPC, отправьте DELETE-запрос на `/api/v1/vpcs/{vpc_id}`"
      operationId: deleteVPC
      parameters:
      - name: vpc_id
        in: path
        description: Идентификатор сети
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: Идентификатор сети
          example: network-1234567890
      responses:
        "204":
          description: Объект JSON c ключом `vpc`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_204'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/vpcs/network-1234567890"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/vpcs/network-1234567890', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/vpcs/network-1234567890', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.delete('https://api.timeweb.cloud/api/v1/vpcs/network-1234567890', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/vpcs/network-1234567890');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/vpcs/network-1234567890\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/vpcs/network-1234567890\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - VPC
  /api/v1/vpcs/{vpc_id}/ports:
    get:
      tags:
      - VPC
      summary: Получение списка портов для VPC
      description: "Чтобы получить список портов для VPC, отправьте GET-запрос на\
        \ `/api/v1/vpcs/{vpc_id}/ports`."
      operationId: getVPCPorts
      parameters:
      - name: vpc_id
        in: path
        description: Идентификатор сети
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: Идентификатор сети
          example: network-1234567890
      responses:
        "200":
          description: Объект JSON c ключом `vpc_ports`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_86'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/vpcs/{vpc_id}/ports"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/vpcs/{vpc_id}/ports', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/vpcs/{vpc_id}/ports', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/vpcs/{vpc_id}/ports', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/vpcs/{vpc_id}/ports');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/vpcs/{vpc_id}/ports\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/vpcs/{vpc_id}/ports\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - VPC
  /api/v1/ssh-keys:
    get:
      tags:
      - SSH-ключи
      summary: Получение списка SSH-ключей
      description: "Чтобы получить список SSH-ключей, отправьте GET-запрос на `/api/v1/ssh-keys`."
      operationId: getKeys
      responses:
        "200":
          description: Объект JSON c ключом `ssh_keys`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_87'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/ssh-keys"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/ssh-keys', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/ssh-keys', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/ssh-keys', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/ssh-keys');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/ssh-keys\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/ssh-keys\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - SSH
    post:
      tags:
      - SSH-ключи
      summary: Создание SSH-ключа
      description: |+
        Чтобы создать создать SSH-ключ, отправьте POST-запрос в `/api/v1/ssh-keys`, задав необходимые атрибуты.

      operationId: createKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1_sshkeys_body'
        required: true
      responses:
        "201":
          description: Объект JSON c ключом `ssh-key`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_27'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "409":
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            -d '{
            "body": "ssh-dss AAAAB3NzaC1kc3MAAACBALixbc+uF2kuv83LiB3gg200vHJ7hH0QCC77fqlu+5raX6Y1PJZZORwzWbvU6k8gfrmjMRwQFDNncu3aXUiM9TleOBxFsQ2Hg5hDblSr2bnnyVP0jjPzsYye+0Ebaa+IjEqZz8y0qu8zejCpHqhLP/PlRDS9vtTsadrVvNwFFCyhAAAAFQD7m0AZOd/lHraIgBjXJvfN+qGiAQAAAIAdXSV0n47akGC/g0ejkNzHDSdRFf2fR0FsOos/7f5j+QfstijVBMwzA4Ti+dNJv3BQqQv3Bk5X3o5yUTUL+cM6fa4KSyIhGi14RL0kqjJrNjqVAhwjPH8K9aHDouqQEz56UL72+iGhMxwBHBMWq7cZ2k31mmFgEoYgwNcYuNmtlAAAAIBxIebJMItpq3ez5Hg5GyhpnSU7h0kshh+D5UAAlPmJo8OUQH6avQGf6gpxs3CnQ/im/aCKcb/bYm4V5Y9a7Zq+LrZGQZ79GLWsu/oK0HfQiP+oWwzCGmsdIGblsTRzrKU0FFo7zGmyTsBU48OeD76nKsc5EJ9F9wQC3S2KK38Ynw== test@MBP-test.office.timeweb.ru",
            "is_default": false,
            "name": "test"
          }' "https://api.timeweb.cloud/api/v1/ssh-keys"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/ssh-keys', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{\n  "body": "ssh-dss AAAAB3NzaC1kc3MAAACBALixbc+uF2kuv83LiB3gg200vHJ7hH0QCC77fqlu+5raX6Y1PJZZORwzWbvU6k8gfrmjMRwQFDNncu3aXUiM9TleOBxFsQ2Hg5hDblSr2bnnyVP0jjPzsYye+0Ebaa+IjEqZz8y0qu8zejCpHqhLP/PlRDS9vtTsadrVvNwFFCyhAAAAFQD7m0AZOd/lHraIgBjXJvfN+qGiAQAAAIAdXSV0n47akGC/g0ejkNzHDSdRFf2fR0FsOos/7f5j+QfstijVBMwzA4Ti+dNJv3BQqQv3Bk5X3o5yUTUL+cM6fa4KSyIhGi14RL0kqjJrNjqVAhwjPH8K9aHDouqQEz56UL72+iGhMxwBHBMWq7cZ2k31mmFgEoYgwNcYuNmtlAAAAIBxIebJMItpq3ez5Hg5GyhpnSU7h0kshh+D5UAAlPmJo8OUQH6avQGf6gpxs3CnQ/im/aCKcb/bYm4V5Y9a7Zq+LrZGQZ79GLWsu/oK0HfQiP+oWwzCGmsdIGblsTRzrKU0FFo7zGmyTsBU48OeD76nKsc5EJ9F9wQC3S2KK38Ynw== test@MBP-test.office.timeweb.ru",\n  "is_default": false,\n  "name": "test"\n}',
              body: JSON.stringify({
                  'body': 'ssh-dss AAAAB3NzaC1kc3MAAACBALixbc+uF2kuv83LiB3gg200vHJ7hH0QCC77fqlu+5raX6Y1PJZZORwzWbvU6k8gfrmjMRwQFDNncu3aXUiM9TleOBxFsQ2Hg5hDblSr2bnnyVP0jjPzsYye+0Ebaa+IjEqZz8y0qu8zejCpHqhLP/PlRDS9vtTsadrVvNwFFCyhAAAAFQD7m0AZOd/lHraIgBjXJvfN+qGiAQAAAIAdXSV0n47akGC/g0ejkNzHDSdRFf2fR0FsOos/7f5j+QfstijVBMwzA4Ti+dNJv3BQqQv3Bk5X3o5yUTUL+cM6fa4KSyIhGi14RL0kqjJrNjqVAhwjPH8K9aHDouqQEz56UL72+iGhMxwBHBMWq7cZ2k31mmFgEoYgwNcYuNmtlAAAAIBxIebJMItpq3ez5Hg5GyhpnSU7h0kshh+D5UAAlPmJo8OUQH6avQGf6gpxs3CnQ/im/aCKcb/bYm4V5Y9a7Zq+LrZGQZ79GLWsu/oK0HfQiP+oWwzCGmsdIGblsTRzrKU0FFo7zGmyTsBU48OeD76nKsc5EJ9F9wQC3S2KK38Ynw== test@MBP-test.office.timeweb.ru',
                  'is_default': false,
                  'name': 'test'
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/ssh-keys',
              // '{\n  "body": "ssh-dss AAAAB3NzaC1kc3MAAACBALixbc+uF2kuv83LiB3gg200vHJ7hH0QCC77fqlu+5raX6Y1PJZZORwzWbvU6k8gfrmjMRwQFDNncu3aXUiM9TleOBxFsQ2Hg5hDblSr2bnnyVP0jjPzsYye+0Ebaa+IjEqZz8y0qu8zejCpHqhLP/PlRDS9vtTsadrVvNwFFCyhAAAAFQD7m0AZOd/lHraIgBjXJvfN+qGiAQAAAIAdXSV0n47akGC/g0ejkNzHDSdRFf2fR0FsOos/7f5j+QfstijVBMwzA4Ti+dNJv3BQqQv3Bk5X3o5yUTUL+cM6fa4KSyIhGi14RL0kqjJrNjqVAhwjPH8K9aHDouqQEz56UL72+iGhMxwBHBMWq7cZ2k31mmFgEoYgwNcYuNmtlAAAAIBxIebJMItpq3ez5Hg5GyhpnSU7h0kshh+D5UAAlPmJo8OUQH6avQGf6gpxs3CnQ/im/aCKcb/bYm4V5Y9a7Zq+LrZGQZ79GLWsu/oK0HfQiP+oWwzCGmsdIGblsTRzrKU0FFo7zGmyTsBU48OeD76nKsc5EJ9F9wQC3S2KK38Ynw== test@MBP-test.office.timeweb.ru",\n  "is_default": false,\n  "name": "test"\n}',
              {
                  'body': 'ssh-dss AAAAB3NzaC1kc3MAAACBALixbc+uF2kuv83LiB3gg200vHJ7hH0QCC77fqlu+5raX6Y1PJZZORwzWbvU6k8gfrmjMRwQFDNncu3aXUiM9TleOBxFsQ2Hg5hDblSr2bnnyVP0jjPzsYye+0Ebaa+IjEqZz8y0qu8zejCpHqhLP/PlRDS9vtTsadrVvNwFFCyhAAAAFQD7m0AZOd/lHraIgBjXJvfN+qGiAQAAAIAdXSV0n47akGC/g0ejkNzHDSdRFf2fR0FsOos/7f5j+QfstijVBMwzA4Ti+dNJv3BQqQv3Bk5X3o5yUTUL+cM6fa4KSyIhGi14RL0kqjJrNjqVAhwjPH8K9aHDouqQEz56UL72+iGhMxwBHBMWq7cZ2k31mmFgEoYgwNcYuNmtlAAAAIBxIebJMItpq3ez5Hg5GyhpnSU7h0kshh+D5UAAlPmJo8OUQH6avQGf6gpxs3CnQ/im/aCKcb/bYm4V5Y9a7Zq+LrZGQZ79GLWsu/oK0HfQiP+oWwzCGmsdIGblsTRzrKU0FFo7zGmyTsBU48OeD76nKsc5EJ9F9wQC3S2KK38Ynw== test@MBP-test.office.timeweb.ru',
                  'is_default': false,
                  'name': 'test'
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'body': 'ssh-dss AAAAB3NzaC1kc3MAAACBALixbc+uF2kuv83LiB3gg200vHJ7hH0QCC77fqlu+5raX6Y1PJZZORwzWbvU6k8gfrmjMRwQFDNncu3aXUiM9TleOBxFsQ2Hg5hDblSr2bnnyVP0jjPzsYye+0Ebaa+IjEqZz8y0qu8zejCpHqhLP/PlRDS9vtTsadrVvNwFFCyhAAAAFQD7m0AZOd/lHraIgBjXJvfN+qGiAQAAAIAdXSV0n47akGC/g0ejkNzHDSdRFf2fR0FsOos/7f5j+QfstijVBMwzA4Ti+dNJv3BQqQv3Bk5X3o5yUTUL+cM6fa4KSyIhGi14RL0kqjJrNjqVAhwjPH8K9aHDouqQEz56UL72+iGhMxwBHBMWq7cZ2k31mmFgEoYgwNcYuNmtlAAAAIBxIebJMItpq3ez5Hg5GyhpnSU7h0kshh+D5UAAlPmJo8OUQH6avQGf6gpxs3CnQ/im/aCKcb/bYm4V5Y9a7Zq+LrZGQZ79GLWsu/oK0HfQiP+oWwzCGmsdIGblsTRzrKU0FFo7zGmyTsBU48OeD76nKsc5EJ9F9wQC3S2KK38Ynw== test@MBP-test.office.timeweb.ru',
              'is_default': False,
              'name': 'test',
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/ssh-keys', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{\n  "body": "ssh-dss AAAAB3NzaC1kc3MAAACBALixbc+uF2kuv83LiB3gg200vHJ7hH0QCC77fqlu+5raX6Y1PJZZORwzWbvU6k8gfrmjMRwQFDNncu3aXUiM9TleOBxFsQ2Hg5hDblSr2bnnyVP0jjPzsYye+0Ebaa+IjEqZz8y0qu8zejCpHqhLP/PlRDS9vtTsadrVvNwFFCyhAAAAFQD7m0AZOd/lHraIgBjXJvfN+qGiAQAAAIAdXSV0n47akGC/g0ejkNzHDSdRFf2fR0FsOos/7f5j+QfstijVBMwzA4Ti+dNJv3BQqQv3Bk5X3o5yUTUL+cM6fa4KSyIhGi14RL0kqjJrNjqVAhwjPH8K9aHDouqQEz56UL72+iGhMxwBHBMWq7cZ2k31mmFgEoYgwNcYuNmtlAAAAIBxIebJMItpq3ez5Hg5GyhpnSU7h0kshh+D5UAAlPmJo8OUQH6avQGf6gpxs3CnQ/im/aCKcb/bYm4V5Y9a7Zq+LrZGQZ79GLWsu/oK0HfQiP+oWwzCGmsdIGblsTRzrKU0FFo7zGmyTsBU48OeD76nKsc5EJ9F9wQC3S2KK38Ynw== test@MBP-test.office.timeweb.ru",\n  "is_default": false,\n  "name": "test"\n}'
          #response = requests.post('https://api.timeweb.cloud/api/v1/ssh-keys', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/ssh-keys');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"body\": \"ssh-dss AAAAB3NzaC1kc3MAAACBALixbc+uF2kuv83LiB3gg200vHJ7hH0QCC77fqlu+5raX6Y1PJZZORwzWbvU6k8gfrmjMRwQFDNncu3aXUiM9TleOBxFsQ2Hg5hDblSr2bnnyVP0jjPzsYye+0Ebaa+IjEqZz8y0qu8zejCpHqhLP/PlRDS9vtTsadrVvNwFFCyhAAAAFQD7m0AZOd/lHraIgBjXJvfN+qGiAQAAAIAdXSV0n47akGC/g0ejkNzHDSdRFf2fR0FsOos/7f5j+QfstijVBMwzA4Ti+dNJv3BQqQv3Bk5X3o5yUTUL+cM6fa4KSyIhGi14RL0kqjJrNjqVAhwjPH8K9aHDouqQEz56UL72+iGhMxwBHBMWq7cZ2k31mmFgEoYgwNcYuNmtlAAAAIBxIebJMItpq3ez5Hg5GyhpnSU7h0kshh+D5UAAlPmJo8OUQH6avQGf6gpxs3CnQ/im/aCKcb/bYm4V5Y9a7Zq+LrZGQZ79GLWsu/oK0HfQiP+oWwzCGmsdIGblsTRzrKU0FFo7zGmyTsBU48OeD76nKsc5EJ9F9wQC3S2KK38Ynw== test@MBP-test.office.timeweb.ru\",\n  \"is_default\": false,\n  \"name\": \"test\"\n}");

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\n  \"body\": \"ssh-dss AAAAB3NzaC1kc3MAAACBALixbc+uF2kuv83LiB3gg200vHJ7hH0QCC77fqlu+5raX6Y1PJZZORwzWbvU6k8gfrmjMRwQFDNncu3aXUiM9TleOBxFsQ2Hg5hDblSr2bnnyVP0jjPzsYye+0Ebaa+IjEqZz8y0qu8zejCpHqhLP/PlRDS9vtTsadrVvNwFFCyhAAAAFQD7m0AZOd/lHraIgBjXJvfN+qGiAQAAAIAdXSV0n47akGC/g0ejkNzHDSdRFf2fR0FsOos/7f5j+QfstijVBMwzA4Ti+dNJv3BQqQv3Bk5X3o5yUTUL+cM6fa4KSyIhGi14RL0kqjJrNjqVAhwjPH8K9aHDouqQEz56UL72+iGhMxwBHBMWq7cZ2k31mmFgEoYgwNcYuNmtlAAAAIBxIebJMItpq3ez5Hg5GyhpnSU7h0kshh+D5UAAlPmJo8OUQH6avQGf6gpxs3CnQ/im/aCKcb/bYm4V5Y9a7Zq+LrZGQZ79GLWsu/oK0HfQiP+oWwzCGmsdIGblsTRzrKU0FFo7zGmyTsBU48OeD76nKsc5EJ9F9wQC3S2KK38Ynw==\
          \ test@MBP-test.office.timeweb.ru\",\n  \"is_default\": false,\n  \"name\"\
          : \"test\"\n}`)\n\treq, err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/ssh-keys\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/ssh-keys\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          POST\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\n  \\\"body\\\": \\\"ssh-dss AAAAB3NzaC1kc3MAAACBALixbc+uF2kuv83LiB3gg200vHJ7hH0QCC77fqlu+5raX6Y1PJZZORwzWbvU6k8gfrmjMRwQFDNncu3aXUiM9TleOBxFsQ2Hg5hDblSr2bnnyVP0jjPzsYye+0Ebaa+IjEqZz8y0qu8zejCpHqhLP/PlRDS9vtTsadrVvNwFFCyhAAAAFQD7m0AZOd/lHraIgBjXJvfN+qGiAQAAAIAdXSV0n47akGC/g0ejkNzHDSdRFf2fR0FsOos/7f5j+QfstijVBMwzA4Ti+dNJv3BQqQv3Bk5X3o5yUTUL+cM6fa4KSyIhGi14RL0kqjJrNjqVAhwjPH8K9aHDouqQEz56UL72+iGhMxwBHBMWq7cZ2k31mmFgEoYgwNcYuNmtlAAAAIBxIebJMItpq3ez5Hg5GyhpnSU7h0kshh+D5UAAlPmJo8OUQH6avQGf6gpxs3CnQ/im/aCKcb/bYm4V5Y9a7Zq+LrZGQZ79GLWsu/oK0HfQiP+oWwzCGmsdIGblsTRzrKU0FFo7zGmyTsBU48OeD76nKsc5EJ9F9wQC3S2KK38Ynw==\
          \ test@MBP-test.office.timeweb.ru\\\",\\n  \\\"is_default\\\": false,\\\
          n  \\\"name\\\": \\\"test\\\"\\n}\");\n\t\twriter.flush();\n\t\twriter.close();\n\
          \t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream\
          \ = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - SSH
  /api/v1/ssh-keys/{ssh_key_id}:
    get:
      tags:
      - SSH-ключи
      summary: Получение SSH-ключа по уникальному идентификатору
      description: "Чтобы получить SSH-ключ, отправьте GET-запрос на `/api/v1/ssh-keys/{ssh_key_id}`"
      operationId: getKey
      parameters:
      - name: ssh_key_id
        in: path
        description: Уникальный идентификатор SSH-ключа
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      responses:
        "200":
          description: Объект JSON c ключом `ssh_key`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_88'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/ssh-keys/123"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/ssh-keys/123', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.get('https://api.timeweb.cloud/api/v1/ssh-keys/123', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.get('https://api.timeweb.cloud/api/v1/ssh-keys/123', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/ssh-keys/123');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"GET\", \"https://api.timeweb.cloud/api/v1/ssh-keys/123\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/ssh-keys/123\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"GET\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - SSH
    delete:
      tags:
      - SSH-ключи
      summary: Удаление SSH-ключа по уникальному идентификатору
      description: "Чтобы удалить SSH-ключ, отправьте DELETE-запрос на `/api/v1/ssh-keys/{ssh_key_id}`"
      operationId: deleteKey
      parameters:
      - name: ssh_key_id
        in: path
        description: Уникальный идентификатор SSH-ключа
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      responses:
        "204":
          description: Успешное удаление SSH-ключа
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/ssh-keys/123"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/ssh-keys/123', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/ssh-keys/123', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.delete('https://api.timeweb.cloud/api/v1/ssh-keys/123', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/ssh-keys/123');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/ssh-keys/123\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/ssh-keys/123\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - SSH
    patch:
      tags:
      - SSH-ключи
      summary: Изменение SSH-ключа по уникальному идентификатору
      description: "Чтобы изменить SSH-ключ, отправьте PATCH-запрос на `/api/v1/ssh-keys/{ssh_key_id}`"
      operationId: updateKey
      parameters:
      - name: ssh_key_id
        in: path
        description: Уникальный идентификатор SSH-ключа
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sshkeys_ssh_key_id_body'
        required: true
      responses:
        "200":
          description: Объект JSON c ключом `ssh_key`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_88'
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -H\
          \ \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\n  \"is_default\"\
          : true \n}' \"https://api.timeweb.cloud/api/v1/ssh-keys/123\""
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/ssh-keys/123', {
              method: 'PATCH',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{\n  "is_default": true \n}',
              body: JSON.stringify({
                  'is_default': true
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.patch(
              'https://api.timeweb.cloud/api/v1/ssh-keys/123',
              // '{\n  "is_default": true \n}',
              {
                  'is_default': true
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'is_default': True,
          }

          response = requests.patch('https://api.timeweb.cloud/api/v1/ssh-keys/123', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{\n  "is_default": true \n}'
          #response = requests.patch('https://api.timeweb.cloud/api/v1/ssh-keys/123', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/ssh-keys/123');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"is_default\": true \n}");

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\n  \"is_default\": true \n}`)\n\treq,\
          \ err := http.NewRequest(\"PATCH\", \"https://api.timeweb.cloud/api/v1/ssh-keys/123\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/ssh-keys/123\");\n\t\tHttpURLConnection\
          \ httpConn = (HttpURLConnection) url.openConnection();\n\t\thttpConn.setRequestMethod(\"\
          PATCH\");\n\n\t\thttpConn.setRequestProperty(\"Content-Type\", \"application/json\"\
          );\n\t\thttpConn.setRequestProperty(\"Authorization\", \"Bearer \" + System.getenv(\"\
          TIMEWEB_CLOUD_TOKEN\"));\n\n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter\
          \ writer = new OutputStreamWriter(httpConn.getOutputStream());\n\t\twriter.write(\"\
          {\\n  \\\"is_default\\\": true \\n}\");\n\t\twriter.flush();\n\t\twriter.close();\n\
          \t\thttpConn.getOutputStream().close();\n\n\t\tInputStream responseStream\
          \ = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - SSH
  /api/v1/servers/{server_id}/ssh-keys:
    post:
      tags:
      - SSH-ключи
      summary: Добавление SSH-ключей на сервер
      description: "Чтобы добавить SSH-ключи на сервер, отправьте POST-запрос на `/api/v1/servers/{server_id}/ssh-keys`"
      operationId: addKeyToServer
      parameters:
      - name: server_id
        in: path
        description: Уникальный идентификатор облачного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server_id_sshkeys_body'
        required: true
      responses:
        "204":
          description: Успешное добавление SSH-ключей на сервер
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H\
          \ \"Authorization: Bearer $TIMEWEB_CLOUD_TOKEN\" \\\n  -d '{\n  \"ssh_key_ids\"\
          : [1, 2] \n}' \"https://api.timeweb.cloud/api/v1/servers/123/ssh-keys\""
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers/123/ssh-keys', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              },
              // body: '{\n  "ssh_key_ids": [1, 2] \n}',
              body: JSON.stringify({
                  'ssh_key_ids': [
                      1,
                      2
                  ]
              })
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.post(
              'https://api.timeweb.cloud/api/v1/servers/123/ssh-keys',
              // '{\n  "ssh_key_ids": [1, 2] \n}',
              {
                  'ssh_key_ids': [
                      1,
                      2
                  ]
              },
              {
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
                  }
              }
          );
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          json_data = {
              'ssh_key_ids': [
                  1,
                  2,
              ],
          }

          response = requests.post('https://api.timeweb.cloud/api/v1/servers/123/ssh-keys', headers=headers, json=json_data)

          # Note: json_data will not be serialized by requests
          # exactly as it was in the original request.
          #data = '{\n  "ssh_key_ids": [1, 2] \n}'
          #response = requests.post('https://api.timeweb.cloud/api/v1/servers/123/ssh-keys', headers=headers, data=data)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/ssh-keys');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);
          curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"ssh_key_ids\": [1, 2] \n}");

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\
          \tvar data = strings.NewReader(`{\n  \"ssh_key_ids\": [1, 2] \n}`)\n\treq,\
          \ err := http.NewRequest(\"POST\", \"https://api.timeweb.cloud/api/v1/servers/123/ssh-keys\"\
          , data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.io.OutputStreamWriter;\nimport java.lang.System;\nimport java.net.HttpURLConnection;\n\
          import java.net.URL;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic\
          \ static void main(String[] args) throws IOException {\n\t\tURL url = new\
          \ URL(\"https://api.timeweb.cloud/api/v1/servers/123/ssh-keys\");\n\t\t\
          HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"POST\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\thttpConn.setDoOutput(true);\n\t\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\n\
          \t\twriter.write(\"{\\n  \\\"ssh_key_ids\\\": [1, 2] \\n}\");\n\t\twriter.flush();\n\
          \t\twriter.close();\n\t\thttpConn.getOutputStream().close();\n\n\t\tInputStream\
          \ responseStream = httpConn.getResponseCode() / 100 == 2\n\t\t\t\t? httpConn.getInputStream()\n\
          \t\t\t\t: httpConn.getErrorStream();\n\t\tScanner s = new Scanner(responseStream).useDelimiter(\"\
          \\\\A\");\n\t\tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - SSH
  /api/v1/servers/{server_id}/ssh-keys/{ssh_key_id}:
    delete:
      tags:
      - SSH-ключи
      summary: Удаление SSH-ключей с сервера
      description: "Чтобы удалить SSH-ключ с сервера, отправьте DELETE-запрос на `/api/v1/servers/{server_id}/ssh-keys/{ssh_key_id}`"
      operationId: deleteKeyFromServer
      parameters:
      - name: server_id
        in: path
        description: Уникальный идентификатор облачного сервера.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      - name: ssh_key_id
        in: path
        description: Уникальный идентификатор SSH-ключа
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          example: 1051
      responses:
        "204":
          description: Успешное удаление SSH-ключа с сервера
        "400":
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Запрещено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "429":
          description: Слишком много запросов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-codeSamples:
      - lang: cURL
        label: cURL
        source: |-
          curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TIMEWEB_CLOUD_TOKEN" \
            "https://api.timeweb.cloud/api/v1/servers/123/ssh-keys/321"
      - lang: JavaScript
        source: |
          fetch('https://api.timeweb.cloud/api/v1/servers/123/ssh-keys/321', {
              method: 'DELETE',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${TIMEWEB_CLOUD_TOKEN}`
              }
          });
      - lang: Node
        source: |
          const axios = require('axios');

          const response = await axios.delete('https://api.timeweb.cloud/api/v1/servers/123/ssh-keys/321', {
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ' + process.env['TIMEWEB_CLOUD_TOKEN']
              }
          });
      - lang: Python
        source: |
          import os
          import requests

          headers = {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + os.getenv('TIMEWEB_CLOUD_TOKEN', ''),
          }

          response = requests.delete('https://api.timeweb.cloud/api/v1/servers/123/ssh-keys/321', headers=headers)
      - lang: PHP
        source: |
          <?php
          $ch = curl_init();
          curl_setopt($ch, CURLOPT_URL, 'https://api.timeweb.cloud/api/v1/servers/123/ssh-keys/321');
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
          curl_setopt($ch, CURLOPT_HTTPHEADER, [
              'Content-Type: application/json',
              'Authorization: Bearer ' . getenv('TIMEWEB_CLOUD_TOKEN') ?? '',
          ]);

          $response = curl_exec($ch);

          curl_close($ch);
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\
          \n\t\"os\"\n)\n\nfunc main() {\n\tclient := &http.Client{}\n\treq, err :=\
          \ http.NewRequest(\"DELETE\", \"https://api.timeweb.cloud/api/v1/servers/123/ssh-keys/321\"\
          , nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Set(\"\
          Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\"\
          , \"Bearer \" + os.Getenv(\"TIMEWEB_CLOUD_TOKEN\"))\n\tresp, err := client.Do(req)\n\
          \tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t\
          bodyText, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\
          \t}\n\tfmt.Printf(\"%s\\n\", bodyText)\n}\n"
      - lang: Java
        source: "import java.io.IOException;\nimport java.io.InputStream;\nimport\
          \ java.lang.System;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\
          import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[]\
          \ args) throws IOException {\n\t\tURL url = new URL(\"https://api.timeweb.cloud/api/v1/servers/123/ssh-keys/321\"\
          );\n\t\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n\
          \t\thttpConn.setRequestMethod(\"DELETE\");\n\n\t\thttpConn.setRequestProperty(\"\
          Content-Type\", \"application/json\");\n\t\thttpConn.setRequestProperty(\"\
          Authorization\", \"Bearer \" + System.getenv(\"TIMEWEB_CLOUD_TOKEN\"));\n\
          \n\t\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\n\
          \t\t\t\t? httpConn.getInputStream()\n\t\t\t\t: httpConn.getErrorStream();\n\
          \t\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\A\");\n\t\
          \tString response = s.hasNext() ? s.next() : \"\";\n\t\tSystem.out.println(response);\n\
          \t}\n}\n"
      x-tags-i18n:
        eng:
        - SSH
components:
  schemas:
    response_id:
      type: string
      description: "Идентификатор запроса, который можно указывать при обращении в\
        \ службу технической поддержки, чтобы помочь определить проблему."
      format: uuid
      example: 15095f25-aac3-4d60-a788-96cb5136f186
    finances:
      required:
      - autopay_card_info
      - balance
      - currency
      - discount_end_date_at
      - discount_percent
      - hourly_cost
      - hourly_fee
      - hours_left
      - monthly_cost
      - monthly_fee
      - total_paid
      type: object
      properties:
        balance:
          type: number
          description: Баланс аккаунта.
          example: 7378.3
        currency:
          type: string
          description: "Валюта, которая используется на аккаунте."
          example: RUB
        discount_end_date_at:
          type: string
          description: "Значение времени, указанное в комбинированном формате даты\
            \ и времени ISO8601, которое представляет, когда заканчивается скидка\
            \ для аккаунта."
          nullable: true
          example: 2021-02-25T11:04:15Z
        discount_percent:
          type: number
          description: Процент скидки для аккаунта.
          example: 5
        hourly_cost:
          type: number
          description: Стоимость услуг на аккаунте в час.
          example: 33.192622950819676
        hourly_fee:
          type: number
          description: Абонентская плата в час (с учетом скидок).
          example: 33.192622950819676
        monthly_cost:
          type: number
          description: Стоимость услуг на аккаунте в месяц.
          example: 24297
        monthly_fee:
          type: number
          description: Абонентская плата в месяц (с учетом скидок).
          example: 24297
        total_paid:
          type: number
          description: Общая сумма платежей на аккаунте.
          example: 29191.51
        hours_left:
          type: number
          description: Сколько часов работы услуг оплачено на аккаунте.
          nullable: true
          example: 10
        autopay_card_info:
          type: string
          description: "Информация о карте, используемой для автоплатежей."
          nullable: true
          example: 553611XXXXXX1111
      description: Платежная информация
    status:
      required:
      - company_info
      - is_blocked
      - is_permanent_blocked
      - is_send_bill_letters
      - last_password_changed_at
      - ym_client_id
      type: object
      properties:
        is_blocked:
          type: boolean
          description: "Это логическое значение, которое показывает, заблокирован\
            \ ли аккаунт."
          example: false
        is_permanent_blocked:
          type: boolean
          description: "Это логическое значение, которое показывает, заблокирован\
            \ ли аккаунт навсегда."
          example: false
        is_send_bill_letters:
          type: boolean
          description: "Это логическое значение, которое показывает, требуется ли\
            \ отправлять счета на почту."
          example: false
        company_info:
          $ref: '#/components/schemas/status_company_info'
        last_password_changed_at:
          type: string
          description: "Значение времени, указанное в комбинированном формате даты\
            \ и времени ISO8601, которое представляет, когда последний раз изменял\
            ся пароль."
          example: 2021-02-25T11:04:15Z
        ym_client_id:
          type: string
          description: Идентификатор аккаунта для яндекс метрики.
          nullable: true
      description: Статус аккаунта
    notification-setting-channel:
      type: string
      description: "Строка состояния, указывающая состояние уведомления. Может быт\
        ь «on», «off», «disabled_on» или «disabled_off»."
      example: installing
      enum:
      - "on"
      - "off"
      - disabled_on
      - disabled_off
    notification-setting-type:
      type: string
      description: "Строка, указывающая название уведомления."
      example: server_install
      enum:
      - balancer_deletion_confirmation
      - db_deletion_confirmation
      - s3_deletion_confirmation
      - k8s_deletion_confirmation
      - server_deletion_confirmation
      - server_disk_almost_filling_up
      - server_backup_created
      - server_backup_creation_error
      - server_install
      - server_reinstall
      - server_reset_password_success
      - server_reset_password_error
      - server_cloning
      - low_balance_info
      - account_blocked
      - money_transfer
      - auto_payment_success
      - auto_payment_error
    notification-setting:
      required:
      - channels
      - group
      - type
      type: object
      properties:
        channels:
          $ref: '#/components/schemas/notificationsetting_channels'
        group:
          type: string
          description: "Строка, указывающая название группы уведомления. Может быт\
            ь «security», «monitoring» или «finances»."
          example: security
          enum:
          - security
          - monitoring
          - finances
        type:
          $ref: '#/components/schemas/notification-setting-type'
      description: Статус аккаунта
    meta:
      type: object
      properties:
        total:
          type: number
          description: Общее количество элементов в коллекции.
          example: 10
      description: Вспомогательная информация о возвращаемой сущности.
    setting-condition:
      type: string
      description: "Строка состояния, указывающая состояние уведомления. Может быт\
        ь «on» или «off»."
      example: installing
      enum:
      - "on"
      - "off"
      - disabled_on
    Meta:
      title: Meta
      required:
      - total
      type: object
      properties:
        total:
          title: Total
          type: integer
          description: Число элементов в результате
    ImageStatus:
      title: ImageStatus
      type: string
      description: An enumeration.
      enum:
      - new
      - created
      - failed
      - deleted
    OS:
      title: OS
      type: string
      description: An enumeration.
      enum:
      - centos
      - almalinux
      - debian
      - bitrix
      - ubuntu
      - brainycp
      - archlinux
      - astralinux
      - windows
      - custom_os
      - other
    ImageOutAPI:
      title: ImageOutAPI
      required:
      - created_at
      - deleted_at
      - description
      - disk_id
      - id
      - is_custom
      - name
      - os
      - progress
      - size
      - status
      type: object
      properties:
        id:
          title: Id
          type: string
          description: Идентификатор образа
        status:
          description: Статус образа
          allOf:
          - $ref: '#/components/schemas/ImageStatus'
        created_at:
          title: Created At
          type: string
          description: Дата и время создания
          format: date-time
        deleted_at:
          title: Deleted At
          type: string
          description: Дата и время удаления
          format: date-time
        size:
          title: Size
          type: integer
          description: Размер в мегабайтах
        name:
          title: Name
          type: string
          description: Имя образа
        description:
          title: Description
          type: string
          description: Описание образа
        disk_id:
          title: Disk Id
          type: integer
          description: Идентификатор связанного с образом диска
        location:
          title: Location
          type: string
          description: "Локация, в которой создан образ"
        os:
          description: Операционная система образа
          allOf:
          - $ref: '#/components/schemas/OS'
        progress:
          title: Progress
          type: integer
          description: Процент создания образа
        is_custom:
          title: Is Custom
          type: boolean
          description: Признак указывающий на то является ли образ кастомным
    ImagesOutResponse:
      title: ImagesOutResponse
      required:
      - images
      - meta
      type: object
      properties:
        response_id:
          title: Response Id
          type: string
          description: Идентификатор запроса
        meta:
          title: Meta
          description: Вспомогательная информация о возвращаемой сущности
          allOf:
          - $ref: '#/components/schemas/Meta'
        images:
          title: Images
          type: array
          description: Массив объектов Образ
          items:
            $ref: '#/components/schemas/ImageOutAPI'
    BaseError:
      title: BaseError
      required:
      - error_code
      - message
      - status_code
      type: object
      properties:
        status_code:
          title: Status Code
          type: integer
        error_code:
          title: Error Code
          type: string
        message:
          title: Message
          anyOf:
          - type: string
          - type: array
            items: {}
        response_id:
          title: Response Id
          type: string
          example: 9c38a13d-ef14-45c7-a23a-1429f6a03824
    Location:
      title: Location
      type: string
      description: An enumeration.
      enum:
      - ru-1
      - ru-2
      - pl-1
      - kz-1
    ImageInAPI:
      title: ImageInAPI
      type: object
      properties:
        name:
          title: Name
          type: string
          description: Имя образа
        description:
          title: Description
          type: string
          description: Описание образа
        disk_id:
          title: Disk Id
          type: integer
          description: "Идентификатор диска, для которого создается образ"
        upload_url:
          title: Upload Url
          maxLength: 65536
          minLength: 1
          type: string
          description: Cсылка для загрузки образа
          format: uri
        location:
          description: "Локация, в которой будет создан образ"
          allOf:
          - $ref: '#/components/schemas/Location'
        os:
          description: Операционная система образа
          allOf:
          - $ref: '#/components/schemas/OS'
          default: other
      example:
        description: Мой образ для диска 123
        disk_id: 123
    ImageOutResponse:
      title: ImageOutResponse
      required:
      - image
      type: object
      properties:
        response_id:
          title: Response Id
          type: string
          description: Идентификатор запроса
        image:
          title: Image
          description: Образ
          allOf:
          - $ref: '#/components/schemas/ImageOutAPI'
    UploadSuccessful:
      title: UploadSuccessful
      required:
      - image_id
      type: object
      properties:
        image_id:
          title: Image Id
          type: string
    UploadSuccessfulResponse:
      title: UploadSuccessfulResponse
      required:
      - upload_successful
      type: object
      properties:
        response_id:
          title: Response Id
          type: string
          description: Идентификатор запроса
        upload_successful:
          $ref: '#/components/schemas/UploadSuccessful'
    ImageUpdateAPI:
      title: ImageUpdateAPI
      type: object
      properties:
        name:
          title: Name
          type: string
          description: Имя образа
        description:
          title: Description
          type: string
          description: Описание образа
      example:
        name: Имя образа
        description: Описание образа
    URLType:
      title: URLType
      type: string
      description: An enumeration.
      enum:
      - timeweb
      - google_drive
      - yandex
    UrlStatus:
      title: UrlStatus
      type: string
      description: An enumeration.
      enum:
      - process
      - failed
      - finished
      - already_exists
    ImageDownloadAPI:
      title: ImageDownloadAPI
      required:
      - created_at
      - id
      - image
      - progress
      - status
      - type
      type: object
      properties:
        id:
          title: Id
          type: string
          description: Идентификатор ссылки
        created_at:
          title: Created At
          type: string
          description: Дата и время создания ссылки
          format: date-time
        image:
          title: Image
          type: string
          description: Идентификатор образа
        type:
          description: Тип ссылки
          allOf:
          - $ref: '#/components/schemas/URLType'
        url:
          title: Url
          maxLength: 2083
          minLength: 1
          type: string
          description: Ссылка на скачивание
          format: uri
        status:
          description: Статус создания
          allOf:
          - $ref: '#/components/schemas/UrlStatus'
        progress:
          title: Progress
          type: integer
          description: Прогресс загрузки образа
    ImageDownloadsResponse:
      title: ImageDownloadsResponse
      required:
      - downloads
      - meta
      type: object
      properties:
        response_id:
          title: Response Id
          type: string
          description: Идентификатор запроса
        meta:
          title: Meta
          description: Вспомогательная информация о возвращаемой сущности
          allOf:
          - $ref: '#/components/schemas/Meta'
        downloads:
          title: Downloads
          type: array
          description: Массив объектов "Ссылка на загрузку"
          items:
            $ref: '#/components/schemas/ImageDownloadAPI'
    ImageUrlAuth:
      title: ImageUrlAuth
      required:
      - access_token
      type: object
      properties:
        access_token:
          title: Access Token
          type: string
          description: Токен доступа к API облачного хранилища
        refresh_token:
          title: Refresh Token
          type: string
          description: Токен обновления доступов к API
        expiry:
          title: Expiry
          type: string
          description: Время истечения работы токена доступа
          format: date-time
        token_type:
          title: Token Type
          type: string
          description: Тип токена доступа
          default: Bearer
      example:
        access_token: GsOL7Mmm2PQdkCQ8l1UuJDXrwNB9kdYl9j9WzlFOt0xc7NUrVxAU9Hs5VDCYjNmuxC1KVBzX5bW2AqTiyBq35hbBHYs1PtMQ93Ssur3lkGSRb13X8nuDUIjftNgV2Fpd
        token_type: Bearer
    ImageUrlIn:
      title: ImageUrlIn
      type: object
      properties:
        type:
          description: Тип ссылки
          allOf:
          - $ref: '#/components/schemas/URLType'
          default: timeweb
        filename:
          title: Filename
          type: string
          description: Имя файла для загрузки в облачное хранилище
        auth:
          title: Auth
          description: Данные для аутентификации в облачном хранилище
          allOf:
          - $ref: '#/components/schemas/ImageUrlAuth'
      example:
        type: google_drive
        filename: my_image_from_timeweb.qcow2
        auth:
          access_token: GsOL7Mmm2PQdkCQ8l1UuJDXrwNB9kdYl9j9WzlFOt0xc7NUrVxAU9Hs5VDCYjNmuxC1KVBzX5bW2AqTiyBq35hbBHYs1PtMQ93Ssur3lkGSRb13X8nuDUIjftNgV2Fpd
          token_type: Bearer
    ImageDownloadResponse:
      title: ImageDownloadResponse
      required:
      - download
      type: object
      properties:
        response_id:
          title: Response Id
          type: string
          description: Идентификатор запроса
        download:
          title: Download
          description: Объект ссылки на загрузку
          allOf:
          - $ref: '#/components/schemas/ImageDownloadAPI'
    FirewallGroupOutAPI:
      title: FirewallGroupOutAPI
      required:
      - created_at
      - description
      - id
      - name
      - updated_at
      type: object
      properties:
        id:
          title: Id
          type: string
          description: Идентификатор группы правил
        created_at:
          title: Created At
          type: string
          description: Дата и время создания
          format: date-time
        updated_at:
          title: Updated At
          type: string
          description: Дата и время последнего обновления
          format: date-time
        name:
          title: Name
          type: string
          description: Имя группы правил
        description:
          title: Description
          type: string
          description: Описание группы правил
    FirewallGroupsOutResponse:
      title: FirewallGroupsOutResponse
      required:
      - groups
      - meta
      type: object
      properties:
        response_id:
          title: Response Id
          type: string
          description: Идентификатор запроса
        meta:
          title: Meta
          description: Вспомогательная информация о возвращаемой сущности
          allOf:
          - $ref: '#/components/schemas/Meta'
        groups:
          title: Groups
          type: array
          description: Массив объектов Групп правил
          items:
            $ref: '#/components/schemas/FirewallGroupOutAPI'
    schemas-BaseError:
      title: BaseError
      required:
      - error_code
      - message
      - status_code
      type: object
      properties:
        status_code:
          title: Status Code
          type: integer
        error_code:
          title: Error Code
          type: string
        message:
          title: Message
          anyOf:
          - type: string
          - type: array
            items: {}
        response_id:
          title: Response Id
          type: string
    FirewallGroupInAPI:
      title: FirewallGroupInAPI
      required:
      - name
      type: object
      properties:
        name:
          title: Name
          type: string
          description: Имя группы правил
        description:
          title: Description
          type: string
          description: Описание группы правил
      example:
        name: Мой фаерволл
        description: Описание фаерволла
    FirewallGroupOutResponse:
      title: FirewallGroupOutResponse
      required:
      - group
      type: object
      properties:
        response_id:
          title: Response Id
          type: string
          description: Идентификатор запроса
        group:
          title: Group
          description: Группа правил
          allOf:
          - $ref: '#/components/schemas/FirewallGroupOutAPI'
    ResourceType:
      title: ResourceType
      type: string
      description: Тип линкуемого ресурса
      enum:
      - server
    FirewallGroupResourceOutAPI:
      title: FirewallGroupResourceOutAPI
      required:
      - id
      - type
      type: object
      properties:
        id:
          title: Id
          type: integer
          description: resource id
        type:
          description: Тип ресурса
          allOf:
          - $ref: '#/components/schemas/ResourceType'
    FirewallGroupResourcesOutResponse:
      title: FirewallGroupResourcesOutResponse
      required:
      - meta
      - resources
      type: object
      properties:
        response_id:
          title: Response Id
          type: string
          description: Идентификатор запроса
        meta:
          title: Meta
          description: Вспомогательная информация о возвращаемой сущности
          allOf:
          - $ref: '#/components/schemas/Meta'
        resources:
          title: Resources
          type: array
          items:
            $ref: '#/components/schemas/FirewallGroupResourceOutAPI'
    FirewallGroupResourceOutResponse:
      title: FirewallGroupResourceOutResponse
      required:
      - resource
      type: object
      properties:
        response_id:
          title: Response Id
          type: string
          description: Идентификатор запроса
        resource:
          $ref: '#/components/schemas/FirewallGroupResourceOutAPI'
    FirewallRuleDirection:
      title: FirewallRuleDirection
      type: string
      description: Направление трафика
      enum:
      - ingress
      - egress
    FirewallRuleProtocol:
      title: FirewallRuleProtocol
      type: string
      description: Сетевой протокол
      enum:
      - tcp
      - udp
      - icmp
    FirewallRuleOutAPI:
      title: FirewallRuleOutAPI
      required:
      - description
      - direction
      - group_id
      - id
      - protocol
      type: object
      properties:
        id:
          title: Id
          type: string
          description: Идентификатор правила
        description:
          title: Description
          type: string
          description: Описание правила
        direction:
          description: Egress или ingress трафик
          allOf:
          - $ref: '#/components/schemas/FirewallRuleDirection'
        protocol:
          description: Сетевой протокол
          allOf:
          - $ref: '#/components/schemas/FirewallRuleProtocol'
        port:
          title: Port
          type: string
          description: "Порт или диапазон портов, в случае tcp или udp"
        cidr:
          title: Cidr
          description: Сетевой адрес или подсеть. Поддерживаются протоколы IPv4  и
            IPv6
          anyOf:
          - type: string
            format: ipv4
          - type: string
            format: ipv6
        group_id:
          title: Group Id
          type: string
          description: Идентификатор группы правил
    FirewallRulesOutResponse:
      title: FirewallRulesOutResponse
      required:
      - meta
      - rules
      type: object
      properties:
        response_id:
          title: Response Id
          type: string
          description: Идентификатор запроса
        meta:
          title: Meta
          description: Вспомогательная информация о возвращаемой сущности
          allOf:
          - $ref: '#/components/schemas/Meta'
        rules:
          title: Rules
          type: array
          description: Массив объектов Firewall правил
          items:
            $ref: '#/components/schemas/FirewallRuleOutAPI'
    FirewallRuleInAPI:
      title: FirewallRuleInAPI
      required:
      - direction
      - protocol
      type: object
      properties:
        description:
          title: Description
          type: string
          description: Описание правила
        direction:
          description: egress или ingress трафик
          allOf:
          - $ref: '#/components/schemas/FirewallRuleDirection'
        port:
          title: Port
          type: string
          description: "Порт или диапазон портов, в случае tcp или udp"
        protocol:
          description: Сетевой протокол
          allOf:
          - $ref: '#/components/schemas/FirewallRuleProtocol'
        cidr:
          title: Cidr
          description: Сетевой адрес или подсеть. Поддерживаются протоколы IPv4  и
            IPv6
          anyOf:
          - type: string
            format: ipv4
          - type: string
            format: ipv6
      example:
        description: Открыть доступ по SSH
        direction: ingress
        port: "22"
        protocol: tcp
        cidr: 2.2.2.2/32
    FirewallRuleOutResponse:
      title: FirewallRuleOutResponse
      required:
      - rule
      type: object
      properties:
        response_id:
          title: Response Id
          type: string
          description: Идентификатор запроса
        rule:
          title: Rule
          description: Firewall правило
          allOf:
          - $ref: '#/components/schemas/FirewallRuleOutAPI'
    rule:
      required:
      - balancer_port
      - balancer_proto
      - id
      - server_port
      - server_proto
      type: object
      properties:
        id:
          type: number
          description: Уникальный идентификатор для каждого экземпляра правила для
            балансировщика. Автоматически генерируется при создании.
          example: 1
        balancer_proto:
          type: string
          description: Протокол балансировщика.
          example: https
          enum:
          - http
          - http2
          - https
          - tcp
        balancer_port:
          type: number
          description: Порт балансировщика.
          example: 80
        server_proto:
          type: string
          description: Протокол сервера.
          example: https
          enum:
          - http
          - http2
          - https
          - tcp
        server_port:
          type: number
          description: Порт сервера.
          example: 80
      description: Правило для балансировщика
    balancer:
      required:
      - algo
      - created_at
      - fall
      - id
      - inter
      - ip
      - ips
      - is_keepalive
      - is_ssl
      - is_sticky
      - is_use_proxy
      - local_ip
      - location
      - name
      - path
      - port
      - preset_id
      - proto
      - rise
      - rules
      - status
      - timeout
      type: object
      properties:
        id:
          type: number
          description: Уникальный идентификатор для каждого экземпляра балансировщика.
            Автоматически генерируется при создании.
          example: 1
        algo:
          type: string
          description: Алгоритм переключений балансировщика.
          example: roundrobin
          enum:
          - roundrobin
          - leastconn
        created_at:
          type: string
          description: "Значение времени, указанное в комбинированном формате даты\
            \ и времени ISO8601, которое представляет, когда был создан балансиров\
            щик."
          format: date-time
          example: 2022-10-25T15:15:45Z
        fall:
          type: number
          description: Порог количества ошибок.
          example: 3
        inter:
          type: number
          description: Интервал проверки.
          example: 10
        ip:
          type: string
          description: IP-адрес сетевого интерфейса IPv4.
          format: ipv4
          nullable: true
          example: 1.1.1.1
        local_ip:
          type: string
          description: Локальный IP-адрес сетевого интерфейса IPv4.
          format: ipv4
          nullable: true
          example: 1.1.1.1
        is_keepalive:
          type: boolean
          description: "Это логическое значение, которое показывает, выдает ли бал\
            ансировщик сигнал о проверке жизнеспособности."
          example: true
        name:
          type: string
          description: "Удобочитаемое имя, установленное для балансировщика."
          example: Cute Quail
        path:
          type: string
          description: Адрес балансировщика.
          example: /
        port:
          type: number
          description: Порт балансировщика.
          example: 80
        proto:
          type: string
          description: Протокол.
          example: https
          enum:
          - http
          - http2
          - https
          - tcp
        rise:
          type: number
          description: Порог количества успешных ответов.
          example: 2
        preset_id:
          type: number
          description: Идентификатор тарифа.
          example: 5
        is_ssl:
          type: boolean
          description: "Это логическое значение, которое показывает, требуется ли\
            \ перенаправление на SSL."
          example: true
        status:
          type: string
          description: Статус балансировщика.
          example: started
          enum:
          - started
          - stoped
          - starting
          - no_paid
        is_sticky:
          type: boolean
          description: "Это логическое значение, которое показывает, сохраняется л\
            и сессия."
          example: true
        timeout:
          type: number
          description: Таймаут ответа балансировщика.
          example: 5
        is_use_proxy:
          type: boolean
          description: "Это логическое значение, которое показывает, выступает ли\
            \ балансировщик в качестве прокси."
          example: true
        rules:
          type: array
          items:
            $ref: '#/components/schemas/rule'
        ips:
          type: array
          description: "Список IP-адресов, привязанных к балансировщику"
          example: []
          items:
            type: string
        location:
          type: string
          description: Географическое расположение балансировщика
          example: ru-1
          enum:
          - ru-1
          - pl-1
      description: Балансировщик
    network:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: Уникальный идентификатор сети.
          example: network-1234567890
        ip:
          type: string
          description: IP-адрес в сети.
          example: 192.168.0.0
          deprecated: true
    create-balancer:
      required:
      - algo
      - fall
      - inter
      - is_keepalive
      - is_ssl
      - is_sticky
      - is_use_proxy
      - name
      - path
      - port
      - preset_id
      - proto
      - rise
      - timeout
      type: object
      properties:
        name:
          type: string
          description: "Удобочитаемое имя, установленное для балансировщика."
          example: Cute Quail
        algo:
          type: string
          description: Алгоритм переключений балансировщика.
          example: roundrobin
          enum:
          - roundrobin
          - leastconn
        is_sticky:
          type: boolean
          description: "Это логическое значение, которое показывает, сохраняется л\
            и сессия."
          example: true
        is_use_proxy:
          type: boolean
          description: "Это логическое значение, которое показывает, выступает ли\
            \ балансировщик в качестве прокси."
          example: true
        is_ssl:
          type: boolean
          description: "Это логическое значение, которое показывает, требуется ли\
            \ перенаправление на SSL."
          example: true
        is_keepalive:
          type: boolean
          description: "Это логическое значение, которое показывает, выдает ли бал\
            ансировщик сигнал о проверке жизнеспособности."
          example: true
        proto:
          type: string
          description: Протокол.
          example: https
          enum:
          - http
          - http2
          - https
          - tcp
        port:
          type: number
          description: Порт балансировщика.
          example: 80
        path:
          type: string
          description: Адрес балансировщика.
          example: /
        inter:
          type: number
          description: Интервал проверки.
          example: 10
        timeout:
          type: number
          description: Таймаут ответа балансировщика.
          example: 5
        fall:
          type: number
          description: Порог количества ошибок.
          example: 3
        rise:
          type: number
          description: Порог количества успешных ответов.
          example: 2
        preset_id:
          type: number
          description: Идентификатор тарифа.
          example: 5
        network:
          $ref: '#/components/schemas/network'
    delete-service-response:
      required:
      - hash
      type: object
      properties:
        hash:
          type: string
          description: "Хеш, который совместно с кодом авторизации надо будет отпр\
            авить для удаления."
          example: 15095f25-aac3-4d60-a788-96cb5136f186
    update-balancer:
      type: object
      properties:
        name:
          type: string
          description: "Удобочитаемое имя, установленное для балансировщика."
          example: Cute Quail
        algo:
          type: string
          description: Алгоритм переключений балансировщика.
          example: roundrobin
          enum:
          - roundrobin
          - leastconn
        is_sticky:
          type: boolean
          description: "Это логическое значение, которое показывает, сохраняется л\
            и сессия."
          example: true
        is_use_proxy:
          type: boolean
          description: "Это логическое значение, которое показывает, выступает ли\
            \ балансировщик в качестве прокси."
          example: true
        is_ssl:
          type: boolean
          description: "Это логическое значение, которое показывает, требуется ли\
            \ перенаправление на SSL."
          example: true
        is_keepalive:
          type: boolean
          description: "Это логическое значение, которое показывает, выдает ли бал\
            ансировщик сигнал о проверке жизнеспособности."
          example: true
        proto:
          type: string
          description: Протокол.
          example: https
          enum:
          - http
          - http2
          - https
          - tcp
        port:
          type: number
          description: Порт балансировщика.
          example: 80
        path:
          type: string
          description: Адрес балансировщика.
          example: /
        inter:
          type: number
          description: Интервал проверки.
          example: 10
        timeout:
          type: number
          description: Таймаут ответа балансировщика.
          example: 5
        fall:
          type: number
          description: Порог количества ошибок.
          example: 3
        rise:
          type: number
          description: Порог количества успешных ответов.
          example: 2
    create-rule:
      required:
      - balancer_port
      - balancer_proto
      - server_port
      - server_proto
      type: object
      properties:
        balancer_proto:
          type: string
          description: Протокол балансировщика.
          example: https
          enum:
          - http
          - http2
          - https
          - tcp
        balancer_port:
          type: number
          description: Порт балансировщика.
          example: 80
        server_proto:
          type: string
          description: Протокол сервера.
          example: https
          enum:
          - http
          - http2
          - https
          - tcp
        server_port:
          type: number
          description: Порт сервера.
          example: 80
    update-rule:
      required:
      - balancer_port
      - balancer_proto
      - server_port
      - server_proto
      type: object
      properties:
        balancer_proto:
          type: string
          description: Протокол балансировщика.
          example: https
          enum:
          - http
          - http2
          - https
          - tcp
        balancer_port:
          type: number
          description: Порт балансировщика.
          example: 80
        server_proto:
          type: string
          description: Протокол сервера.
          example: https
          enum:
          - http
          - http2
          - https
          - tcp
        server_port:
          type: number
          description: Порт сервера.
          example: 80
    presets-balancer:
      required:
      - bandwidth
      - description
      - description_short
      - id
      - location
      - price
      - replica_count
      - request_per_second
      type: object
      properties:
        id:
          type: number
          description: Уникальный идентификатор для каждого экземпляра тарифа базы
            данных.
          example: 2377
        description:
          type: string
          description: Описание тарифа.
          example: Услуга Балансировщик
        description_short:
          type: string
          description: Краткое описание тарифа.
          example: Устойчивый
        bandwidth:
          type: number
          description: Пропускная способность тарифа.
          example: 100
        replica_count:
          type: number
          description: Количество реплик.
          example: 2
        request_per_second:
          type: string
          description: Запросов в секунду.
          example: 10K
        price:
          type: number
          description: Стоимость тарифа базы данных.
          example: 100
        location:
          type: string
          description: Географическое расположение тарифа.
          example: ru-1
          enum:
          - ru-1
          - pl-1
          - kz-1
    config-parameters:
      properties:
        auto_increment_increment:
          type: string
          description: Интервал между значениями столбцов с атрибутом `AUTO_INCREMENT`
            (`mysql5` | `mysql`).
          example: "1"
        auto_increment_offset:
          type: string
          description: Начальное значение для столбцов с атрибутом `AUTO_INCREMENT`
            (`mysql5` | `mysql`).
          example: "1"
        innodb_io_capacity:
          type: string
          description: Количество операций ввода-вывода в секунду `IOPS` (`mysql5`
            | `mysql`).
          example: "200"
        innodb_purge_threads:
          type: string
          description: "Количество потоков ввода-вывода, используемых для операций\
            \ очистки (`mysql5` | `mysql`)."
          example: "4"
        innodb_read_io_threads:
          type: string
          description: "Количество потоков ввода-вывода, используемых для операций\
            \ чтения (`mysql5` | `mysql`)."
          example: "4"
        innodb_thread_concurrency:
          type: string
          description: "Максимальное число потоков, которые могут исполняться (`mysql5`\
            \ | `mysql`)."
          example: "0"
        innodb_write_io_threads:
          type: string
          description: "Количество потоков ввода-вывода, используемых для операций\
            \ записи (`mysql5` | `mysql`)."
          example: "4"
        join_buffer_size:
          type: string
          description: Минимальный размер буфера (`mysql5` | `mysql`).
          example: "262144"
        max_allowed_packet:
          type: string
          description: "Максимальный размер одного пакета, строки или параметра, о\
            тправляемого функцией `mysql_stmt_send_long_data()` (`mysql5` | `mysql`)."
          example: "16777216"
        max_heap_table_size:
          type: string
          description: Максимальный размер пользовательских MEMORY-таблиц (`mysql5`
            | `mysql`).
          example: "16777216"
        autovacuum_analyze_scale_factor:
          type: string
          description: "Доля измененных или удаленных записей в таблице, при котор\
            ой процесс автоочистки выполнит команду `ANALYZE` (`postgres`)."
          example: "0.0001"
        bgwriter_delay:
          type: string
          description: Задержка между запусками процесса фоновой записи (`postgres`).
          example: "200"
        bgwriter_lru_maxpages:
          type: string
          description: Максимальное число элементов буферного кеша (`postgres`).
          example: "100"
        deadlock_timeout:
          type: string
          description: "Время ожидания, по истечении которого будет выполняться пр\
            оверка состояния перекрестной блокировки (`postgres`)."
          example: "100"
        gin_pending_list_limit:
          type: string
          description: Максимальный размер очереди записей индекса `GIN` (`postgres`).
          example: "4194304"
        idle_in_transaction_session_timeout:
          type: string
          description: "Время простоя открытой транзакции, при превышении которого\
            \ будет завершена сессия с этой транзакцией (`postgres`)."
          example: "0"
        idle_session_timeout:
          type: string
          description: "Время простоя не открытой транзакции, при превышении котор\
            ого будет завершена сессия с этой транзакцией (`postgres`)."
          example: "0"
        join_collapse_limit:
          type: string
          description: "Значение количества элементов в списке `FROM` при превышен\
            ии которого, планировщик будет переносить в список явные инструкции `JOIN`\
            \ (`postgres`)."
          example: "8"
        lock_timeout:
          type: string
          description: Время ожидания освобождения блокировки (`postgres`).
          example: "0"
        max_prepared_transactions:
          type: string
          description: "Максимальное число транзакций, которые могут одновременно\
            \ находиться в подготовленном состоянии (`postgres`)."
          example: "0"
        max_connections:
          type: string
          description: Допустимое количество соединений (`postgres` | `mysql`).
          example: "1"
        shared_buffers:
          type: string
          description: "Устанавливает количество буферов общей памяти, используемы\
            х сервером (`postgres`)."
          example: "128"
        wal_buffers:
          type: string
          description: Устанавливает количество буферов дисковых страниц в общей памяти
            для WAL (`postgres`).
          example: "16"
        temp_buffers:
          type: string
          description: "Устанавливает максимальное количество временных буферов, и\
            спользуемых каждой сессией (`postgres`)."
          example: "8"
        work_mem:
          type: string
          description: "Устанавливает максимальное количество памяти, используемое\
            \ для рабочих пространств запросов (`postgres`)."
          example: "4"
        sql_mode:
          type: string
          description: "Устанавливает режим SQL. Можно задать несколько режимов, р\
            азделяя их запятой. (`mysql`)."
          example: STRICT_TRANS_TABLES
        query_cache_type:
          type: string
          description: Параметр включает или отключает работу MySQL Query Cache (`mysql`).
          example: "0"
        query_cache_size:
          type: string
          description: "Размер в байтах, доступный для кэша запросов (`mysql`)."
          example: "0"
    database-cluster:
      required:
      - config_parameters
      - created_at
      - disk_stats
      - hash_type
      - id
      - is_enabled_public_network
      - location
      - name
      - networks
      - port
      - preset_id
      - status
      - type
      type: object
      properties:
        id:
          type: number
          description: Уникальный идентификатор для каждого экземпляра базы данных.
            Автоматически генерируется при создании.
          example: 1
        created_at:
          type: string
          description: "Значение времени, указанное в комбинированном формате даты\
            \ и времени ISO8601, которое представляет, когда была создана база дан\
            ных."
          example: 2021-02-25T11:04:15Z
        location:
          type: string
          description: Локация сервера.
          nullable: true
          example: ru-1
          enum:
          - ru-1
          - ru-2
          - pl-1
          - kz-1
        name:
          type: string
          description: Название кластера базы данных.
          example: default_db
        networks:
          type: array
          description: Список сетей кластера базы данных.
          items:
            $ref: '#/components/schemas/databasecluster_networks'
        type:
          type: string
          description: Тип кластера базы данных.
          example: mysql
          enum:
          - mysql
          - mysql5
          - postgres
          - redis
          - mongodb
        hash_type:
          type: string
          description: Тип хеширования кластера базы данных (mysql5 | mysql | postgres).
          nullable: true
          example: caching_sha2
          enum:
          - caching_sha2
          - mysql_native
          - null
        port:
          type: integer
          description: Порт
          nullable: true
          example: 3000
        status:
          type: string
          description: Текущий статус кластера базы данных.
          example: started
          enum:
          - started
          - starting
          - stopped
          - no_paid
        preset_id:
          type: integer
          description: Идентификатор тарифа.
          example: 5
        disk_stats:
          $ref: '#/components/schemas/databasecluster_disk_stats'
        config_parameters:
          $ref: '#/components/schemas/config-parameters'
        is_enabled_public_network:
          type: boolean
          description: Доступность публичного IP-адреса
          example: false
      description: Кластер базы данных
    create-cluster:
      required:
      - name
      - password
      - preset_id
      - type
      type: object
      properties:
        name:
          type: string
          description: Название кластера базы данных.
          example: default_db
        type:
          type: string
          description: Тип базы данных.
          example: mysql
          enum:
          - mysql
          - mysql5
          - postgres
          - redis
          - mongodb
        admin:
          $ref: '#/components/schemas/createcluster_admin'
        instance:
          $ref: '#/components/schemas/createcluster_instance'
        hash_type:
          type: string
          description: Тип хеширования базы данных (mysql5 | mysql | postgres).
          example: caching_sha2
          enum:
          - caching_sha2
          - mysql_native
        preset_id:
          type: integer
          description: Идентификатор тарифа.
          example: 5
        config_parameters:
          $ref: '#/components/schemas/config-parameters'
        network:
          $ref: '#/components/schemas/network'
        description:
          type: string
          description: Описание кластера базы данных
          example: description
    update-cluster:
      type: object
      properties:
        name:
          type: string
          description: Название кластера базы данных.
          example: default_db
        preset_id:
          type: integer
          description: Идентификатор тарифа.
          example: 5
        description:
          type: string
          description: Описание кластера базы данных
          example: description
        is_enabled_public_network:
          type: boolean
          description: Доступность публичного IP-адреса
          example: false
    database-admin:
      required:
      - created_at
      - description
      - host
      - id
      - instances
      - login
      - password
      type: object
      properties:
        id:
          type: number
          description: Уникальный идентификатор для каждого экземпляра пользователя
            базы данных. Автоматически генерируется при создании.
          example: 1
        created_at:
          type: string
          description: "Значение времени, указанное в комбинированном формате даты\
            \ и времени ISO8601, которое представляет, когда была создана база дан\
            ных."
          example: 2021-02-25T11:04:15Z
        login:
          type: string
          description: Имя пользователя базы данных
          example: default_login
        password:
          type: string
          description: Пароль пользователя базы данных
          example: bs.:L2f$Tm:SC~
        description:
          type: string
          description: Описанеие пользователя базы данных
          example: description
        host:
          type: string
          description: Хост пользователя
          nullable: true
          example: '%'
        instances:
          type: array
          items:
            $ref: '#/components/schemas/databaseadmin_instances'
      description: Пользователь базы данных
    create-admin:
      required:
      - login
      - password
      - privileges
      type: object
      properties:
        login:
          type: string
          description: Имя пользователя базы данных
          example: default_login
        password:
          type: string
          description: Пароль пользователя базы данных
          example: bs.:L2f$Tm:SC~
        host:
          type: string
          description: Хост пользователя
          example: '%'
        instance_id:
          type: number
          description: "Уникальный идентификатор инстанса базы данных для приминен\
            ия привилегий. В данных момент поле доступно только для кластеров MySQL.\
            \ Если поле не передано, то привилегии будут применены ко всем инстанс\
            ам"
          example: 1476
        privileges:
          type: array
          description: Список привилегий пользователя базы данных
          items:
            type: string
            enum:
            - ALTER
            - CREATE_VIEW
            - CREATE
            - DELETE
            - DROP
            - EVENT
            - INDEX
            - INSERT
            - LOCK_TABLES
            - REFERENCES
            - SELECT
            - SHOW_VIEW
            - TRUNCATE
            - UPDATE
            - READ
            - WRITE
            - CONNECTION
            - FAST
            - readWrite
            - ALTER_ROUTINE
            - CREATE_ROUTINE
            - TRANSACTION
        description:
          type: string
          description: Описание пользователя базы данных
          example: description
    update-admin:
      type: object
      properties:
        password:
          type: string
          description: Пароль пользователя базы данных
          example: bs.:L2f$Tm:SC~
        privileges:
          type: array
          description: Список привилегий пользователя базы данных
          items:
            type: string
            enum:
            - ALTER
            - CREATE_VIEW
            - CREATE
            - DELETE
            - DROP
            - EVENT
            - INDEX
            - INSERT
            - LOCK_TABLES
            - REFERENCES
            - SELECT
            - SHOW_VIEW
            - TRUNCATE
            - UPDATE
            - READ
            - WRITE
            - CONNECTION
            - FAST
            - readWrite
            - ALTER_ROUTINE
            - CREATE_ROUTINE
            - TRANSACTION
        description:
          type: string
          description: Описание пользователя базы данных
          example: description
        instance_id:
          type: number
          description: "Уникальный идентификатор инстанса базы данных для приминен\
            ия привилегий. В данных момент поле доступно только для кластеров MySQL.\
            \ Если поле не передано, то привилегии будут применены ко всем инстанс\
            ам"
          example: 1476
    database-instance:
      required:
      - created_at
      - description
      - id
      - name
      type: object
      properties:
        id:
          type: number
          description: Уникальный идентификатор для каждого экземпляра базы данных.
            Автоматически генерируется при создании.
          example: 1
        created_at:
          type: string
          description: "Значение времени, указанное в комбинированном формате даты\
            \ и времени ISO8601, которое представляет, когда была создана база дан\
            ных."
          example: 2021-02-25T11:04:15Z
        name:
          type: string
          description: Название базы данных.
          example: default_db
        description:
          type: string
          description: Описание базы данных
          example: description
      description: База данных
    create-instance:
      required:
      - name
      properties:
        name:
          type: string
          description: Название инстанса базы данных
          example: default_name
        description:
          type: string
          description: Описанеие инстанса базы данных
          example: description
    update-instance:
      properties:
        name:
          type: string
          description: Название инстанса базы данных
          example: default_name
        description:
          type: string
          description: Описанеие инстанса базы данных
          example: description
    db:
      required:
      - account_id
      - config_parameters
      - created_at
      - disk_stats
      - hash_type
      - host
      - id
      - ip
      - is_only_local_ip_access
      - local_ip
      - login
      - name
      - password
      - port
      - preset_id
      - status
      - type
      type: object
      properties:
        id:
          type: number
          description: Уникальный идентификатор для каждого экземпляра базы данных.
            Автоматически генерируется при создании.
          example: 1
        created_at:
          type: string
          description: "Значение времени, указанное в комбинированном формате даты\
            \ и времени ISO8601, которое представляет, когда была создана база дан\
            ных."
          example: 2021-02-25T11:04:15Z
        account_id:
          type: string
          description: Идентификатор пользователя.
          example: cp78562
        login:
          type: string
          description: Логин для подключения к базе данных.
          example: test_user
        location:
          type: string
          description: Локация сервера.
          example: ru-1
          enum:
          - ru-1
          - ru-2
          - pl-1
          - kz-1
        password:
          type: string
          description: Пароль для подключения к базе данных.
          example: password
        name:
          type: string
          description: Название базы данных.
          example: default_db
        host:
          type: string
          description: Хост.
          nullable: true
          example: test.ru
        type:
          type: string
          description: Тип базы данных.
          example: mysql
          enum:
          - mysql
          - mysql5
          - postgres
          - redis
          - mongodb
        hash_type:
          type: string
          description: Тип хеширования базы данных (mysql5 | mysql | postgres).
          nullable: true
          example: caching_sha2
          enum:
          - caching_sha2
          - mysql_native
          - null
        port:
          type: integer
          description: Порт
          example: 3000
        ip:
          type: string
          description: IP-адрес сетевого интерфейса IPv4.
          format: ipv4
          nullable: true
          example: 127.0.0.1
        local_ip:
          type: string
          description: IP-адрес локального сетевого интерфейса IPv4.
          format: ipv4
          nullable: true
          example: 127.0.0.1
        status:
          type: string
          description: Текущий статус базы данных.
          example: started
          enum:
          - started
          - starting
          - stoped
          - no_paid
        preset_id:
          type: integer
          description: Идентификатор тарифа.
          example: 5
        disk_stats:
          $ref: '#/components/schemas/db_disk_stats'
        config_parameters:
          $ref: '#/components/schemas/config-parameters'
        is_only_local_ip_access:
          type: boolean
          description: "Это логическое значение, которое показывает, доступна ли б\
            аза данных только по локальному IP адресу."
          example: false
      description: База данных
    create-db:
      required:
      - name
      - password
      - preset_id
      - type
      type: object
      properties:
        login:
          type: string
          description: Логин для подключения к базе данных.
          example: test_user
        password:
          type: string
          description: Пароль для подключения к базе данных.
          example: password
        name:
          type: string
          description: Название базы данных.
          example: default_db
        type:
          type: string
          description: Тип базы данных.
          example: mysql
          enum:
          - mysql
          - mysql5
          - postgres
          - redis
          - mongodb
        hash_type:
          type: string
          description: Тип хеширования базы данных (mysql5 | mysql | postgres).
          example: caching_sha2
          enum:
          - caching_sha2
          - mysql_native
        preset_id:
          type: integer
          description: Идентификатор тарифа.
          example: 5
        config_parameters:
          $ref: '#/components/schemas/config-parameters'
        network:
          $ref: '#/components/schemas/network'
    update-db:
      type: object
      properties:
        password:
          type: string
          description: Пароль для подключения к базе данных.
          example: password
        name:
          type: string
          description: Название базы данных.
          example: default_db
        preset_id:
          type: integer
          description: Идентификатор тарифа.
          example: 5
        config_parameters:
          $ref: '#/components/schemas/config-parameters'
        is_external_ip:
          type: boolean
          description: Использовать или нет внешний ip.
          example: true
      description: Дополнительные параметры конфигурации базы данных.
    auto-backup:
      required:
      - is_enabled
      properties:
        copy_count:
          type: number
          description: "Количество копий для хранения. Минимальное количество `1`,\
            \ максимальное `99`"
          example: 2
        creation_start_at:
          type: string
          description: Дата начала создания первого автобэкапа. Значение в формате
            `ISO8601`. Время не учитывается.
          format: date-time
          example: 2023-02-02T00:00:00Z
        is_enabled:
          type: boolean
          description: Включено ли автобэкапирование
          example: true
        interval:
          type: string
          description: Периодичность создания автобэкапов
          example: week
          enum:
          - day
          - week
          - month
        day_of_week:
          type: number
          description: "День недели, в который будут создаваться автобэкапы. Работ\
            ает только со значением `interval`: `week`. Доступные значение от `1 `д\
            о `7`."
          example: 1
    backup:
      required:
      - comment
      - created_at
      - id
      - name
      - progress
      - size
      - status
      - type
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор резервной копии.
          example: 1
        name:
          type: string
          description: Название резервной копии.
          example: test_name
        comment:
          type: string
          description: Комментарий.
          nullable: true
          example: test_comment
        created_at:
          type: string
          description: Дата создания.
          format: date-time
          example: 2022-10-25T15:15:45Z
        status:
          type: string
          description: Статус бэкапа.
          example: recover
          enum:
          - precreate
          - delete
          - shutdown
          - recover
          - create
          - fail
          - done
        size:
          type: integer
          description: Размер резервной копии (Мб).
          example: 200
        type:
          type: string
          description: Тип бэкапа.
          example: manual
          enum:
          - manual
          - auto
        progress:
          type: number
          description: "Прогресс создания бэкапа. Значение будет меняться в статус\
            е бэкапа `create` от 0 до 99, для остальных статусов всегда будет возв\
            ращаться 0."
          example: 50
    response-id_response_id:
      type: string
      description: "Идентификатор запроса, который можно указывать при обращении в\
        \ службу технической поддержки, чтобы помочь определить проблему."
      format: uuid
      example: 15095f25-aac3-4d60-a788-96cb5136f186
    presets-dbs:
      properties:
        id:
          type: number
          description: Уникальный идентификатор для каждого экземпляра тарифа базы
            данных.
          example: 2377
        description:
          type: string
          description: Описание тарифа.
          example: Услуга Управляемые базы данных
        description_short:
          type: string
          description: Краткое описание тарифа.
          example: Тариф 3
        cpu:
          type: number
          description: Описание процессора тарифа.
          example: 2
        ram:
          type: number
          description: Описание ОЗУ тарифа.
          example: 8
        disk:
          type: number
          description: Описание диска тарифа.
          example: 30
        type:
          type: string
          description: Тип тарифа базы данных
          example: mysql
          enum:
          - mysql
          - mysql5
          - postgres
          - redis
          - mongodb
        price:
          type: number
          description: Стоимость тарифа базы данных
          example: 100
        location:
          type: string
          description: Географическое расположение тарифа.
          example: ru-1
          enum:
          - ru-1
          - pl-1
          - kz-1
    dedicated-server:
      required:
      - additional_ip_addr_id
      - autoinstall_ready
      - bandwidth_id
      - comment
      - cp_id
      - cpu_description
      - created_at
      - hdd_description
      - id
      - ip
      - ipmi_ip
      - ipmi_login
      - ipmi_password
      - ipv6
      - location
      - name
      - network_drive_id
      - node_id
      - os_id
      - plan_id
      - price
      - ram_description
      - status
      - vnc_pass
      type: object
      properties:
        id:
          type: number
          description: Уникальный идентификатор для каждого экземпляра выделенного
            сервера. Автоматически генерируется при создании.
          example: 1
        cpu_description:
          type: string
          description: Описание параметров процессора выделенного сервера.
          example: Intel Xeon E3-1240v3
        hdd_description:
          type: string
          description: Описание параметров жёсткого диска выделенного сервера.
          example: 2 x 1 ТБ HDD
        ram_description:
          type: string
          description: Описание ОЗУ выделенного сервера.
          example: 8 Гб RAM
        created_at:
          type: string
          description: "Значение времени, указанное в комбинированном формате даты\
            \ и времени ISO8601, которое представляет, когда был создан выделенный\
            \ сервер."
          format: date-time
          example: 2022-10-25T15:15:45Z
        ip:
          type: string
          description: IP-адрес сетевого интерфейса IPv4.
          format: ipv4
          nullable: true
          example: 1.1.1.1
        ipmi_ip:
          type: string
          description: IP-адрес сетевого интерфейса IPMI.
          format: ipv4
          nullable: true
          example: 1.1.1.1
        ipmi_login:
          type: string
          description: "Логин, используемый для входа в IPMI-консоль."
          nullable: true
          example: ipmi_login
        ipmi_password:
          type: string
          description: "Пароль, используемый для входа в IPMI-консоль."
          nullable: true
          example: ipmi_password
        ipv6:
          type: string
          description: IP-адрес сетевого интерфейса IPv6.
          format: ipv6
          nullable: true
          example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334
        node_id:
          type: number
          description: Внутренний дополнительный идентификатор сервера.
          nullable: true
          example: 68
        name:
          type: string
          description: "Удобочитаемое имя, установленное для выделенного сервера."
          example: Cute Quail
        comment:
          type: string
          description: Комментарий к выделенному серверу.
          example: Development Server
        vnc_pass:
          type: string
          description: Пароль для подключения к VNC-консоли выделенного сервера.
          nullable: true
          example: vnc_pass
        status:
          type: string
          description: "Строка состояния, указывающая состояние выделенного сервер\
            а. Может быть «installing», «installed», «on» или «off»."
          example: installing
          enum:
          - installing
          - installed
          - "on"
          - "off"
        os_id:
          type: number
          description: "Уникальный идентификатор операционной системы, установленн\
            ой на выделенный сервер."
          nullable: true
          example: 44
        cp_id:
          type: number
          description: "Уникальный идентификатор панели управления, установленной\
            \ на выделенный сервер."
          nullable: true
          example: 16
        bandwidth_id:
          type: number
          description: "Уникальный идентификатор интернет-канала, установленного н\
            а выделенный сервер."
          nullable: true
          example: 11
        network_drive_id:
          type: array
          description: "Массив уникальных идентификаторов сетевых дисков, подключе\
            нных к выделенному серверу."
          nullable: true
          example:
          - 12
          - 11
          items:
            type: number
        additional_ip_addr_id:
          type: array
          description: "Массив уникальных идентификаторов дополнительных IP-адресо\
            в, подключенных к выделенному серверу."
          nullable: true
          example:
          - 2
          - 7
          items:
            type: number
        plan_id:
          type: number
          description: Уникальный идентификатор списка дополнительных услуг выделенного
            сервера.
          nullable: true
          example: 2377
        price:
          type: number
          description: Стоимость выделенного сервера.
          example: 5490
        location:
          type: string
          description: Локация сервера.
          example: ru-1
          enum:
          - ru-1
          - pl-1
          - kz-1
        autoinstall_ready:
          type: number
          description: "Количество готовых к автоматической выдаче серверов. Если\
            \ значение равно 0, сервер будет установлен через инженеров."
          example: 2
      description: Выделенный сервер
    create-dedicated-server:
      required:
      - location
      - name
      - payment_period
      - plan_id
      - preset_id
      properties:
        plan_id:
          type: number
          description: Уникальный идентификатор списка дополнительных услуг выделенного
            сервера.
          example: 2377
        preset_id:
          type: number
          description: Уникальный идентификатор тарифа выделенного сервера.
          example: 81
        os_id:
          type: number
          description: "Уникальный идентификатор операционной системы, которая буд\
            ет установлена на выделенный сервер."
          nullable: true
          example: 188
        cp_id:
          type: number
          description: "Уникальный идентификатор панели управления, которая будет\
            \ установлена на выделенный сервер."
          nullable: true
          example: 199
        bandwidth_id:
          type: number
          description: "Уникальный идентификатор интернет-канала, который будет ус\
            тановлен на выделенный сервер."
          example: 483
        network_drive_id:
          type: number
          description: "Уникальный идентификатор сетевого диска, который будет уст\
            ановлен на выделенный сервер."
          example: 483
        additional_ip_addr_id:
          type: number
          description: "Уникальный идентификатор дополнительного IP-адреса, которы\
            й будет установлен на выделенный сервер."
          nullable: true
          example: 1
        payment_period:
          type: string
          description: Период оплаты.
          example: P1M
          enum:
          - P1M
          - P3M
          - P6M
          - P1Y
        name:
          maxLength: 255
          type: string
          description: "Удобочитаемое имя выделенного сервера. Максимальная длина\
            \ — 255 символов, имя должно быть уникальным."
          example: name
        comment:
          maxLength: 255
          type: string
          description: Комментарий к выделенному серверу. Максимальная длина — 255
            символов.
          example: comment
    dedicated-server-preset:
      required:
      - cpu
      - description
      - disk
      - id
      - is_ipmi_enabled
      - location
      - memory
      type: object
      properties:
        id:
          type: number
          description: Уникальный идентификатор тарифа выделенного сервера.
          example: 3017
        description:
          type: string
          description: Описание характеристик тарифа выделенного сервера.
          example: Gold 6208U / 64 / 1N
        is_ipmi_enabled:
          type: boolean
          description: "Это логическое значение, которое показывает, доступен ли IPMI\
            \ у данного тарифа."
          example: true
        cpu:
          $ref: '#/components/schemas/dedicatedserverpreset_cpu'
        disk:
          $ref: '#/components/schemas/dedicatedserverpreset_disk'
        price:
          type: number
          description: Стоимость тарифа выделенного сервера
          example: 100
        memory:
          $ref: '#/components/schemas/dedicatedserverpreset_memory'
        location:
          type: string
          description: Локация.
          example: ru-1
          enum:
          - ru-1
          - ru-2
          - kz-1
          - pl-1
      description: Выделенный сервер
    dedicated-server-additional-service:
      required:
      - description
      - id
      - name
      - period
      - price
      - short_description
      type: object
      properties:
        id:
          type: number
          description: Уникальный идентификатор дополнительной услуги для выделенного
            сервера.
          example: 27
        price:
          type: number
          description: Стоимость (в рублях) дополнительной услуги для выделенного
            сервера.
          example: 55
        period:
          type: string
          description: Период оплаты.
          example: P1M
          enum:
          - P1D
          - P1M
          - P3M
          - P6M
          - P1Y
          - forever
        description:
          type: string
          description: Описание дополнительной услуги выделенного сервера.
          example: Дополнительный IPv6 адрес
        short_description:
          type: string
          description: Краткое описание дополнительной услуги выделенного сервера.
          example: IPv6 адрес
        name:
          type: string
          description: Уникально имя дополнительной услуги выделенного сервера.
          example: ipv6
      description: Дополнительная услуга для выделенного сервера
    ClusterOut:
      title: ClusterOut
      required:
      - created_at
      - description
      - ha
      - id
      - ingress
      - k8s_version
      - name
      - network_driver
      - preset_id
      - status
      type: object
      properties:
        id:
          title: Id
          type: integer
          description: Уникальный идентификатор кластера
        name:
          title: Name
          type: string
          description: Название
        created_at:
          title: Created At
          type: string
          description: Дата и время создания кластера в формате ISO8601
          format: date-time
        status:
          title: Status
          type: string
          description: Статус
        description:
          title: Description
          type: string
          description: Описание
        ha:
          title: Ha
          type: boolean
          description: Описание появится позже
        k8s_version:
          title: K8S Version
          type: string
          description: Версия Kubernetes
        network_driver:
          title: Network Driver
          type: string
          description: Используемый сетевой драйвер
        ingress:
          title: Ingress
          type: boolean
          description: "Логическое значение, показывающее, включен ли Ingress"
        preset_id:
          title: Preset Id
          type: integer
          description: Идентификатор тарифа мастер-ноды
        cpu:
          title: Cpu
          type: integer
          description: Общее количество ядер
          default: 0
        ram:
          title: Ram
          type: integer
          description: Общее количество памяти
          default: 0
        disk:
          title: Disk
          type: integer
          description: Общее дисковое пространство
          default: 0
    ClustersResponse:
      title: ClustersResponse
      required:
      - clusters
      - meta
      type: object
      properties:
        response_id:
          title: Response Id
          type: string
          description: Идентификатор запроса
        meta:
          title: Meta
          description: Вспомогательная информация о возвращаемой сущности
          allOf:
          - $ref: '#/components/schemas/Meta'
        clusters:
          title: Clusters
          type: array
          description: Массив объектов Кластер
          items:
            $ref: '#/components/schemas/ClusterOut'
    NodeGroupIn:
      title: NodeGroupIn
      required:
      - name
      - node_count
      - preset_id
      type: object
      properties:
        name:
          title: Name
          type: string
          description: Название группы
        preset_id:
          title: Preset Id
          type: integer
          description: Идентификатор тарифа воркер-ноды
        node_count:
          title: Node Count
          minimum: 1
          type: integer
          description: Количество нод в группе
      example:
        name: Новая группа нод
        preset_id: 399
        node_count: 1
    ClusterIn:
      title: ClusterIn
      required:
      - ha
      - ingress
      - k8s_version
      - name
      - network_driver
      - preset_id
      type: object
      properties:
        name:
          title: Name
          type: string
          description: Название кластера
        description:
          title: Description
          type: string
          description: Описание кластера
        ha:
          title: Ha
          type: boolean
          description: Описание появится позднее
        k8s_version:
          title: K8S Version
          type: string
          description: Версия Kubernetes
        network_driver:
          title: Network Driver
          type: string
          description: Тип используемого сетевого драйвера в кластере
        ingress:
          title: Ingress
          type: boolean
          description: "Логическое значение, которое показывает, использовать ли Ingress\
            \ в кластере"
        preset_id:
          title: Preset Id
          type: integer
          description: Идентификатор тарифа мастер-ноды
        worker_groups:
          title: Worker Groups
          type: array
          description: Группы воркеров в кластере
          items:
            $ref: '#/components/schemas/NodeGroupIn'
      example:
        name: Friendly Wiles
        description: Новый кластер кубернетес
        ha: false
        k8s_version: v1.22.16
        network_driver: canal
        ingress: true
        preset_id: 403
        worker_groups:
        - name: Новая группа нод
          preset_id: 399
          node_count: 1
    ClusterResponse:
      title: ClusterResponse
      required:
      - cluster
      type: object
      properties:
        response_id:
          title: Response Id
          type: string
          description: Идентификатор запроса
        cluster:
          title: Cluster
          description: Кластер
          allOf:
          - $ref: '#/components/schemas/ClusterOut'
    ClusterEdit:
      title: ClusterEdit
      type: object
      properties:
        description:
          title: Description
          type: string
          description: Новое описание кластера
          example: new description
    Resource:
      title: Resource
      type: object
      properties:
        requested:
          title: Requested
          type: number
          description: Запрошенное количество ресурса
          default: 0
        allocatable:
          title: Allocatable
          type: number
          description: Доступное количество
          default: 0
        capacity:
          title: Capacity
          type: number
          description: Общее количество
          default: 0
        used:
          title: Used
          type: number
          description: Используемое количество
          default: 0
    Resources:
      title: Resources
      type: object
      properties:
        nodes:
          title: Nodes
          type: integer
          description: Количество нод
          default: 0
        cores:
          title: Cores
          description: Процессорный ресурс
          allOf:
          - $ref: '#/components/schemas/Resource'
          default:
            requested: 0
            allocatable: 0
            capacity: 0
            used: 0
        memory:
          title: Memory
          description: Ресурс по памяти
          allOf:
          - $ref: '#/components/schemas/Resource'
          default:
            requested: 0
            allocatable: 0
            capacity: 0
            used: 0
        pods:
          title: Pods
          description: Поды в кластере
          allOf:
          - $ref: '#/components/schemas/Resource'
          default:
            requested: 0
            allocatable: 0
            capacity: 0
            used: 0
    ResourcesResponse:
      title: ResourcesResponse
      required:
      - resources
      type: object
      properties:
        response_id:
          title: Response Id
          type: string
          description: Идентификатор запроса
        resources:
          title: Resources
          description: Ресурсы кластера
          allOf:
          - $ref: '#/components/schemas/Resources'
    NodeGroupOut:
      title: NodeGroupOut
      required:
      - created_at
      - id
      - name
      - node_count
      - preset_id
      type: object
      properties:
        id:
          title: Id
          type: integer
          description: Уникальный идентификатор группы
        name:
          title: Name
          type: string
          description: Название группы
        created_at:
          title: Created At
          type: string
          description: Дата и время создания группы в формате ISO8601
          format: date-time
        preset_id:
          title: Preset Id
          type: integer
          description: Идентификатор тарифа мастер-ноды
        node_count:
          title: Node Count
          type: integer
          description: Количество нод в группе
    NodeGroupsResponse:
      title: NodeGroupsResponse
      required:
      - meta
      - node_groups
      type: object
      properties:
        response_id:
          title: Response Id
          type: string
          description: Идентификатор запроса
        meta:
          title: Meta
          description: Вспомогательная информация о возвращаемой сущности
          allOf:
          - $ref: '#/components/schemas/Meta'
        node_groups:
          title: Node Groups
          type: array
          description: Массив объектов Группа нод
          items:
            $ref: '#/components/schemas/NodeGroupOut'
    NodeGroupResponse:
      title: NodeGroupResponse
      required:
      - node_group
      type: object
      properties:
        response_id:
          title: Response Id
          type: string
          description: Идентификатор запроса
        node_group:
          title: Node Group
          description: Группа нод
          allOf:
          - $ref: '#/components/schemas/NodeGroupOut'
    NodeOut:
      title: NodeOut
      required:
      - cpu
      - created_at
      - disk
      - group_id
      - id
      - network
      - preset_id
      - ram
      - status
      - type
      type: object
      properties:
        id:
          title: Id
          type: integer
          description: Уникальный идентификатор ноды
        created_at:
          title: Created At
          type: string
          description: Дата и время создания ноды в формате ISO8601
          format: date-time
        type:
          title: Type
          type: string
          description: Тип ноды
        group_id:
          title: Group Id
          type: integer
          description: Идентификатор группы нод
        status:
          title: Status
          type: string
          description: Статус
        preset_id:
          title: Preset Id
          type: integer
          description: Идентификатор тарифа ноды
        cpu:
          title: Cpu
          type: integer
          description: Количество ядер
        ram:
          title: Ram
          type: integer
          description: Количество памяти
        disk:
          title: Disk
          type: integer
          description: Количество пространства
        network:
          title: Network
          type: integer
          description: Пропускная способность сети
    NodesResponse:
      title: NodesResponse
      required:
      - meta
      - nodes
      type: object
      properties:
        response_id:
          title: Response Id
          type: string
          description: Идентификатор запроса
        meta:
          title: Meta
          description: Вспомогательная информация о возвращаемой сущности
          allOf:
          - $ref: '#/components/schemas/Meta'
        nodes:
          title: Nodes
          type: array
          description: Массив объектов Нода
          items:
            $ref: '#/components/schemas/NodeOut'
    NodeCount:
      title: NodeCount
      required:
      - count
      type: object
      properties:
        count:
          title: Count
          minimum: 1
          type: integer
          description: Количество нод
          example: 2
    K8SVersionsResponse:
      title: K8SVersionsResponse
      required:
      - k8s_versions
      - meta
      type: object
      properties:
        response_id:
          title: Response Id
          type: string
          description: Идентификатор запроса
        meta:
          title: Meta
          description: Вспомогательная информация о возвращаемой сущности
          allOf:
          - $ref: '#/components/schemas/Meta'
        k8s_versions:
          title: K8S Versions
          type: array
          description: Массив версий k8s
          items:
            type: string
    NetworkDriversResponse:
      title: NetworkDriversResponse
      required:
      - meta
      - network_drivers
      type: object
      properties:
        response_id:
          title: Response Id
          type: string
          description: Идентификатор запроса
        meta:
          title: Meta
          description: Вспомогательная информация о возвращаемой сущности
          allOf:
          - $ref: '#/components/schemas/Meta'
        network_drivers:
          title: Network Drivers
          type: array
          description: Массив сетевых драйверов k8s
          items:
            type: string
    WorkerPresetOutApi:
      title: WorkerPresetOutApi
      required:
      - cpu
      - description
      - description_short
      - disk
      - id
      - network
      - price
      - ram
      type: object
      properties:
        id:
          title: Id
          type: integer
          description: Уникальный идентификатор тарифа
        description:
          title: Description
          type: string
          description: Описание тарифа
        description_short:
          title: Description Short
          type: string
          description: Краткое описание тарифа
        price:
          title: Price
          type: number
          description: Стоимость
        cpu:
          title: Cpu
          type: integer
          description: Количество ядер ноды
        ram:
          title: Ram
          type: integer
          description: Количество памяти ноды
        disk:
          title: Disk
          type: integer
          description: Количество пространства на ноде
        network:
          title: Network
          type: integer
          description: Пропускная способность ноды
        type:
          title: Type
          type: string
          description: Тип тарифа
          default: worker
          enum:
          - worker
    MasterPresetOutApi:
      title: MasterPresetOutApi
      required:
      - cpu
      - description
      - description_short
      - disk
      - id
      - network
      - price
      - ram
      type: object
      properties:
        id:
          title: Id
          type: integer
          description: Уникальный идентификатор тарифа
        description:
          title: Description
          type: string
          description: Описание тарифа
        description_short:
          title: Description Short
          type: string
          description: Краткое описание тарифа
        price:
          title: Price
          type: number
          description: Стоимость
        cpu:
          title: Cpu
          type: integer
          description: Количество ядер ноды
        ram:
          title: Ram
          type: integer
          description: Количество памяти ноды
        disk:
          title: Disk
          type: integer
          description: Количество пространства на ноде
        network:
          title: Network
          type: integer
          description: Пропускная способность ноды
        type:
          title: Type
          type: string
          description: Тип тарифа
          default: master
          enum:
          - master
        limit:
          title: Limit
          type: integer
          description: Ограничение по количеству воркер-нод в кластере
    PresetsResponse:
      title: PresetsResponse
      required:
      - k8s_presets
      - meta
      type: object
      properties:
        response_id:
          title: Response Id
          type: string
          description: Идентификатор запроса
        meta:
          title: Meta
          description: Вспомогательная информация о возвращаемой сущности
          allOf:
          - $ref: '#/components/schemas/Meta'
        k8s_presets:
          title: K8S Presets
          type: array
          description: Массив тарифов k8s
          items:
            discriminator:
              propertyName: type
              mapping:
                worker: '#/components/schemas/WorkerPresetOutApi'
                master: '#/components/schemas/MasterPresetOutApi'
            oneOf:
            - $ref: '#/components/schemas/WorkerPresetOutApi'
            - $ref: '#/components/schemas/MasterPresetOutApi'
    vds:
      required:
      - avatar_id
      - boot_mode
      - cloud_init
      - comment
      - configurator_id
      - cpu
      - cpu_frequency
      - created_at
      - disks
      - id
      - image
      - is_ddos_guard
      - location
      - name
      - networks
      - os
      - preset_id
      - qemu_agent
      - ram
      - root_pass
      - software
      - start_at
      - status
      - vnc_pass
      type: object
      properties:
        id:
          type: number
          description: Уникальный идентификатор для каждого экземпляра сервера. Автоматически
            генерируется при создании.
          example: 1
        name:
          type: string
          description: "Удобочитаемое имя, установленное для выделенного сервера."
          example: Cute Quail
        comment:
          type: string
          description: Комментарий к выделенному серверу.
          example: Development Server
        created_at:
          type: string
          description: Дата создания сервера в формате ISO8061.
          example: 2021-02-25T11:04:15Z
        os:
          $ref: '#/components/schemas/vds_os'
        software:
          $ref: '#/components/schemas/vds_software'
        preset_id:
          type: number
          description: Уникальный идентификатор тарифа сервера.
          nullable: true
          example: 11
        location:
          type: string
          description: Локация сервера.
          example: ru-1
          enum:
          - ru-1
          - ru-2
          - pl-1
          - kz-1
        configurator_id:
          type: number
          description: Уникальный идентификатор конфигуратора сервера.
          nullable: true
          example: 11
        boot_mode:
          type: string
          description: Режим загрузки ОС сервера.
          example: std
          enum:
          - std
          - single
          - cd
        status:
          type: string
          description: Статус сервера.
          example: "on"
          enum:
          - installing
          - software_install
          - reinstalling
          - "on"
          - "off"
          - turning_on
          - turning_off
          - hard_turning_off
          - rebooting
          - hard_rebooting
          - removing
          - removed
          - cloning
          - transfer
          - blocked
          - configuring
          - no_paid
          - permanent_blocked
        start_at:
          type: string
          description: "Значение времени, указанное в комбинированном формате даты\
            \ и времени ISO8601, которое представляет, когда был запущен сервер."
          format: date-time
          nullable: true
          example: 2022-10-25T15:15:45Z
        is_ddos_guard:
          type: boolean
          description: "Это логическое значение, которое показывает, включена ли з\
            ащита от DDOS у данного сервера."
          example: false
        cpu:
          type: number
          description: Количество ядер процессора сервера.
          example: 16
        cpu_frequency:
          type: string
          description: Частота ядер процессора сервера.
          example: "3.3"
        ram:
          type: number
          description: Размер (в Мб) ОЗУ сервера.
          example: 2048
        disks:
          type: array
          description: Список дисков сервера.
          items:
            $ref: '#/components/schemas/vds_disks'
        avatar_id:
          type: string
          description: Уникальный идентификатор аватара сервера. Описание методов
            работы с аватарами появится позднее.
          nullable: true
          example: avatar
        vnc_pass:
          type: string
          description: Пароль от VNC.
          example: password
        root_pass:
          type: string
          description: Пароль root сервера или пароль Администратора для серверов
            Windows.
          nullable: true
          example: password
        image:
          $ref: '#/components/schemas/vds_image'
        networks:
          type: array
          description: Список сетей диска.
          items:
            $ref: '#/components/schemas/vds_networks'
        cloud_init:
          type: string
          description: Cloud-init скрипт.
          nullable: true
          example: '#cloud-config'
        is_qemu_agent:
          type: boolean
          description: Включен ли QEMU-agent на сервере.
          example: true
      description: Сервер
    create-server:
      required:
      - bandwidth
      - is_ddos_guard
      - name
      properties:
        configuration:
          $ref: '#/components/schemas/createserver_configuration'
        is_ddos_guard:
          type: boolean
          description: Защита от DDoS. Серверу выдается защищенный IP-адрес с защитой
            уровня L3 / L4. Для включения защиты уровня L7 необходимо создать тикет
            в техническую поддержку.
          example: true
        os_id:
          type: number
          description: "Уникальный идентификатор операционной системы, которая буд\
            ет установлена на облачный сервер. Нельзя передавать вместе с `image_id`."
          example: 188
        image_id:
          type: string
          description: "Уникальный идентификатор образа, который будет установлен\
            \ на облачный сервер. Нельзя передавать вместе с `os_id`."
          format: uuid
        software_id:
          type: number
          description: Уникальный идентификатор программного обеспечения сервера.
          example: 199
        preset_id:
          type: number
          description: Уникальный идентификатор тарифа сервера. Нельзя передавать
            вместе с ключом `configurator`.
          example: 81
        bandwidth:
          type: number
          description: Пропускная способность тарифа. Доступные значения от 100 до
            1000 с шагом 100.
          example: 200
        name:
          maxLength: 255
          type: string
          description: "Имя облачного сервера. Максимальная длина — 255 символов,\
            \ имя должно быть уникальным."
          example: name
        avatar_id:
          type: string
          description: Уникальный идентификатор аватара сервера. Описание методов
            работы с аватарами появится позднее.
          example: avatar
        comment:
          maxLength: 255
          type: string
          description: Комментарий к облачному серверу. Максимальная длина — 255 символов.
          example: comment
        ssh_keys_ids:
          type: array
          description: Список SSH-ключей.
          items:
            type: number
            example: 1
        is_local_network:
          type: boolean
          description: Локальная сеть.
          example: false
          deprecated: true
        network:
          $ref: '#/components/schemas/network'
        cloud_init:
          type: string
          description: Cloud-init скрипт
          example: '#cloud-config'
    update-server:
      properties:
        configurator:
          $ref: '#/components/schemas/updateserver_configurator'
        os_id:
          type: number
          description: "Уникальный идентификатор операционной системы, которая буд\
            ет установлена на облачный сервер."
          example: 188
        software_id:
          type: number
          description: Уникальный идентификатор программного обеспечения сервера.
          example: 199
        preset_id:
          type: number
          description: Уникальный идентификатор тарифа сервера. Нельзя передавать
            вместе с ключом `configurator`.
          example: 81
        bandwidth:
          type: number
          description: Пропускная способность тарифа. Доступные значения от 100 до
            1000 с шагом 100.
          example: 200
        name:
          maxLength: 255
          type: string
          description: "Имя облачного сервера. Максимальная длина — 255 символов,\
            \ имя должно быть уникальным."
          example: name
        avatar_id:
          type: string
          description: Уникальный идентификатор аватара сервера. Описание методов
            работы с аватарами появится позднее.
          example: avatar
        comment:
          maxLength: 255
          type: string
          description: Комментарий к облачному серверу. Максимальная длина — 255 символов.
          example: comment
        image_id:
          type: string
          description: "Уникальный идентификатор образа, который будет установлен\
            \ на облачный сервер. Нельзя передавать вместе с `os_id`."
          format: uuid
        cloud_init:
          type: string
          description: Cloud-init скрипт
          example: '#cloud-config'
    servers-os:
      properties:
        id:
          type: number
          description: Уникальный идентификатор операционной системы.
          example: 2377
        family:
          type: string
          description: Семейство операционной системы.
          example: linux
        name:
          type: string
          description: Название операционной системы.
          example: debian
        version:
          type: string
          description: Версия операционной системы.
          example: "6.0"
        version_codename:
          type: string
          description: Кодовое имя версии операционной системы.
          example: squeeze
        description:
          type: string
          description: Описание операционной системы.
          example: ""
        requirements:
          $ref: '#/components/schemas/serversos_requirements'
    servers-preset:
      required:
      - bandwidth
      - cpu
      - cpu_frequency
      - description
      - description_short
      - disk
      - disk_type
      - id
      - is_allowed_local_network
      - location
      - price
      - ram
      - tags
      properties:
        id:
          type: number
          description: Уникальный идентификатор тарифа сервера.
          example: 2377
        location:
          type: string
          description: Локация сервера.
          example: ru-1
          enum:
          - ru-1
          - pl-1
          - kz-1
        price:
          type: number
          description: Стоимость в рублях.
          example: 199
        cpu:
          type: number
          description: Количество ядер процессора.
          example: 1
        cpu_frequency:
          type: string
          description: Частота процессора.
          example: "3.3"
        ram:
          type: number
          description: Количество (в Мб) оперативной памяти.
          example: 1024
        disk:
          type: number
          description: Размер диска (в Мб).
          example: 15360
        disk_type:
          type: string
          description: Тип диска.
          example: nvme
          enum:
          - ssd
          - nvme
          - hdd
        bandwidth:
          type: number
          description: Пропускная способность тарифа.
          example: 200
        description:
          type: string
          description: Описание тарифа.
          example: description
        description_short:
          type: string
          description: Короткое описание тарифа.
          example: description_short
        is_allowed_local_network:
          type: boolean
          description: Есть возможность подключения локальной сети
          example: false
        tags:
          type: array
          description: Список тегов тарифа.
          items:
            type: string
    servers-configurator:
      required:
      - cpu_frequency
      - disk_type
      - id
      - is_allowed_local_network
      - location
      - requirements
      properties:
        id:
          type: number
          description: Уникальный идентификатор конфигуратора сервера.
          example: 3
        location:
          type: string
          description: Локация сервера.
          example: ru-1
          enum:
          - ru-1
          - pl-1
          - kz-1
        disk_type:
          type: string
          description: Тип диска.
          example: nvme
          enum:
          - ssd
          - nvme
          - hdd
        is_allowed_local_network:
          type: boolean
          description: Есть возможность подключения локальной сети
          example: true
        cpu_frequency:
          type: string
          description: Частота процессора.
          example: "3.3"
        requirements:
          $ref: '#/components/schemas/serversconfigurator_requirements'
    servers-software:
      properties:
        id:
          type: number
          description: Уникальный идентификатор ПО из маркетплейса.
          example: 2377
        name:
          type: string
          description: Имя ПО из маркетплейса.
          example: iRedMail
        os_ids:
          type: array
          description: "Список id операционных систем, на которых доступна установ\
            ка ПО."
          items:
            type: number
            example: 2
        description:
          type: string
          description: Описание ПО из маркетплейса.
          example: iRedMail - полноценный почтовый сервер под Linux
        installations:
          type: number
          description: Количество установок ПО.
          example: 1
        requirements:
          $ref: '#/components/schemas/serverssoftware_requirements'
    server-ip:
      required:
      - ip
      - is_main
      - ptr
      - type
      type: object
      properties:
        type:
          type: string
          description: Тип IP-адреса сети.
          example: ipv4
          enum:
          - ipv4
          - ipv6
        ip:
          type: string
          description: IP-адрес сети.
          example: 0.0.0.0
        ptr:
          type: string
          description: Запись имени узла.
          example: ptr
        is_main:
          type: boolean
          description: Является ли сеть основной.
          example: true
      description: IP-адрес сервера
    server-log:
      required:
      - event
      - id
      - logged_at
      type: object
      properties:
        id:
          type: number
          description: Уникальный идентификатор диска.
          example: 1
        logged_at:
          type: string
          description: Дата лога.
          format: date-time
          example: 2022-10-25T15:15:45Z
        event:
          type: string
          description: Событие сервера.
          example: install
      description: Лог сервера
    server-disk:
      required:
      - id
      - is_mounted
      - is_system
      - size
      - status
      - system_name
      - type
      - used
      type: object
      properties:
        id:
          type: number
          description: Уникальный идентификатор диска.
          example: 1
        size:
          type: number
          description: Размер диска (в Мб).
          example: 10240
        used:
          type: number
          description: Количество использованной памяти диска (в Мб).
          example: 5120
        type:
          type: string
          description: Тип диска.
          example: nvme
        is_mounted:
          type: boolean
          description: Является ли диск примонтированным.
          example: true
        is_system:
          type: boolean
          description: Является ли диск системным.
          example: false
        system_name:
          type: string
          description: Системное название диска.
          example: vda
        status:
          type: string
          description: Статус диска.
          example: done
      description: Диск сервера
    server-backup:
      required:
      - comment
      - created_at
      - id
      - name
      - progress
      - size
      - status
      - type
      type: object
      properties:
        id:
          type: number
          description: Уникальный идентификатор бэкапа сервера.
          example: 3
        name:
          type: string
          description: Название бэкапа.
          example: name
        comment:
          type: string
          description: Комментарий к бэкапу.
          nullable: true
          example: comment
        created_at:
          type: string
          description: Дата создания бэкапа.
          example: 2022-08-24T14:15:22Z
        status:
          type: string
          description: Статус бэкапа.
          example: create
          enum:
          - precreate
          - delete
          - shutdown
          - recover
          - create
          - fail
          - done
        size:
          type: number
          description: Размер бэкапа (в Мб).
          example: 10240
        type:
          type: string
          description: Тип бэкапа.
          example: manual
          enum:
          - manual
          - auto
        progress:
          type: number
          description: "Прогресс создания бэкапа. Значение будет меняться в статус\
            е бэкапа `create` от 0 до 99, для остальных статусов всегда будет возв\
            ращаться 0."
          example: 50
    project:
      required:
      - account_id
      - avatar_id
      - description
      - id
      - is_default
      - name
      type: object
      properties:
        id:
          type: number
          description: Уникальный идентификатор для каждого проекта. Автоматически
            генерируется при создании.
          example: 1
        account_id:
          type: string
          description: Идентификатор пользователя.
          example: cp78562
        avatar_id:
          type: string
          description: Идентификатор аватара пользователя. Описание методов работы
            с аватарами появится позднее.
          nullable: true
          example: "1664446660062"
        description:
          type: string
          description: Описание проекта.
          example: Project description
        name:
          type: string
          description: Удобочитаемое имя проекта.
          example: Project
        is_default:
          type: boolean
          description: "Это логическое значение, которое показывает, выбран ли про\
            ект по умолчанию для создания новых сущностей."
          example: true
      description: Проект
    create-project:
      required:
      - name
      properties:
        name:
          maxLength: 255
          type: string
          description: Удобочитаемое имя проекта. Максимальная длина — 255 символов.
          example: Name
        description:
          maxLength: 255
          type: string
          description: Описание проекта. Максимальная длина — 255 символов.
          nullable: true
          example: Description
        avatar_id:
          maxLength: 255
          type: string
          description: Идентификатор аватара пользователя. Описание методов работы
            с аватарами появится позднее.
          nullable: true
          example: "1664446660062"
    update-project:
      properties:
        name:
          maxLength: 255
          type: string
          description: Удобочитаемое имя проекта. Максимальная длина — 255 символов.
          example: Name
        description:
          maxLength: 255
          type: string
          description: Описание проекта. Максимальная длина — 255 символов.
          nullable: true
          example: Description
        avatar_id:
          maxLength: 255
          type: string
          description: Идентификатор аватара пользователя. Описание методов работы
            с аватарами появится позднее.
          nullable: true
          example: "1664446660062"
    project-resource:
      required:
      - created_at
      - id
      - project
      - resource_id
      - type
      type: object
      properties:
        id:
          type: number
          description: Уникальный идентификатор для каждого ресурса проекта. Автоматически
            генерируется при создании.
          example: 1
        created_at:
          type: string
          description: "Значение времени, указанное в комбинированном формате даты\
            \ и времени ISO8601, которое представляет, когда был создан ресурс."
          example: 2021-02-25T11:04:15Z
        resource_id:
          type: number
          description: "Идентификатор ресурса проекта (сервера, хранилища, кластер\
            а, балансировщика, базы данных или выделенного сервера)."
          example: 1
        project:
          $ref: '#/components/schemas/project'
        type:
          type: string
          description: Тип ресурса проекта
          example: server
          enum:
          - server
          - balancer
          - database
          - kubernetes
          - storage
          - dedicated
      description: Ресурс проекта
    bucket:
      required:
      - access_key
      - disk_stats
      - hostname
      - id
      - location
      - name
      - object_amount
      - preset_id
      - secret_key
      - status
      - type
      type: object
      properties:
        id:
          type: number
          description: Уникальный идентификатор для каждого экземпляра хранилища.
            Автоматически генерируется при создании.
          example: 1
        name:
          type: string
          description: "Удобочитаемое имя, установленное для хранилища."
          example: Cute Quail
        disk_stats:
          $ref: '#/components/schemas/bucket_disk_stats'
        type:
          type: string
          description: Тип хранилища.
          example: public
          enum:
          - private
          - public
        preset_id:
          type: number
          description: Идентификатор тарифа хранилища.
          nullable: true
          example: 389
        status:
          type: string
          description: Статус хранилища.
          example: created
          enum:
          - no_paid
          - created
          - transfer
        object_amount:
          type: number
          description: Количество файлов в хранилище.
          example: 5
        location:
          type: string
          description: Регион хранилища.
          example: ru-1
        hostname:
          type: string
          description: Адрес хранилища для подключения.
          example: s3.timeweb.com
        access_key:
          type: string
          description: Ключ доступа от хранилища.
          example: access_key
        secret_key:
          type: string
          description: Секретный ключ доступа от хранилища.
          example: secret_key
      description: Хранилище S3
    clusterk8s:
      required:
      - cpu
      - created_at
      - description
      - disk
      - ha
      - id
      - ingress
      - k8s_version
      - name
      - network_driver
      - preset_id
      - ram
      - status
      type: object
      properties:
        id:
          type: number
          description: Уникальный идентификатор для каждого экземпляра крастера. Автоматически
            генерируется при создании.
          example: 1
        name:
          type: string
          description: "Удобочитаемое имя, установленное для кластера."
          example: Cute Quail
        created_at:
          type: string
          description: "Значение времени, указанное в комбинированном формате даты\
            \ и времени ISO8601, которое представляет, когда был создан кластер."
          format: date-time
          example: 2022-10-25T15:15:45Z
        status:
          type: string
          description: Статус кластера.
          example: active
          enum:
          - installing
          - provisioning
          - active
          - unpaid
        description:
          type: string
          description: Описание кластера.
          example: Описание
        ha:
          type: boolean
          description: Описание появится позднее.
          example: false
        k8s_version:
          type: string
          description: Версия k8s.
          example: v1.19.16
        network_driver:
          type: string
          description: Описание появится позднее.
          example: canal
        ingress:
          type: boolean
          description: Описание появится позднее.
          example: true
        cpu:
          type: number
          description: Количество ядер процессора кластера.
          example: 1
        ram:
          type: number
          description: Количество (в Мб) оперативной памяти кластера.
          example: 1024
        disk:
          type: number
          description: Размер (в Гб) диска кластера.
          example: 30
        preset_id:
          type: number
          description: Тип сервиса кластера.
          example: 403
      description: Кластер
    resource-transfer:
      required:
      - resource_id
      - resource_type
      - to_project
      properties:
        to_project:
          type: number
          description: "Идентификатор проекта, куда переносится ресурс."
          example: 1
        resource_id:
          type: number
          description: "Идентификатор перемещаемого ресурса (сервера, хранилища, к\
            ластера, балансировщика, базы данных или выделенного сервера)."
          example: 1
        resource_type:
          type: string
          description: Тип перемещаемого ресурса.
          example: server
          enum:
          - server
          - balancer
          - database
          - kubernetes
          - storage
          - dedicated
    presets-storage:
      required:
      - description
      - description_short
      - disk
      - id
      - location
      - price
      type: object
      properties:
        id:
          type: number
          description: Уникальный идентификатор для каждого экземпляра тарифа хранилища.
          example: 2377
        description:
          type: string
          description: Описание тарифа.
          example: Услуга Хранилище S3
        description_short:
          type: string
          description: Краткое описание тарифа.
          example: Start
        disk:
          type: number
          description: Описание диска хранилища.
          example: 30
        price:
          type: number
          description: Стоимость тарифа хранилища.
          example: 100
        location:
          type: string
          description: Географическое расположение тарифа.
          example: ru-1
          enum:
          - ru-1
          - pl-1
          - kz-1
      description: Тариф
    bucket-user:
      required:
      - access_key
      - id
      - secret_key
      type: object
      properties:
        id:
          type: number
          description: Уникальный идентификатор пользователя.
          example: 1
        access_key:
          type: string
          description: Логин пользователя.
          example: name
        secret_key:
          type: string
          description: Пароль пользователя.
          example: password
      description: Пользователь хранилища
    transfer-status:
      required:
      - errors
      - status
      - total_count
      - total_size
      - tries
      - uploaded_count
      - uploaded_size
      type: object
      properties:
        status:
          type: string
          description: Общий статус трансфера.
          example: started
          enum:
          - started
          - suspended
          - failed
        tries:
          type: number
          description: Количество попыток.
          example: 1
        total_count:
          type: number
          description: Общее количество затронутых объектов.
          example: 0
        total_size:
          type: number
          description: Общий размер затронутых объектов.
          example: 0
        uploaded_count:
          type: number
          description: Количество перемещенных объектов.
          example: 0
        uploaded_size:
          type: number
          description: Размер перемещенных объектов.
          example: 0
        errors:
          type: array
          items:
            $ref: '#/components/schemas/transferstatus_errors'
      description: Статус трансфера.
    s3-subdomain:
      required:
      - cert_released
      - id
      - status
      - subdomain
      - tries
      type: object
      properties:
        id:
          type: number
          description: Уникальный идентификатор поддомена.
          example: 1
        subdomain:
          type: string
          description: Поддомен.
          example: test.example.com
        cert_released:
          type: string
          description: "Значение времени, указанное в комбинированном формате даты\
            \ и времени ISO8601, которое представляет, когда был выдан SSL сертифи\
            кат."
          format: date-time
          example: 2022-10-25T15:15:45Z
        tries:
          type: number
          description: Количество попыток перевыпустить SSL сертификат.
          example: 1
        status:
          type: string
          description: Поддомен.
          enum:
          - ssl_released
          - ssl_not_requested
          - ssl_re_release_error
      description: Поддомен.
    added-subdomain:
      required:
      - status
      - subdomain
      type: object
      properties:
        subdomain:
          type: string
          description: Поддомен.
          example: test.example.com
        status:
          type: string
          description: Результат добавления поддомена.
          example: success
          enum:
          - success
          - empty_cname
          - duplicate
          - failed
      description: Добавленный поддомен.
    s3-object:
      required:
      - type
      type: object
      properties:
        key:
          minLength: 1
          type: string
          description: Название файла или папки.
          example: test.jpg
        last_modified:
          type: string
          description: "Значение времени, указанное в комбинированном формате даты\
            \ и времени ISO8601, которое представляет, когда была сделана последня\
            я модификация файла или папки."
          format: date-time
        etag:
          type: string
          description: Тег.
          example: d41d8cd98f00b204e9800998ecf8427e
        size:
          type: integer
          description: Размер (в байтах) файла или папки.
          example: 21403
        storage_class:
          type: string
          description: Класс хранилища.
          example: Default
        checksum_algorithm:
          type: array
          description: Алгоритм
          example: []
          items:
            type: string
        owner:
          $ref: '#/components/schemas/s3object_owner'
        type:
          type: string
          description: Тип (файл или папка).
          example: file
          enum:
          - file
          - directory
      description: An object consists of data and its descriptive metadata.
    api-key:
      required:
      - created_at
      - expired_at
      - id
      - is_able_to_delete
      - name
      type: object
      properties:
        id:
          type: string
          description: Уникальный идентификатор токена.
          format: uuid
          example: 913a3a06-1eb9-4e9c-bc63-6ca6944e883b
        created_at:
          type: string
          description: "Значение времени, указанное в комбинированном формате даты\
            \ и времени ISO8601, которое представляет, когда был создан токен."
          format: date-time
          example: 2022-10-25T15:15:45Z
        name:
          type: string
          description: Имя токена.
          example: Example
        expired_at:
          type: string
          description: "Значение времени, указанное в комбинированном формате даты\
            \ и времени ISO8601, которое представляет, когда истекает токен."
          format: date-time
          nullable: true
          example: 2022-10-25T15:15:45Z
        is_able_to_delete:
          type: boolean
          description: "Это логическое значение, которое показывает, можно ли удал\
            ять управляемые сервисы при помощи данного токена без подтверждения че\
            рез Телеграм, когда это подтверждение включено."
          example: true
      description: Токен.
    create-api-key:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: "Имя, установленное для токена."
          example: Example
        expire:
          type: string
          description: "Значение времени, указанное в комбинированном формате даты\
            \ и времени ISO8601, которое представляет, когда истекает токен."
          format: date-time
          example: 2022-10-25T15:15:45Z
        is_able_to_delete:
          type: boolean
          description: "Это логическое значение, которое показывает, можно ли удал\
            ять управляемые сервисы при помощи данного токена без подтверждения че\
            рез Телеграм, когда это подтверждение включено."
          example: true
    created-api-key:
      required:
      - created_at
      - expired_at
      - id
      - name
      - token
      type: object
      properties:
        token:
          type: string
          description: "Созданный токен, будет показан только один раз, его необхо\
            димо сохранить."
        id:
          type: string
          description: Уникальный идентификатор токена.
          format: uuid
          example: 913a3a06-1eb9-4e9c-bc63-6ca6944e883b
        created_at:
          type: string
          description: "Значение времени, указанное в комбинированном формате даты\
            \ и времени ISO8601, которое представляет, когда был создан токен."
          format: date-time
          example: 2022-10-25T15:15:45Z
        name:
          type: string
          description: Имя токена.
          example: Example
        expired_at:
          type: string
          description: "Значение времени, указанное в комбинированном формате даты\
            \ и времени ISO8601, которое представляет, когда истекает токен."
          format: date-time
          nullable: true
          example: 2022-10-25T15:15:45Z
      description: Токен.
    refresh-api-key:
      type: object
      properties:
        expire:
          type: string
          description: "Значение времени, указанное в комбинированном формате даты\
            \ и времени ISO8601, которое представляет, когда истекает токен."
          format: date-time
          example: 2022-10-25T15:15:45Z
    edit-api-key:
      type: object
      properties:
        name:
          type: string
          description: "Имя, установленное для токена."
          example: Example
        is_able_to_delete:
          type: boolean
          description: "Это логическое значение, которое показывает, можно ли удал\
            ять управляемые сервисы при помощи данного токена без подтверждения че\
            рез Телеграм, когда это подтверждение включено."
          example: true
    add-countries:
      required:
      - status
      - value
      type: object
      properties:
        value:
          type: string
          description: Страна.
          example: RU
        status:
          type: string
          description: Результат добавления страны.
          example: success
          enum:
          - success
          - conflict
    remove-countries:
      required:
      - status
      - value
      type: object
      properties:
        value:
          type: string
          description: Страна.
          example: RU
        status:
          type: string
          description: Результат удаления страны.
          example: success
          enum:
          - success
          - not_found
    add-ips:
      required:
      - status
      - value
      type: object
      properties:
        value:
          type: string
          description: IP-адрес.
          format: ipv4
          example: 123.231.125.128
        status:
          type: string
          description: Результат добавления IP-адреса.
          example: success
          enum:
          - success
          - conflict
    remove-ips:
      required:
      - status
      - value
      type: object
      properties:
        value:
          type: string
          description: IP-адрес.
          format: ipv4
          example: 123.231.125.128
        status:
          type: string
          description: Результат удаления IP-адреса.
          example: success
          enum:
          - success
          - not_found
    mailbox:
      required:
      - auto_reply
      - comment
      - forwarding_incoming
      - forwarding_outgoing
      - fqdn
      - idn_name
      - is_dovecot
      - is_webmail
      - mailbox
      - password
      - spam_filter
      - usage_space
      type: object
      properties:
        auto_reply:
          $ref: '#/components/schemas/mailbox_auto_reply'
        spam_filter:
          $ref: '#/components/schemas/mailbox_spam_filter'
        forwarding_incoming:
          $ref: '#/components/schemas/mailbox_forwarding_incoming'
        forwarding_outgoing:
          $ref: '#/components/schemas/mailbox_forwarding_outgoing'
        comment:
          type: string
          description: Комментарий к почтовому ящику
          example: some comment
        fqdn:
          type: string
          description: Домен почты
          example: timeweb.ru
        mailbox:
          type: string
          description: Название почтового ящика
          example: mailbox
        password:
          type: string
          description: Пароль почтового ящика
          example: ps3-1asZa
        usage_space:
          type: number
          description: Использованное место на почтовом ящике (в Мб)
          example: 512
        is_webmail:
          type: boolean
          description: Доступен ли Webmail
          example: false
        idn_name:
          type: string
          description: IDN домен почтового ящика
          example: timeweb.ru
        is_dovecot:
          type: boolean
          description: Есть ли доступ через dovecot
          example: false
      description: Почтовый ящик
    quota:
      required:
      - total
      - used
      type: object
      properties:
        total:
          type: number
          description: Общее количество места на почте (в Мб).
          example: 1024
        used:
          type: number
          description: Занятое место на почте (в Мб).
          example: 512
      description: Почтовая квота
    domain-info:
      required:
      - email
      - used
      type: object
      properties:
        email:
          type: string
          description: Адрес для сбора почты с ошибочных ящиков
          example: "1024"
        used:
          type: number
          description: Использованное место на почте (в Мб).
          example: 512
      description: Почтовая информация о домене
    auto-reply-is-disabled:
      title: Если автоответчик выключен
      required:
      - is_enabled
      type: object
      properties:
        is_enabled:
          type: boolean
          description: Включен ли автоответчик на входящие письма
          example: true
        message:
          type: string
          description: Сообщение автоответчика на входящие письма
          example: some message
        subject:
          type: string
          description: Тема сообщения автоответчика на входящие письма.
          example: some subject
    auto-reply-is-enabled:
      title: Если автоответчик включен
      type: object
      properties:
        is_enabled:
          type: boolean
          description: Включен ли автоответчик на входящие письма
          example: true
        message:
          type: string
          description: |-
            Сообщение автоответчика на входящие письма. \
             Если передан параметр `is_enabled`: `false`, то значение передавать нельзя
          example: some message
        subject:
          type: string
          description: |-
            Тема сообщения автоответчика на входящие письма. \
             Если передан параметр `is_enabled`: `false`, то значение передавать нельзя
          example: some subject
    spam-filter-is-disabled:
      title: Если спам-фильтр выключен
      required:
      - is_enabled
      type: object
      properties:
        is_enabled:
          type: boolean
          description: Включен ли спам-фильтр
          example: true
        action:
          type: string
          description: |-
            Что делать с письмами, которые попадают в спам. \
             Параметры: \
             `move_to_directory` - переместить в паку спам; \
             `forward` - переслать письмо на другой адрес; \
             `delete` - удалить письмо; \
             `tag` - пометить письмо;
          example: forward
          enum:
          - move_to_directory
          - forward
          - delete
          - tag
        forward_to:
          type: string
          description: "Адрес для пересылки при выбранном действии `forward` из па\
            раметра `action`. Не может быть пустым, если `action` выбран `forward`"
          example: test@timeweb.ru
        white_list:
          type: array
          description: Белый список адресов от которых письма не будут попадать в
            спам
          items:
            type: string
            example: test@timeweb.ru
    spam-filter-is-enabled:
      title: Если спам-фильтр включен
      type: object
      properties:
        is_enabled:
          type: boolean
          description: Включен ли спам-фильтр
          example: true
        action:
          type: string
          description: |-
            Что делать с письмами, которые попадают в спам. \
             Параметры: \
             `move_to_directory` - переместить в паку спам; \
             `forward` - переслать письмо на другой адрес; \
             `delete` - удалить письмо; \
             `tag` - пометить письмо; \
             Если передан параметр `is_enabled`: `false`, то значение передавать нельзя
          example: forward
          enum:
          - move_to_directory
          - forward
          - delete
          - tag
        forward_to:
          type: string
          description: |-
            Адрес для пересылки при выбранном действии `forward` из параметра `action`. Не может быть пустым, если `action` выбран `forward`. \
             Если передан параметр `is_enabled`: `false`, то значение передавать нельзя
          example: test@timeweb.ru
        white_list:
          type: array
          description: |-
            Белый список адресов от которых письма не будут попадать в спам. \
             Если передан параметр `is_enabled`: `false`, то значение передавать нельзя
          items:
            type: string
            example: test@timeweb.ru
    forwarding-incoming-is-disabled:
      title: Если пересылка входящих выключена
      required:
      - is_enabled
      type: object
      properties:
        is_enabled:
          type: boolean
          description: Включена ли пересылка входящик писем
          example: true
        is_delete_messages:
          type: boolean
          description: Удалять ли входящие письма
          example: false
        incoming_list:
          type: array
          description: "Список адресов для пересылки. Не должен быть пустым при пе\
            редачи параметра `is_enabled`: `true`"
          items:
            type: string
            example: test@timeweb.ru
    forwarding-incoming-is-enabled:
      title: Если пересылка входящих включена
      type: object
      properties:
        is_enabled:
          type: boolean
          description: Включена ли пересылка входящик писем
          example: true
        is_delete_messages:
          type: boolean
          description: |-
            Удалять ли входящие письма. \
             Если передан параметр `is_enabled`: `false`, то значение передавать нельзя
          example: false
        incoming_list:
          type: array
          description: |-
            Список адресов для пересылки. \
             Если передан параметр `is_enabled`: `false`, то значение передавать нельзя
          items:
            type: string
            example: test@timeweb.ru
    forwarding-outgoing-is-disabled:
      title: Если пересылка исходящих выключена
      required:
      - is_enabled
      type: object
      properties:
        is_enabled:
          type: boolean
          description: Включена ли пересылка исходящих писем
          example: true
        outgoing_to:
          type: string
          description: Адрес для пересылки исходящих писем
          example: test@timeweb.ru
    forwarding-outgoing-is-enabled:
      title: Если пересылка исходящих включена
      type: object
      properties:
        is_enabled:
          type: boolean
          description: |-
            Включена ли пересылка исходящих писем. \
             Если передан параметр `is_enabled`: `false`, то значение передавать нельзя
          example: true
        outgoing_to:
          type: string
          description: |-
            Адрес для пересылки исходящих писем. \
             Если передан параметр `is_enabled`: `false`, то значение передавать нельзя
          example: test@timeweb.ru
    update-mailbox:
      type: object
      properties:
        auto_reply:
          type: object
          description: Автоответчик на входящие письма
          oneOf:
          - $ref: '#/components/schemas/auto-reply-is-disabled'
          - $ref: '#/components/schemas/auto-reply-is-enabled'
        spam_filter:
          type: object
          description: Спам-фильтр
          oneOf:
          - $ref: '#/components/schemas/spam-filter-is-disabled'
          - $ref: '#/components/schemas/spam-filter-is-enabled'
        forwarding_incoming:
          type: object
          description: Пересылка входящик писем.
          oneOf:
          - $ref: '#/components/schemas/forwarding-incoming-is-disabled'
          - $ref: '#/components/schemas/forwarding-incoming-is-enabled'
        forwarding_outgoing:
          type: object
          description: Пересылка исходящих писем
          oneOf:
          - $ref: '#/components/schemas/forwarding-outgoing-is-disabled'
          - $ref: '#/components/schemas/forwarding-outgoing-is-enabled'
        comment:
          type: string
          description: Комментарий к почтовому ящику
          example: some comment
        password:
          type: string
          description: Пароль почтового ящика
          example: ps3-1asZa
      description: Изменение почтового ящика
    domain-payment-period:
      type: string
      description: Период оплаты (для доменов в зонах .ru и .рф только 1-3 года).
      example: P1Y
      enum:
      - P1Y
      - P2Y
      - P3Y
      - P4Y
      - P5Y
      - P6Y
      - P7Y
      - P8Y
      - P9Y
      - P10Y
    subdomain:
      required:
      - fqdn
      - id
      - linked_ip
      type: object
      properties:
        fqdn:
          type: string
          description: Полное имя поддомена.
          example: sub.somedomain.ru
        id:
          type: number
          description: Уникальный идентификатор поддомена.
          example: 123
        linked_ip:
          type: string
          description: Привязанный к поддомену IP-адрес.
          nullable: true
    domain:
      required:
      - allowed_buy_periods
      - days_left
      - domain_status
      - expiration
      - fqdn
      - id
      - is_autoprolong_enabled
      - is_premium
      - is_prolong_allowed
      - is_technical
      - is_whois_privacy_enabled
      - linked_ip
      - paid_till
      - person_id
      - premium_prolong_cost
      - provider
      - request_status
      - subdomains
      - tld_id
      type: object
      properties:
        allowed_buy_periods:
          type: array
          description: Допустимые периоды продления домена.
          items:
            $ref: '#/components/schemas/domain_allowed_buy_periods'
        days_left:
          type: number
          description: "Количество дней, оставшихся до конца срока регистрации дом\
            ена."
          example: 100
        domain_status:
          type: string
          description: Статус домена.
          example: paid
          enum:
          - awaiting_payment
          - expired
          - final_expired
          - free
          - no_paid
          - ns_based
          - paid
          - soon_expire
          - today_expired
        expiration:
          type: string
          description: "Дата окончания срока регистрации домена, для доменов без с\
            рока окончания регистрации будет приходить 0000-00-00."
          example: 0000-00-00
        fqdn:
          type: string
          description: Полное имя домена.
          example: somedomain.ru
        id:
          type: number
          description: Уникальный идентификатор домена.
          example: 123
        is_autoprolong_enabled:
          type: boolean
          description: "Это логическое значение, которое показывает, включено ли а\
            втопродление домена."
          nullable: true
          example: true
        is_premium:
          type: boolean
          description: "Это логическое значение, которое показывает, является ли д\
            омен премиальным."
          example: true
        is_prolong_allowed:
          type: boolean
          description: "Это логическое значение, которое показывает, можно ли сейч\
            ас продлить домен."
          example: true
        is_technical:
          type: boolean
          description: "Это логическое значение, которое показывает, является ли д\
            омен техническим."
          example: true
        is_whois_privacy_enabled:
          type: boolean
          description: "Это логическое значение, которое показывает, включено ли с\
            крытие данных администратора домена для whois. Если приходит null, зна\
            чит для данной зоны эта услуга не доступна."
          nullable: true
          example: true
        linked_ip:
          type: string
          description: Привязанный к домену IP-адрес.
          nullable: true
          example: 192.168.1.1
        paid_till:
          type: string
          description: До какого числа оплачен домен.
          nullable: true
          example: 2023-01-27
        person_id:
          type: number
          description: "Идентификатор администратора, на которого зарегистрирован\
            \ домен."
          nullable: true
          example: 123
        premium_prolong_cost:
          type: number
          description: Стоимость премиального домена.
          nullable: true
        provider:
          type: string
          description: Идентификатор регистратора домена.
          nullable: true
          example: TimewebVirtreg
        request_status:
          type: string
          description: Статус заявки на продление/регистрацию/трансфер домена.
          nullable: true
          example: registration_request
          enum:
          - prolongation_fail
          - prolongation_request
          - registration_fail
          - registration_request
          - transfer_fail
          - transfer_request
          - awaiting_person
        subdomains:
          type: array
          description: Список поддоменов.
          items:
            $ref: '#/components/schemas/subdomain'
        tld_id:
          type: number
          description: Идентификатор доменной зоны.
          nullable: true
          example: 2365
      description: Домен
    update-domain:
      type: object
      properties:
        is_autoprolong_enabled:
          type: boolean
          description: "Это логическое значение, которое показывает, включено ли а\
            втопродление домена."
          example: true
        linked_ip:
          type: string
          description: Привязанный к домену IP-адрес.
          nullable: true
          example: 192.168.1.1
    dns-record:
      required:
      - data
      - type
      type: object
      properties:
        type:
          type: string
          description: Тип DNS-записи.
          example: A
          enum:
          - TXT
          - SRV
          - CNAME
          - AAAA
          - MX
          - A
        id:
          type: number
          description: Идентификатор DNS-записи.
          nullable: true
          example: 123
        data:
          $ref: '#/components/schemas/dnsrecord_data'
      description: DNS-запись.
    create-dns:
      required:
      - type
      - value
      type: object
      properties:
        priority:
          type: number
          description: Приоритет DNS-записи.
          example: 0
        subdomain:
          type: string
          description: Полное имя поддомена.
          example: sub.somedomain.ru
        type:
          type: string
          description: Тип DNS-записи.
          example: A
          enum:
          - TXT
          - SRV
          - CNAME
          - AAAA
          - MX
          - A
        value:
          type: string
          description: Значение DNS-записи.
          example: 192.168.111.123
    domain-name-server:
      required:
      - is_delegation_allowed
      - items
      - task_status
      type: object
      properties:
        is_delegation_allowed:
          type: boolean
          description: "Это логическое значение, которое показывает включена ли ус\
            луга разрешено ли делегирование домена."
          example: true
        items:
          type: array
          description: Список name-серверов
          items:
            $ref: '#/components/schemas/domainnameserver_items'
        task_status:
          type: string
          description: Статус добавления name-сервера.
          example: done
          enum:
          - done
          - active
          - failed
      description: Name-сервер
    update-domain-name-servers:
      required:
      - name_servers
      type: object
      properties:
        name_servers:
          type: array
          description: Список новых name-серверов для домена
          items:
            $ref: '#/components/schemas/updatedomainnameservers_name_servers'
    domain-prime-type:
      title: Тип прайм домена
      type: string
      description: Тип прайм домена.
      example: maximal
      enum:
      - extra
      - premium
      - optimal
      - maximal
    domain-request:
      required:
      - account_id
      - auth_code
      - date
      - domain_bundle_id
      - error_code_transfer
      - fqdn
      - group_id
      - id
      - is_antispam_enabled
      - is_autoprolong_enabled
      - is_whois_privacy_enabled
      - message
      - money_source
      - period
      - person_id
      - prime
      - soon_expire
      - sort_order
      - type
      type: object
      properties:
        account_id:
          type: string
          description: Идентификатор пользователя
          example: cp78562
        auth_code:
          type: string
          description: Код авторизации для переноса домена.
          nullable: true
          example: code
        date:
          type: string
          description: Дата создания заявки.
          format: date-time
          example: 2023-01-31T12:51:00.71Z
        domain_bundle_id:
          type: string
          description: "Идентификационный номер бандла, в который входит данная за\
            явка (null - если заявка не входит ни в один бандл)."
          nullable: true
        error_code_transfer:
          type: string
          description: Код ошибки трансфера домена.
          nullable: true
        fqdn:
          type: string
          description: Полное имя домена.
          example: somedomain.com
        group_id:
          type: number
          description: Идентификатор группы доменных зон.
          example: 123
        id:
          type: number
          description: Идентификатор заявки.
          example: 123
        is_antispam_enabled:
          type: boolean
          description: "Это логическое значение, которое показывает включена ли ус\
            луга \"Антиспам\" для домена"
          example: false
        is_autoprolong_enabled:
          type: boolean
          description: "Это логическое значение, которое показывает, включено ли а\
            втопродление домена."
          example: true
        is_whois_privacy_enabled:
          type: boolean
          description: "Это логическое значение, которое показывает, включено ли с\
            крытие данных администратора домена для whois. Опция недоступна для до\
            менов в зонах .ru и .рф."
          example: true
        message:
          type: string
          description: Информационное сообщение о заявке.
          nullable: true
          example: message
        money_source:
          type: string
          description: Источник (способ) оплаты заявки.
          nullable: true
          example: use
          enum:
          - use
          - bonus
          - invoice
        period:
          $ref: '#/components/schemas/domain-payment-period'
        person_id:
          type: number
          description: Идентификационный номер персоны для заявки на регистрацию.
          example: 123
        prime:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/domain-prime-type'
        soon_expire:
          type: number
          description: "Количество дней до конца регистрации домена, за которые мы\
            \ уведомим о необходимости продления."
          example: 30
        sort_order:
          type: number
          description: Это значение используется для сортировки доменных зон в панели
            управления.
          example: 123
        type:
          type: string
          description: Тип заявки.
          example: request
          enum:
          - request
          - prolong
          - transfer
      description: Заявка на продление/регистрацию/трансфер домена.
    domain-register:
      title: Заявка на регистрацию домена
      required:
      - action
      - fqdn
      - person_id
      type: object
      properties:
        action:
          type: string
          description: Тип создаваемой заявки.
          example: register
          enum:
          - register
        fqdn:
          type: string
          description: Полное имя домена.
          example: somedomain.ru
        is_autoprolong_enabled:
          type: boolean
          description: "Это логическое значение, которое показывает, включено ли а\
            втопродление домена."
          example: true
        is_whois_privacy_enabled:
          type: boolean
          description: "Это логическое значение, которое показывает, включено ли с\
            крытие данных администратора домена для whois. Опция недоступна для до\
            менов в зонах .ru и .рф."
          example: true
        ns:
          type: array
          description: "Name-серверы для регистрации домена. Если не передавать эт\
            от параметр, будут использованы наши стандартные name-серверы. Нужно у\
            казать как минимум 2 name-сервера."
          items:
            $ref: '#/components/schemas/domainregister_ns'
        period:
          $ref: '#/components/schemas/domain-payment-period'
        person_id:
          type: number
          description: "Идентификатор администратора, на которого регистрируется д\
            омен."
          example: 123
      description: Заявка на регистрацию домена
    domain-prolong:
      title: Заявка на продление домена
      required:
      - action
      - fqdn
      type: object
      properties:
        action:
          type: string
          description: Тип создаваемой заявки.
          example: prolong
          enum:
          - prolong
        fqdn:
          type: string
          description: Полное имя домена.
          example: somedomain.ru
        is_antispam_enabled:
          type: boolean
          description: "Это логическое значение, которое показывает включена ли ус\
            луга \"Антиспам\" для домена"
          example: false
        is_autoprolong_enabled:
          type: boolean
          description: "Это логическое значение, которое показывает, включено ли а\
            втопродление домена."
          example: true
        is_whois_privacy_enabled:
          type: boolean
          description: "Это логическое значение, которое показывает, включено ли с\
            крытие данных администратора домена для whois. Опция недоступна для до\
            менов в зонах .ru и .рф."
          example: true
        period:
          $ref: '#/components/schemas/domain-payment-period'
        person_id:
          type: number
          description: "Идентификатор администратора, на которого зарегистрирован\
            \ домен."
          example: 123
        prime:
          $ref: '#/components/schemas/domain-prime-type'
      description: Заявка на продление домена
    domain-transfer:
      title: Заявка на перенос домена
      required:
      - action
      - auth_code
      - fqdn
      type: object
      properties:
        action:
          type: string
          description: Тип создаваемой заявки.
          example: transfer
          enum:
          - transfer
        auth_code:
          type: string
          description: Код авторизации для переноса домена.
          example: code
        fqdn:
          type: string
          description: Полное имя домена.
          example: somedomain.ru
      description: Заявка на перенос домена
    use:
      title: Оплата заявки на продление/регистрацию домена с баланса аккаунта
      required:
      - money_source
      type: object
      properties:
        money_source:
          type: string
          description: Тип создаваемой заявки.
          example: use
          enum:
          - use
        person_id:
          type: number
          description: "Идентификатор администратора, на которого зарегистрирован\
            \ домен."
          example: 123
      description: Оплата заявки на продление/регистрацию домена с баланса аккаунта
    invoice:
      title: Оплата заявки на продление/регистрацию домена при помощи платежной системы
      required:
      - money_source
      - payer_id
      - payment_type
      type: object
      properties:
        money_source:
          type: string
          description: Тип создаваемой заявки.
          example: invoice
          enum:
          - invoice
        person_id:
          type: number
          description: "Идентификатор администратора, на которого зарегистрирован\
            \ домен."
          example: 123
        payment_type:
          type: string
          description: Тип платежной системы.
          example: "123"
          enum:
          - receipt
          - card
          - mobile-card
          - wm
          - webmoney
          - yandex
          - ya
          - invoice
          - sofort
          - qiwi_wallet
          - wechat
        payer_id:
          type: number
          description: Идентификационный номер плательщика
          example: 123
      description: Оплата заявки на продление/регистрацию домена при помощи платежной
        системы
    free:
      title: Обновление заявки на перенос домена
      required:
      - auth_code
      - money_source
      type: object
      properties:
        money_source:
          type: string
          description: Тип создаваемой заявки.
          example: free
          enum:
          - free
        person_id:
          type: number
          description: "Идентификатор администратора, на которого зарегистрирован\
            \ домен."
          example: 123
        auth_code:
          type: string
          description: Код авторизации для переноса домена.
          example: code
      description: Обновление заявки на перенос домена
    bonus:
      title: Оплата заявки на продление/регистрацию домена бонусом
      required:
      - bonus_id
      - money_source
      type: object
      properties:
        money_source:
          type: string
          description: Тип создаваемой заявки.
          example: bonus
          enum:
          - bonus
        person_id:
          type: number
          description: "Идентификатор администратора, на которого зарегистрирован\
            \ домен."
          example: 123
        bonus_id:
          type: number
          description: Идентификатор бонуса.
          example: 123
      description: Оплата заявки на продление/регистрацию домена бонусом
    top-level-domain:
      required:
      - allowed_buy_periods
      - early_renew_period
      - grace_period
      - id
      - is_published
      - is_registered
      - is_whois_privacy_default_enabled
      - is_whois_privacy_enabled
      - name
      - price
      - prolong_price
      - registrar
      - transfer
      - whois_privacy_price
      type: object
      properties:
        allowed_buy_periods:
          type: array
          description: Список доступных периодов для регистрации/продления доменов
            со стоимостью.
          items:
            $ref: '#/components/schemas/topleveldomain_allowed_buy_periods'
        early_renew_period:
          type: number
          description: "Количество дней до истечение срока регистрации, когда можн\
            о продлять домен."
          nullable: true
          example: 60
        grace_period:
          type: number
          description: "Количество дней, которые действует льготный период когда в\
            ы ещё можете продлить домен, после окончания его регистрации"
          example: 30
        id:
          type: number
          description: Идентификатор доменной зоны.
          example: 123
        is_published:
          type: boolean
          description: "Это логическое значение, которое показывает, опубликована\
            \ ли доменная зона."
          example: true
        is_registered:
          type: boolean
          description: "Это логическое значение, которое показывает, зарегистриров\
            ана ли доменная зона."
          example: true
        is_whois_privacy_default_enabled:
          type: boolean
          description: "Это логическое значение, которое показывает, включено ли п\
            о умолчанию скрытие данных администратора для доменной зоны."
          example: true
        is_whois_privacy_enabled:
          type: boolean
          description: "Это логическое значение, которое показывает, доступно ли у\
            правление скрытием данных администратора для доменной зоны."
          example: true
        name:
          type: string
          description: Имя доменной зоны.
          example: ru
        price:
          type: number
          description: Цена регистрации домена
          example: 100
        prolong_price:
          type: number
          description: Цена продления домена.
          example: 100
        registrar:
          type: string
          description: Регистратор доменной зоны.
          example: TimewebVirtreg
          enum:
          - NIC
          - PDR
          - R01
          - timeweb
          - TimewebVirtreg
          - Webnames
          - unknown
        transfer:
          type: number
          description: Цена услуги трансфера домена.
          example: 0
        whois_privacy_price:
          type: number
          description: Цена услуги скрытия данных администратора для доменной зоны.
          example: 300
      description: Доменная зона.
    vpc:
      required:
      - created_at
      - id
      - location
      - name
      - subnet_v4
      properties:
        id:
          type: string
          description: Идентификатор сети.
          example: network-1234567890
        name:
          type: string
          description: Имя сети.
          example: Общая сеть
        subnet_v4:
          type: string
          description: Маска подсети.
          example: 192.168.0.0/24
        location:
          type: string
          description: Локация сети.
          example: ru-1
          enum:
          - ru-1
          - pl-1
        created_at:
          type: string
          description: Дата создания сети.
          format: date-time
          example: 2023-02-06T17:33:13Z
        description:
          type: string
          description: Описание.
          example: Сеть для примера
      example:
        subnet_v4: 192.168.0.0/24
        name: Общая сеть
        created_at: 2023-02-06T17:33:13Z
        description: Сеть для примера
        location: ru-1
        id: network-1234567890
    create-vpc:
      required:
      - location
      - name
      - subnet_v4
      properties:
        name:
          type: string
          description: Имя сети.
          example: Общая сеть
        subnet_v4:
          type: string
          description: Маска подсети.
          example: 192.168.0.0/24
        location:
          type: string
          description: Локация сети.
          example: ru-1
          enum:
          - ru-1
          - pl-1
        description:
          type: string
          description: Описание.
          example: Сеть для примера
    update-vpc:
      properties:
        name:
          type: string
          description: Имя сети.
          example: Общая сеть
        description:
          type: string
          description: Описание.
          example: Сеть для примера
    vpc-service:
      required:
      - created_at
      - id
      - location
      - name
      - subnet_v4
      properties:
        id:
          type: number
          description: Идентификатор сервисв.
          example: 560
        name:
          type: string
          description: Имя сервиса.
          example: Intelligent Raven
        public_ip:
          type: string
          description: Публичный IP-адрес сервиса
          example: 192.168.0.0
        local_ip:
          type: string
          description: Приватный IP-адрес сервиса
          example: 192.168.0.0
        type:
          type: string
          description: Тип сервиса.
          example: server
          enum:
          - server
          - balancer
          - dbaas
    vpc-port:
      required:
      - id
      - ipv4
      - mac
      - nat_mode
      - service
      properties:
        id:
          type: string
          description: Идентификатор порта.
          example: d05673e4-1c74-46g4-b98f-aa3d42a99079
        nat_mode:
          type: string
          description: Тип преобразования сетевых адресов.
          example: dnat_and_snat
          enum:
          - dnat_and_snat
          - snat
          - no_nat
        mac:
          type: string
          description: MAC адрес.
          example: 51:43:35:c3:aa:fa
        ipv4:
          type: string
          description: Внутренний адрес.
          example: 172.16.16.2
        service:
          $ref: '#/components/schemas/vpcport_service'
    ssh-key:
      required:
      - body
      - created_at
      - id
      - is_enabled
      - name
      - used_by
      properties:
        id:
          type: number
          description: Уникальный идентификатор SSH-ключа
          example: 2
        name:
          type: string
          description: Название SSH-ключа
          example: ssh key
        body:
          type: string
          description: Тело SSH-ключа
          example: ssh-dss AAAAB3NzaC1kc3MAAACBALixbc+uF2kuv83LiB3gg200vHJ7hH0QCC77fqlu+5raX6Y1PJZZORwzvbvU6k8gfrmjMRwQFDNncu3aXUiM9TleOBxFsQ2Hg5hDblSr2bnnyVP0jjPzsYye+0Ebaa+IjEqZz8y0qu8zejCpHqhLP/PlRDS9vtTsadrVvNwFFCyhAAAAFQD7m0AZOd/lHraIgBjXJvfN+qGiAQAAAIAdXSV0n47akGC/g0ejkNzHDSdRFf2fR0FsOos/7f5j+QfstijVBMwzA4Ti+dNJv3BQqQv3Bk5X3o5yUTUL+cM6fa4KSyIhGi14RL0kqjJrNjrVAhwjPH8K9aHDouqQEz56UL72+iGhMxwBHBMWq7cZ2k31mmFgEoYgwNcYuNmtlAAAAIBxIebJMItpq3ez5Hg5GyhpnSU7h0kshh+D5UAAlPmJo8OUQH6avQGf6gpxs3CnQ/im/aCKcb/bYm4V5Y9a7Zq+LrZGQZ79GLWsu/oK0HfQiP+oWwzCGmsdIGblsTRzrKU0FFo7zGmyTsBU48OeD76nKsc5EJ9F9wQC3S2KK38Ynw==
            test@MBP-test.office.timeweb.ru
        created_at:
          type: string
          description: Дата создания ключа
          format: date-time
          example: 2023-02-06T17:33:13Z
        used_by:
          type: array
          description: "Список серверов, которые используют SSH-ключ"
          items:
            $ref: '#/components/schemas/sshkey_used_by'
        is_default:
          type: boolean
          description: Будет ли выбираться SSh-ключ по умолчанию при создании сервера
    inline_response_200:
      allOf:
      - required:
        - finances
        type: object
        properties:
          finances:
            $ref: '#/components/schemas/finances'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_400:
      required:
      - error_code
      - response_id
      - status_code
      type: object
      properties:
        status_code:
          type: number
          description: "Короткий идентификатор, соответствующий возвращаемому коду\
            \ состояния HTTP."
          example: 400
        message:
          description: "Сообщение, предоставляющее дополнительную информацию об ош\
            ибке, в том числе сведения, помогающие устранить ее, когда это возможн\
            о."
          example: Value must be a number conforming to the specified constraints
          oneOf:
          - type: string
            description: ' '
          - type: array
            items:
              type: string
        error_code:
          type: string
          description: Краткое описание ошибки HTTP на основе статуса.
          example: bad_request
        response_id:
          $ref: '#/components/schemas/response_id'
    inline_response_401:
      required:
      - error_code
      - response_id
      - status_code
      type: object
      properties:
        status_code:
          type: number
          description: "Короткий идентификатор, соответствующий возвращаемому коду\
            \ состояния HTTP."
          example: 401
        message:
          description: "Сообщение, предоставляющее дополнительную информацию об ош\
            ибке, в том числе сведения, помогающие устранить ее, когда это возможн\
            о."
          example: Unauthorized
          oneOf:
          - type: string
          - type: array
            items:
              type: string
        error_code:
          type: string
          description: Краткое описание ошибки HTTP на основе статуса.
          example: unauthorized
        response_id:
          $ref: '#/components/schemas/response_id'
    inline_response_403:
      required:
      - error_code
      - response_id
      - status_code
      type: object
      properties:
        status_code:
          type: number
          description: "Короткий идентификатор, соответствующий возвращаемому коду\
            \ состояния HTTP."
          example: 403
        message:
          description: "Сообщение, предоставляющее дополнительную информацию об ош\
            ибке, в том числе сведения, помогающие устранить ее, когда это возможн\
            о."
          example: Forbidden
          oneOf:
          - type: string
          - type: array
            items:
              type: string
        error_code:
          type: string
          description: Краткое описание ошибки HTTP на основе статуса.
          example: forbidden
        response_id:
          $ref: '#/components/schemas/response_id'
    inline_response_404:
      required:
      - error_code
      - response_id
      - status_code
      type: object
      properties:
        status_code:
          type: number
          description: "Короткий идентификатор, соответствующий возвращаемому коду\
            \ состояния HTTP."
          example: 404
        message:
          description: "Сообщение, предоставляющее дополнительную информацию об ош\
            ибке, в том числе сведения, помогающие устранить ее, когда это возможн\
            о."
          example: Resource not found
          oneOf:
          - type: string
          - type: array
            items:
              type: string
        error_code:
          type: string
          description: Краткое описание ошибки HTTP на основе статуса.
          example: not_found
        response_id:
          $ref: '#/components/schemas/response_id'
    inline_response_429:
      required:
      - error_code
      - response_id
      - status_code
      type: object
      properties:
        status_code:
          type: number
          description: "Короткий идентификатор, соответствующий возвращаемому коду\
            \ состояния HTTP."
          example: 429
        message:
          description: "Сообщение, предоставляющее дополнительную информацию об ош\
            ибке, в том числе сведения, помогающие устранить ее, когда это возможн\
            о."
          example: Too many requests
          oneOf:
          - type: string
          - type: array
            items:
              type: string
        error_code:
          type: string
          description: Краткое описание ошибки HTTP на основе статуса.
          example: too_many_requests
        response_id:
          $ref: '#/components/schemas/response_id'
    inline_response_500:
      required:
      - error_code
      - response_id
      - status_code
      type: object
      properties:
        status_code:
          type: number
          description: "Короткий идентификатор, соответствующий возвращаемому коду\
            \ состояния HTTP."
          example: 500
        message:
          description: "Сообщение, предоставляющее дополнительную информацию об ош\
            ибке, в том числе сведения, помогающие устранить ее, когда это возможн\
            о."
          example: Internal server error
          oneOf:
          - type: string
          - type: array
            items:
              type: string
        error_code:
          type: string
          description: Краткое описание ошибки HTTP на основе статуса.
          example: internal_server_error
        response_id:
          $ref: '#/components/schemas/response_id'
    inline_response_200_1:
      allOf:
      - required:
        - status
        type: object
        properties:
          status:
            $ref: '#/components/schemas/status'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_2:
      allOf:
      - required:
        - meta
        - notification_settings
        type: object
        properties:
          notification_settings:
            type: array
            items:
              $ref: '#/components/schemas/notification-setting'
          meta:
            $ref: '#/components/schemas/meta'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    apiv1accountnotificationsettings_channels:
      type: object
      properties:
        telegram:
          $ref: '#/components/schemas/setting-condition'
        sms:
          $ref: '#/components/schemas/setting-condition'
        email:
          $ref: '#/components/schemas/setting-condition'
      description: Название канала уведомлений.
    apiv1accountnotificationsettings_settings:
      required:
      - channels
      - type
      type: object
      properties:
        channels:
          $ref: '#/components/schemas/apiv1accountnotificationsettings_channels'
        type:
          $ref: '#/components/schemas/notification-setting-type'
      example: "{\"type\":\"account_blocked\",\"channels\":{\"telegram\":\"on\"}}"
    account_notificationsettings_body:
      type: object
      properties:
        settings:
          type: array
          description: Настройки каналов уведомлений.
          example:
          - type: account_blocked
            channels:
              telegram: "on"
          items:
            $ref: '#/components/schemas/apiv1accountnotificationsettings_settings'
    inline_response_200_3:
      allOf:
      - $ref: '#/components/schemas/ImagesOutResponse'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_201:
      allOf:
      - $ref: '#/components/schemas/ImageOutResponse'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_4:
      allOf:
      - $ref: '#/components/schemas/UploadSuccessfulResponse'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_5:
      allOf:
      - $ref: '#/components/schemas/ImageDownloadsResponse'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_201_1:
      allOf:
      - $ref: '#/components/schemas/ImageDownloadResponse'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_6:
      allOf:
      - $ref: '#/components/schemas/FirewallGroupsOutResponse'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_201_2:
      allOf:
      - $ref: '#/components/schemas/FirewallGroupOutResponse'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_7:
      allOf:
      - $ref: '#/components/schemas/FirewallGroupResourcesOutResponse'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    resource_type:
      allOf:
      - $ref: '#/components/schemas/ResourceType'
      default: server
    inline_response_201_3:
      allOf:
      - $ref: '#/components/schemas/FirewallGroupResourceOutResponse'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    resource_type_1:
      allOf:
      - $ref: '#/components/schemas/ResourceType'
      default: server
    inline_response_200_8:
      allOf:
      - $ref: '#/components/schemas/FirewallRulesOutResponse'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_201_4:
      allOf:
      - $ref: '#/components/schemas/FirewallRuleOutResponse'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_9:
      allOf:
      - required:
        - balancers
        - meta
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          balancers:
            type: array
            items:
              $ref: '#/components/schemas/balancer'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_10:
      allOf:
      - required:
        - balancer
        type: object
        properties:
          balancer:
            $ref: '#/components/schemas/balancer'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_11:
      allOf:
      - required:
        - balancer_delete
        type: object
        properties:
          balancer_delete:
            $ref: '#/components/schemas/delete-service-response'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_12:
      allOf:
      - required:
        - ips
        - meta
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          ips:
            type: array
            items:
              type: string
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    balancer_id_ips_body:
      required:
      - ips
      type: object
      properties:
        ips:
          type: array
          items:
            type: string
            example: 192.168.0.0
    balancer_id_ips_body_1:
      required:
      - ips
      type: object
      properties:
        ips:
          type: array
          items:
            type: string
            example: 192.168.0.0
    inline_response_200_13:
      allOf:
      - required:
        - meta
        - rules
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          rules:
            type: array
            items:
              $ref: '#/components/schemas/rule'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_14:
      allOf:
      - required:
        - rule
        type: object
        properties:
          rule:
            $ref: '#/components/schemas/rule'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_15:
      allOf:
      - required:
        - balancers_presets
        - meta
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          balancers_presets:
            type: array
            items:
              $ref: '#/components/schemas/presets-balancer'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_16:
      allOf:
      - required:
        - dbs
        - meta
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          dbs:
            type: array
            items:
              $ref: '#/components/schemas/database-cluster'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_201_5:
      allOf:
      - required:
        - db
        type: object
        properties:
          db:
            $ref: '#/components/schemas/database-cluster'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_17:
      allOf:
      - required:
        - hash
        type: object
        properties:
          hash:
            type: string
            description: "Хеш, который совместно с кодом авторизации надо будет от\
              править для удаления"
            example: 15095f25-aac3-4d60-a788-96cb5136f186
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_18:
      allOf:
      - required:
        - admins
        - meta
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          admins:
            type: array
            items:
              $ref: '#/components/schemas/database-admin'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_201_6:
      allOf:
      - required:
        - admin
        type: object
        properties:
          admin:
            $ref: '#/components/schemas/database-admin'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_19:
      allOf:
      - required:
        - instances
        - meta
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          instances:
            type: array
            items:
              $ref: '#/components/schemas/database-instance'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_201_7:
      allOf:
      - required:
        - instance
        type: object
        properties:
          instance:
            $ref: '#/components/schemas/database-instance'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_20:
      allOf:
      - required:
        - dbs
        - meta
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          dbs:
            type: array
            items:
              $ref: '#/components/schemas/db'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_201_8:
      allOf:
      - required:
        - db
        type: object
        properties:
          db:
            $ref: '#/components/schemas/db'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_21:
      allOf:
      - required:
        - database_delete
        type: object
        properties:
          database_delete:
            $ref: '#/components/schemas/delete-service-response'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_22:
      allOf:
      - required:
        - auto_backups_settings
        - meta
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          auto_backups_settings:
            type: array
            items:
              $ref: '#/components/schemas/auto-backup'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_23:
      allOf:
      - required:
        - backups
        - meta
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          backups:
            type: array
            items:
              $ref: '#/components/schemas/backup'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_201_9:
      allOf:
      - required:
        - backup
        type: object
        properties:
          backup:
            $ref: '#/components/schemas/backup'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_409:
      required:
      - error_code
      - response_id
      - status_code
      type: object
      properties:
        status_code:
          type: number
          description: "Короткий идентификатор, соответствующий возвращаемому коду\
            \ состояния HTTP."
          example: 409
        message:
          description: "Сообщение, предоставляющее дополнительную информацию об ош\
            ибке, в том числе сведения, помогающие устранить ее, когда это возможн\
            о."
          example: Conflict
          oneOf:
          - type: string
          - type: array
            items:
              type: string
        error_code:
          type: string
          description: Краткое описание ошибки HTTP на основе статуса.
          example: conflict
        response_id:
          $ref: '#/components/schemas/response-id_response_id'
    inline_response_200_24:
      allOf:
      - required:
        - databases_presets
        - meta
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          databases_presets:
            type: array
            items:
              $ref: '#/components/schemas/presets-dbs'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_25:
      allOf:
      - required:
        - dedicated_servers
        - meta
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          dedicated_servers:
            type: array
            items:
              $ref: '#/components/schemas/dedicated-server'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_201_10:
      allOf:
      - required:
        - dedicated_server
        type: object
        properties:
          dedicated_server:
            $ref: '#/components/schemas/dedicated-server'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    dedicatedservers_dedicated_id_body:
      type: object
      properties:
        name:
          maxLength: 255
          type: string
          description: "Удобочитаемое имя выделенного сервера. Максимальная длина\
            \ — 255 символов, имя должно быть уникальным."
          example: name
        comment:
          maxLength: 255
          type: string
          description: Комментарий к выделенному серверу. Максимальная длина — 255
            символов.
          example: comment
    inline_response_200_26:
      allOf:
      - required:
        - dedicated_servers_presets
        - meta
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          dedicated_servers_presets:
            type: array
            items:
              $ref: '#/components/schemas/dedicated-server-preset'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_27:
      allOf:
      - required:
        - dedicated_server_additional_services
        - meta
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          dedicated_server_additional_services:
            type: array
            items:
              $ref: '#/components/schemas/dedicated-server-additional-service'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_28:
      allOf:
      - $ref: '#/components/schemas/ClustersResponse'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_201_11:
      allOf:
      - $ref: '#/components/schemas/ClusterResponse'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_29:
      allOf:
      - required:
        - cluster_delete
        type: object
        properties:
          cluster_delete:
            $ref: '#/components/schemas/delete-service-response'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_30:
      allOf:
      - $ref: '#/components/schemas/ResourcesResponse'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_31:
      allOf:
      - $ref: '#/components/schemas/NodeGroupsResponse'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_201_12:
      allOf:
      - $ref: '#/components/schemas/NodeGroupResponse'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_32:
      allOf:
      - $ref: '#/components/schemas/NodesResponse'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_33:
      allOf:
      - $ref: '#/components/schemas/K8SVersionsResponse'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_34:
      allOf:
      - $ref: '#/components/schemas/NetworkDriversResponse'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_35:
      allOf:
      - $ref: '#/components/schemas/PresetsResponse'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_36:
      allOf:
      - required:
        - meta
        - servers
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          servers:
            type: array
            items:
              $ref: '#/components/schemas/vds'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_201_13:
      allOf:
      - required:
        - server
        type: object
        properties:
          server:
            $ref: '#/components/schemas/vds'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_37:
      allOf:
      - required:
        - server_delete
        type: object
        properties:
          server_delete:
            $ref: '#/components/schemas/delete-service-response'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    server_id_action_body:
      required:
      - action
      type: object
      properties:
        action:
          type: string
          enum:
          - hard_reboot
          - hard_shutdown
          - install
          - reboot
          - remove
          - reset_password
          - shutdown
          - start
          - clone
      description: Действие над сервером
    inline_response_200_38:
      allOf:
      - required:
        - cpu
        - disk
        - network_traffic
        - ram
        type: object
        properties:
          cpu:
            type: array
            items:
              $ref: '#/components/schemas/inline_response_200_38_cpu'
          network_traffic:
            type: array
            items:
              $ref: '#/components/schemas/inline_response_200_38_network_traffic'
          disk:
            type: array
            description: Статистика основного диска
            items:
              $ref: '#/components/schemas/inline_response_200_38_disk'
          ram:
            type: array
            items:
              $ref: '#/components/schemas/inline_response_200_38_ram'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_39:
      allOf:
      - required:
        - meta
        - servers_os
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          servers_os:
            type: array
            items:
              $ref: '#/components/schemas/servers-os'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_40:
      allOf:
      - required:
        - meta
        - server_presets
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          server_presets:
            type: array
            items:
              $ref: '#/components/schemas/servers-preset'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_41:
      allOf:
      - required:
        - meta
        - server_configurators
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          server_configurators:
            type: array
            items:
              $ref: '#/components/schemas/servers-configurator'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_42:
      allOf:
      - required:
        - meta
        - servers_software
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          servers_software:
            type: array
            items:
              $ref: '#/components/schemas/servers-software'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    server_id_bootmode_body:
      required:
      - boot_mode
      type: object
      properties:
        boot_mode:
          type: string
          description: |-
            Тип загрузки операционной системы. \
             Параметры: `default` – стандартный режим, `single` – однопользовательский режим, `recovery_disk` – загрузка с диска восстановления.
          example: default
          enum:
          - default
          - single
          - recovery_disk
    localnetworks_natmode_body:
      required:
      - nat_mode
      type: object
      properties:
        nat_mode:
          type: string
          description: |-
            Правило для маршрутизации трафика. \
             Досутпные правила: `dnat_and_snat` – разрешен входящий и исходящий трафик, `snat` – разрешен только исходящий трафик, `no_nat` – разрешен трафик только в локальной сети.
          example: no_nat
          enum:
          - dnat_and_snat
          - snat
          - no_nat
    inline_response_200_43:
      allOf:
      - required:
        - meta
        - server_ips
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          server_ips:
            type: array
            items:
              $ref: '#/components/schemas/server-ip'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    server_id_ips_body:
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: Тип IP-адреса
          example: ipv6
          enum:
          - ipv4
          - ipv6
        ptr:
          type: string
          description: PTR-запись IP-адреса
          example: 1197521-cl1233.tw1.ru
    inline_response_201_14:
      allOf:
      - required:
        - server_ip
        type: object
        properties:
          server_ip:
            $ref: '#/components/schemas/server-ip'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    server_id_ips_body_1:
      required:
      - ip
      type: object
      properties:
        ip:
          type: string
          description: IP-адрес (IPv4 или IPv6)
          example: 1.1.1.1
    server_id_ips_body_2:
      required:
      - ip
      - ptr
      type: object
      properties:
        ip:
          type: string
          description: IP-адрес (IPv4 или IPv6)
          example: 1.1.1.1
        ptr:
          type: string
          description: PTR-запись IP-адреса
          example: 1197521-cl1233.tw1.ru
    inline_response_200_44:
      allOf:
      - required:
        - meta
        - server_logs
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          server_logs:
            type: array
            items:
              $ref: '#/components/schemas/server-log'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_45:
      allOf:
      - required:
        - meta
        - server_disks
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          server_disks:
            type: array
            items:
              $ref: '#/components/schemas/server-disk'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    server_id_disks_body:
      required:
      - size
      type: object
      properties:
        size:
          type: number
          description: Минимальный размер 5120. Максимальный размер 512000. Шаг 5120
          example: 10240
    inline_response_201_15:
      allOf:
      - required:
        - server_disk
        type: object
        properties:
          server_disk:
            $ref: '#/components/schemas/server-disk'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    disks_disk_id_body:
      required:
      - size
      type: object
      properties:
        size:
          type: number
          description: Минимальный размер 5120. Максимальный размер 512000. Шаг 5120.
            Нельзя передавать значение меньше текущего размера диска.
          example: 10240
    inline_response_200_46:
      allOf:
      - required:
        - auto_backups_settings
        type: object
        properties:
          auto_backups_settings:
            $ref: '#/components/schemas/auto-backup'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_47:
      allOf:
      - required:
        - backups
        - meta
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          backups:
            type: array
            items:
              $ref: '#/components/schemas/server-backup'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    disk_id_backups_body:
      type: object
      properties:
        comment:
          type: string
          description: Комментарий к бэкапу.
          example: comment
    inline_response_201_16:
      allOf:
      - type: object
        properties:
          backup:
            $ref: '#/components/schemas/server-backup'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_48:
      allOf:
      - required:
        - backup
        type: object
        properties:
          backup:
            $ref: '#/components/schemas/server-backup'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    backups_backup_id_body:
      required:
      - comment
      type: object
      properties:
        comment:
          type: string
          description: Комментарий к бэкапу.
          example: comment
    backup_id_action_body:
      required:
      - action
      type: object
      properties:
        action:
          type: string
          description: Действие над бэкапом.
          example: mount
          enum:
          - restore
          - mount
          - unmount
    inline_response_200_49:
      allOf:
      - required:
        - meta
        - projects
        type: object
        properties:
          projects:
            type: array
            items:
              $ref: '#/components/schemas/project'
          meta:
            $ref: '#/components/schemas/meta'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_201_17:
      allOf:
      - required:
        - project
        type: object
        properties:
          project:
            $ref: '#/components/schemas/project'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_50:
      allOf:
      - required:
        - balancers
        - meta
        type: object
        properties:
          balancers:
            type: array
            items:
              $ref: '#/components/schemas/balancer'
          meta:
            $ref: '#/components/schemas/meta'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    resources_balancers_body:
      required:
      - resource_id
      type: object
      properties:
        resource_id:
          type: number
          description: Идентификатор добавляемого балансировщика.
          example: 1
    inline_response_200_51:
      allOf:
      - required:
        - resource
        type: object
        properties:
          resource:
            $ref: '#/components/schemas/project-resource'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_52:
      allOf:
      - required:
        - buckets
        - meta
        type: object
        properties:
          buckets:
            type: array
            items:
              $ref: '#/components/schemas/bucket'
          meta:
            $ref: '#/components/schemas/meta'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    resources_buckets_body:
      required:
      - resource_id
      type: object
      properties:
        resource_id:
          type: number
          description: Идентификатор добавляемого хранилища.
          example: 1
    inline_response_200_53:
      allOf:
      - required:
        - clusters
        - meta
        type: object
        properties:
          clusters:
            type: array
            items:
              $ref: '#/components/schemas/clusterk8s'
          meta:
            $ref: '#/components/schemas/meta'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    resources_clusters_body:
      required:
      - resource_id
      type: object
      properties:
        resource_id:
          type: number
          description: Идентификатор добавляемого кластера.
          example: 1
    inline_response_200_54:
      allOf:
      - required:
        - meta
        - servers
        type: object
        properties:
          servers:
            type: array
            items:
              $ref: '#/components/schemas/vds'
          meta:
            $ref: '#/components/schemas/meta'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    resources_servers_body:
      required:
      - resource_id
      type: object
      properties:
        resource_id:
          type: number
          description: Идентификатор добавляемого сервера.
          example: 1
    inline_response_200_55:
      allOf:
      - required:
        - databases
        - meta
        type: object
        properties:
          databases:
            type: array
            items:
              $ref: '#/components/schemas/db'
          meta:
            $ref: '#/components/schemas/meta'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    resources_databases_body:
      required:
      - resource_id
      type: object
      properties:
        resource_id:
          type: number
          description: Идентификатор добавляемой базы данных.
          example: 1
    inline_response_200_56:
      allOf:
      - required:
        - dedicated_servers
        - meta
        type: object
        properties:
          dedicated_servers:
            type: array
            items:
              $ref: '#/components/schemas/dedicated-server'
          meta:
            $ref: '#/components/schemas/meta'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    resources_dedicated_body:
      required:
      - resource_id
      type: object
      properties:
        resource_id:
          type: number
          description: Идентификатор добавляемого выделенного сервера.
          example: 1
    inline_response_200_57:
      allOf:
      - required:
        - balancers
        - buckets
        - clusters
        - databases
        - dedicated_servers
        - meta
        - servers
        type: object
        properties:
          servers:
            type: array
            items:
              $ref: '#/components/schemas/vds'
          balancers:
            type: array
            items:
              $ref: '#/components/schemas/balancer'
          buckets:
            type: array
            items:
              $ref: '#/components/schemas/bucket'
          clusters:
            type: array
            items:
              $ref: '#/components/schemas/clusterk8s'
          databases:
            type: array
            items:
              $ref: '#/components/schemas/db'
          dedicated_servers:
            type: array
            items:
              $ref: '#/components/schemas/dedicated-server'
          meta:
            $ref: '#/components/schemas/meta'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    storages_buckets_body:
      required:
      - name
      - preset_id
      - type
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: Название хранилища.
          example: test
        type:
          type: string
          description: Тип хранилища.
          example: private
          enum:
          - private
          - public
        preset_id:
          type: number
          description: Идентификатор тарифа.
          example: 1
    inline_response_201_18:
      allOf:
      - required:
        - bucket
        type: object
        properties:
          bucket:
            $ref: '#/components/schemas/bucket'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_58:
      allOf:
      - required:
        - bucket_delete
        type: object
        properties:
          bucket_delete:
            $ref: '#/components/schemas/delete-service-response'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    buckets_bucket_id_body:
      type: object
      properties:
        preset_id:
          type: number
          description: Идентификатор тарифа.
          example: 1
        bucket_type:
          type: string
          description: Тип хранилища.
          example: public
          enum:
          - private
          - public
    inline_response_200_59:
      allOf:
      - required:
        - meta
        - storages_presets
        type: object
        properties:
          storages_presets:
            type: array
            items:
              $ref: '#/components/schemas/presets-storage'
          meta:
            $ref: '#/components/schemas/meta'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_60:
      allOf:
      - required:
        - meta
        - users
        type: object
        properties:
          users:
            type: array
            items:
              $ref: '#/components/schemas/bucket-user'
          meta:
            $ref: '#/components/schemas/meta'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    users_user_id_body:
      required:
      - secret_key
      type: object
      properties:
        secret_key:
          maxLength: 255
          minLength: 1
          type: string
          description: Новый пароль пользователя-администратора хранилища.
          example: password
    inline_response_200_61:
      allOf:
      - required:
        - user
        type: object
        properties:
          user:
            $ref: '#/components/schemas/bucket-user'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_62:
      allOf:
      - required:
        - transfer_status
        type: object
        properties:
          transfer_status:
            $ref: '#/components/schemas/transfer-status'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    storages_transfer_body:
      required:
      - access_key
      - bucket_name
      - endpoint
      - is_force_path_style
      - location
      - new_bucket_name
      - secret_key
      type: object
      properties:
        access_key:
          type: string
          description: Идентификатор доступа стороннего S3-хранилища.
          example: access_key
        secret_key:
          type: string
          description: Пароль доступа стороннего S3-хранилища.
          example: secret_key
        location:
          type: string
          description: Регион хранилища источника.
          example: ru-1
        is_force_path_style:
          type: boolean
          description: "Это логическое значение, которое показывает, следует ли пр\
            инудительно указывать URL-адреса для объектов S3."
          example: true
        endpoint:
          type: string
          description: URL S3-хранилища источника.
          example: https://s3.test.ru
        bucket_name:
          type: string
          description: Имя хранилища источника.
          example: bucket_name
        new_bucket_name:
          type: string
          description: Имя хранилища получателя.
          example: new_bucket_name
    inline_response_200_63:
      allOf:
      - required:
        - meta
        - subdomains
        type: object
        properties:
          subdomains:
            type: array
            items:
              $ref: '#/components/schemas/s3-subdomain'
          meta:
            $ref: '#/components/schemas/meta'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    bucket_id_subdomains_body:
      required:
      - subdomains
      type: object
      properties:
        subdomains:
          type: array
          items:
            type: string
            example: test.example.com
    inline_response_200_64:
      allOf:
      - required:
        - meta
        - subdomains
        type: object
        properties:
          subdomains:
            type: array
            items:
              $ref: '#/components/schemas/added-subdomain'
          meta:
            $ref: '#/components/schemas/meta'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    bucket_id_subdomains_body_1:
      required:
      - subdomains
      type: object
      properties:
        subdomains:
          type: array
          items:
            type: string
            example: test.example.com
    inline_response_200_65:
      allOf:
      - required:
        - files
        - meta
        type: object
        properties:
          files:
            type: array
            items:
              $ref: '#/components/schemas/s3-object'
          meta:
            $ref: '#/components/schemas/meta'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    objectmanager_rename_body:
      required:
      - new_filename
      - old_filename
      type: object
      properties:
        new_filename:
          type: string
          description: "Новое название файла или папки. Названия папок должны быть\
            \ указаны с \"/\" в конце, например: \"dirname/\"."
          example: new_filename
        old_filename:
          type: string
          description: "Старое название файла или папки. Названия папок должны быт\
            ь указаны с \"/\" в конце, например: \"dirname/\"."
          example: old_filename
    objectmanager_remove_body:
      required:
      - source
      type: object
      properties:
        source:
          type: array
          items:
            type: string
            example: test1/test2
    objectmanager_copy_body:
      required:
      - destination
      - source
      type: object
      properties:
        destination:
          type: string
          description: Новый путь до файлов.
          example: new_path
        source:
          type: array
          items:
            type: string
            description: "Путь до файла или папки, содержимое которой нужно скопир\
              овать. Название папки должно быть указано с \"/\" в конце, например\
              : \"dirname/\"."
            example: test1/test2
    objectmanager_upload_body:
      required:
      - files
      type: object
      properties:
        files:
          type: array
          items:
            type: string
            format: binary
    objectmanager_mkdir_body:
      required:
      - dir_name
      type: object
      properties:
        dir_name:
          type: string
          description: Название директории.
          example: dir
    certificates_generate_body:
      type: object
      properties:
        subdomain:
          type: string
          example: test.example.com
    inline_response_200_66:
      allOf:
      - required:
        - api_keys
        - meta
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          api_keys:
            type: array
            items:
              $ref: '#/components/schemas/api-key'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_201_19:
      allOf:
      - required:
        - api_key
        type: object
        properties:
          api_key:
            $ref: '#/components/schemas/created-api-key'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_67:
      allOf:
      - required:
        - api_key
        type: object
        properties:
          api_key:
            $ref: '#/components/schemas/api-key'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_68:
      allOf:
      - required:
        - is_country_restrictions_enabled
        - is_ip_restrictions_enabled
        - white_list
        type: object
        properties:
          is_ip_restrictions_enabled:
            type: boolean
            description: "Это логическое значение, которое показывает, включено ли\
              \ ограничение доступа по IP-адресу."
            example: true
          is_country_restrictions_enabled:
            type: boolean
            description: "Это логическое значение, которое показывает, включено ли\
              \ ограничение доступа по стране."
            example: true
          white_list:
            $ref: '#/components/schemas/inline_response_200_68_white_list'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    countries_enabled_body:
      required:
      - is_enabled
      type: object
      properties:
        is_enabled:
          type: boolean
          description: "Это логическое значение, которое показывает, включены ли о\
            граничения по IP-адресу."
          example: true
    inline_response_200_69:
      allOf:
      - required:
        - countries
        type: object
        properties:
          countries:
            type: object
            description: "Список стран, приходит в виде объекта, где ключ - код ст\
              раны в формате Alpha-2 ISO 3166-1, а значение - название страны в уд\
              обочитаемом формате."
            example:
              RU: Россия
              KZ: Казахстан
              BY: Беларусь
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    access_countries_body:
      required:
      - countries
      type: object
      properties:
        countries:
          type: array
          description: Список разрешенных стран
          items:
            type: string
            example: RU
    inline_response_201_20:
      allOf:
      - required:
        - countries
        type: object
        properties:
          countries:
            $ref: '#/components/schemas/add-countries'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    access_countries_body_1:
      required:
      - countries
      type: object
      properties:
        countries:
          type: array
          description: Список удаляемых из списка разрешенных стран.
          items:
            type: string
            example: RU
    inline_response_200_70:
      allOf:
      - required:
        - countries
        type: object
        properties:
          countries:
            $ref: '#/components/schemas/remove-countries'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    ips_enabled_body:
      required:
      - is_enabled
      type: object
      properties:
        is_enabled:
          type: boolean
          description: "Это логическое значение, которое показывает, включены ли о\
            граничения по IP-адресу."
          example: true
    access_ips_body:
      required:
      - ips
      type: object
      properties:
        ips:
          type: array
          description: Список разрешенных IP-адресов.
          items:
            type: string
            format: ipv4
            example: 123.231.125.128
    inline_response_201_21:
      allOf:
      - required:
        - ips
        type: object
        properties:
          ips:
            $ref: '#/components/schemas/add-ips'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    access_ips_body_1:
      required:
      - ips
      type: object
      properties:
        ips:
          type: array
          description: Список удаляемых из списка разрешенных IP-адресов.
          items:
            type: string
            format: ipv4
            example: 123.231.125.128
    inline_response_200_71:
      allOf:
      - required:
        - ips
        type: object
        properties:
          ips:
            $ref: '#/components/schemas/remove-ips'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_72:
      allOf:
      - required:
        - mailboxes
        - meta
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          mailboxes:
            type: array
            items:
              $ref: '#/components/schemas/mailbox'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_73:
      allOf:
      - required:
        - quota
        type: object
        properties:
          quota:
            $ref: '#/components/schemas/quota'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    mail_quota_body:
      required:
      - total
      type: object
      properties:
        total:
          type: number
          description: Общее количество места на почте (в Мб).
          example: 6144
    domains_domain_body:
      required:
      - mailbox
      - password
      type: object
      properties:
        mailbox:
          type: string
          description: Название почтового ящика
          example: mailbox
        password:
          type: string
          description: Пароль почтового ящика
          example: zfAsl-
        comment:
          type: string
          description: Комментарий почтового ящика
          example: some comment
    inline_response_201_22:
      allOf:
      - required:
        - mailbox
        type: object
        properties:
          mailbox:
            $ref: '#/components/schemas/mailbox'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_74:
      allOf:
      - required:
        - domain_info
        type: object
        properties:
          domain_info:
            $ref: '#/components/schemas/domain-info'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    domain_info_body:
      required:
      - email
      type: object
      properties:
        email:
          type: string
          description: Адрес для сбора почты с ошибочных ящиков
          example: test@timeweb.ru
    inline_response_200_75:
      allOf:
      - required:
        - domains
        - meta
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          domains:
            type: array
            items:
              $ref: '#/components/schemas/domain'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_76:
      allOf:
      - required:
        - domain
        - meta
        type: object
        properties:
          domain:
            $ref: '#/components/schemas/domain'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_77:
      allOf:
      - required:
        - domain
        type: object
        properties:
          domain:
            $ref: '#/components/schemas/domain'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_78:
      allOf:
      - required:
        - dns_records
        - meta
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          dns_records:
            type: array
            items:
              $ref: '#/components/schemas/dns-record'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_201_23:
      allOf:
      - required:
        - dns_record
        type: object
        properties:
          dns_record:
            $ref: '#/components/schemas/dns-record'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_201_24:
      allOf:
      - required:
        - subdomain
        type: object
        properties:
          subdomain:
            $ref: '#/components/schemas/subdomain'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_79:
      allOf:
      - required:
        - meta
        - name_servers
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          name_servers:
            type: array
            items:
              $ref: '#/components/schemas/domain-name-server'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_80:
      allOf:
      - required:
        - meta
        - requests
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          requests:
            type: array
            items:
              $ref: '#/components/schemas/domain-request'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    v1_domainsrequests_body:
      oneOf:
      - $ref: '#/components/schemas/domain-register'
      - $ref: '#/components/schemas/domain-prolong'
      - $ref: '#/components/schemas/domain-transfer'
    inline_response_201_25:
      allOf:
      - required:
        - request
        type: object
        properties:
          request:
            $ref: '#/components/schemas/domain-request'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    domainsrequests_request_id_body:
      oneOf:
      - $ref: '#/components/schemas/use'
      - $ref: '#/components/schemas/invoice'
      - $ref: '#/components/schemas/free'
      - $ref: '#/components/schemas/bonus'
    inline_response_200_81:
      allOf:
      - required:
        - meta
        - top_level_domains
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          top_level_domains:
            type: array
            items:
              $ref: '#/components/schemas/top-level-domain'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_82:
      allOf:
      - required:
        - top_level_domain
        type: object
        properties:
          top_level_domain:
            $ref: '#/components/schemas/top-level-domain'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_83:
      allOf:
      - required:
        - is_domain_available
        type: object
        properties:
          is_domain_available:
            type: boolean
            description: "Это логическое значение, которое показывает, доступен ли\
              \ домен для регистрации."
            example: true
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_84:
      allOf:
      - required:
        - meta
        - vpcs
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          vpcs:
            type: array
            items:
              $ref: '#/components/schemas/vpc'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_201_26:
      allOf:
      - required:
        - vpc
        type: object
        properties:
          vpc:
            $ref: '#/components/schemas/vpc'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_85:
      allOf:
      - required:
        - meta
        - services
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          services:
            type: array
            items:
              $ref: '#/components/schemas/vpc-service'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_204:
      required:
      - vpc
      type: object
      properties:
        vpc:
          $ref: '#/components/schemas/vpc'
      example:
        vpc:
          subnet_v4: 192.168.0.0/24
          name: Общая сеть
          created_at: 2023-02-06T17:33:13Z
          description: Сеть для примера
          location: ru-1
          id: network-1234567890
    inline_response_200_86:
      allOf:
      - required:
        - meta
        - vpc_ports
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          vpc_ports:
            type: array
            items:
              $ref: '#/components/schemas/vpc-port'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_87:
      allOf:
      - required:
        - meta
        - ssh-keys
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          ssh-keys:
            type: array
            items:
              $ref: '#/components/schemas/ssh-key'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    v1_sshkeys_body:
      required:
      - body
      - is_default
      - name
      type: object
      properties:
        body:
          type: string
          description: Тело SSH-ключа
          example: ssh-dss AAAAB3NzaC1kc3MAAACBALixbc+uF2kuv83LiB3gg200vHJ7hH0QCC77fqlu+5raX6Y1PJZZORwzWbvU6k8gfrmjMRwQFDNncu3aXUiM9TleOBxFsQ2Hg5hDblSr2bnnyVP0jjPzsYye+0Ebaa+IjEqZz8y0qu8zejCpHqhLP/PlRDS9vtTsadrVvNwFFCyhAAAAFQD7m0AZOd/lHraIgBjXJvfN+qGiAQAAAIAdXSV0n47akGC/g0ejkNzHDSdRFf2fR0FsOos/7f5j+QfstijVBMwzA4Ti+dNJv3BQqQv3Bk5X3o5yUTUL+cM6fa4KSyIhGi14RL0kqjJrNjqVAhwjPH8K9aHDouqQEz56UL72+iGhMxwBHBMWq7cZ2k31mmFgEoYgwNcYuNmtlAAAAIBxIebJMItpq3ez5Hg5GyhpnSU7h0kshh+D5UAAlPmJo8OUQH6avQGf6gpxs3CnQ/im/aCKcb/bYm4V5Y9a7Zq+LrZGQZ79GLWsu/oK0HfQiP+oWwzCGmsdIGblsTRzrKU0FFo7zGmyTsBU48OeD76nKsc5EJ9F9wQC3S2KK38Ynw==
            test@MBP-test.office.timeweb.ru
        is_default:
          type: boolean
          description: |+
            Будет ли выбираться SSH-ключ по умолчанию при создании сервера

          example: false
        name:
          type: string
          description: Название SSH-ключа
          example: test
    inline_response_201_27:
      allOf:
      - required:
        - ssh-key
        type: object
        properties:
          ssh-key:
            $ref: '#/components/schemas/ssh-key'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    inline_response_200_88:
      allOf:
      - required:
        - meta
        - ssh-key
        type: object
        properties:
          meta:
            $ref: '#/components/schemas/meta'
          ssh-key:
            $ref: '#/components/schemas/ssh-key'
      - required:
        - response_id
        type: object
        properties:
          response_id:
            $ref: '#/components/schemas/response_id'
    sshkeys_ssh_key_id_body:
      type: object
      properties:
        body:
          type: string
          description: Тело SSH-ключа
          example: ssh-dss AAAAB3NzaC1kc3MAAACBALixbc+uF2kuv83LiB3gg200vHJ7hH0QCC77fqlu+5raX6Y1PJZZORwzWbvU6k8gfrmjMRwQFDNncu3aXUiM9TleOBxFsQ2Hg5hDblSr2bnnyVP0jjPzsYye+0Ebaa+IjEqZz8y0qu8zejCpHqhLP/PlRDS9vtTsadrVvNwFFCyhAAAAFQD7m0AZOd/lHraIgBjXJvfN+qGiAQAAAIAdXSV0n47akGC/g0ejkNzHDSdRFf2fR0FsOos/7f5j+QfstijVBMwzA4Ti+dNJv3BQqQv3Bk5X3o5yUTUL+cM6fa4KSyIhGi14RL0kqjJrNjqVAhwjPH8K9aHDouqQEz56UL72+iGhMxwBHBMWq7cZ2k31mmFgEoYgwNcYuNmtlAAAAIBxIebJMItpq3ez5Hg5GyhpnSU7h0kshh+D5UAAlPmJo8OUQH6avQGf6gpxs3CnQ/im/aCKcb/bYm4V5Y9a7Zq+LrZGQZ79GLWsu/oK0HfQiP+oWwzCGmsdIGblsTRzrKU0FFo7zGmyTsBU48OeD76nKsc5EJ9F9wQC3S2KK38Ynw==
            test@MBP-test.office.timeweb.ru
        is_default:
          type: boolean
          description: Будет ли выбираться SSH-ключ по умолчанию при создании сервера
          example: false
        name:
          type: string
          description: Название SSH-ключа
          example: test
    server_id_sshkeys_body:
      required:
      - ssh_key_ids
      type: object
      properties:
        ssh_key_ids:
          type: array
          description: Массив уникальных идентификаторов SSH-ключей
          items:
            type: number
            example: 1
    status_company_info:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: number
          description: Идентификатор компании.
          example: 0
        name:
          type: string
          description: Название компании.
          example: Пример
      description: Информация о компании.
    notificationsetting_channels:
      required:
      - email
      - sms
      - telegram
      type: object
      properties:
        email:
          $ref: '#/components/schemas/notification-setting-channel'
        sms:
          $ref: '#/components/schemas/notification-setting-channel'
        telegram:
          $ref: '#/components/schemas/notification-setting-channel'
      description: Каналы отправки уведомления.
    databasecluster_ips:
      required:
      - ip
      - type
      properties:
        type:
          type: string
          description: Тип IP-адреса сети
          example: ipv4
          enum:
          - ipv4
          - ipv6
        ip:
          type: string
          description: IP-адрес сети
          example: 0.0.0.0
    databasecluster_networks:
      required:
      - ips
      - type
      properties:
        type:
          type: string
          description: Тип сети.
          example: public
          enum:
          - public
          - local
        ips:
          type: array
          description: Список IP-адресов сети.
          nullable: true
          items:
            $ref: '#/components/schemas/databasecluster_ips'
    databasecluster_disk_stats:
      required:
      - size
      - used
      type: object
      properties:
        size:
          type: number
          description: Размер (в Кб) диска кластера базы данных.
          example: 10485760
        used:
          type: number
          description: Размер (в Кб) использованного пространства диска кластера базы
            данных.
          example: 486.11328125
      description: Статистика использования диска кластера базы данных.
      nullable: true
    createcluster_admin:
      type: object
      properties:
        login:
          type: string
          description: Имя пользователя базы данных
          example: default_login
        password:
          type: string
          description: Пароль пользователя базы данных
          example: bs.:L2f$Tm:SC~
        host:
          type: string
          description: Хост пользователя
          example: '%'
        privileges:
          type: array
          description: Список привилегий пользователя базы данных
          items:
            type: string
            enum:
            - ALTER
            - CREATE_VIEW
            - CREATE
            - DELETE
            - DROP
            - EVENT
            - INDEX
            - INSERT
            - LOCK_TABLES
            - REFERENCES
            - SELECT
            - SHOW_VIEW
            - TRUNCATE
            - UPDATE
            - READ
            - WRITE
            - CONNECTION
            - FAST
            - readWrite
            - ALTER_ROUTINE
            - CREATE_ROUTINE
            - TRANSACTION
        description:
          type: string
          description: Описание пользователя базы данных
          example: description
    createcluster_instance:
      type: object
      properties:
        name:
          type: string
          description: Название базы данных
          example: default_db
        description:
          type: string
          description: Описание базы данных
      description: База данных
    databaseadmin_instances:
      required:
      - instance_id
      - privileges
      type: object
      properties:
        instance_id:
          type: number
          description: Уникальный идентификатор базы данных
        privileges:
          type: array
          description: Список привилегий пользователя базы данных
          items:
            type: string
            enum:
            - ALTER
            - CREATE_VIEW
            - CREATE
            - DELETE
            - DROP
            - EVENT
            - INDEX
            - INSERT
            - LOCK_TABLES
            - REFERENCES
            - SELECT
            - SHOW_VIEW
            - TRUNCATE
            - UPDATE
            - READ
            - WRITE
            - CONNECTION
            - FAST
            - readWrite
            - ALTER_ROUTINE
            - CREATE_ROUTINE
            - TRANSACTION
    db_disk_stats:
      required:
      - size
      - used
      type: object
      properties:
        size:
          type: number
          description: Размер (в Кб) диска базы данных.
          example: 10485760
        used:
          type: number
          description: Размер (в Кб) использованного пространства диска базы данных.
          example: 486.11328125
      description: Статистика использования диска базы данных.
      nullable: true
    dedicatedserverpreset_cpu:
      required:
      - count
      - description
      - description_short
      type: object
      properties:
        description:
          type: string
          description: Описание характеристик процессора выделенного сервера.
          example: "Intel Xeon Gold 6208U\\r\\n    (16 ядер, 2.9-3.9 ГГц, 32 поток\
            а)"
        description_short:
          type: string
          description: Краткое описание характеристик процессора выделенного сервера.
          example: Intel Xeon Gold 6208U
        count:
          type: number
          description: Количество ядер процессора выделенного сервера.
          example: 16
      description: "Объект, содержащий информацию о процессоре выделенного сервера\
        ."
    dedicatedserverpreset_disk:
      required:
      - count
      - description
      type: object
      properties:
        description:
          type: string
          description: Описание характеристик диска выделенного сервера.
          example: 2 x 1 Тб NVMe
        count:
          type: number
          description: Количество дисков выделенного сервера.
          example: 16
      description: "Объект, содержащий информацию о диске выделенного сервера."
    dedicatedserverpreset_memory:
      required:
      - count
      - description
      - size
      type: object
      properties:
        description:
          type: string
          description: Описание характеристик ОЗУ выделенного сервера.
          example: 8 ГБ RAM
        count:
          type: number
          description: Количество ОЗУ выделенного сервера.
          example: 1
        size:
          type: number
          description: Размер (в Мб) ОЗУ выделенного сервера.
          example: 65536
      description: "Объект, содержащий информацию об ОЗУ выделенного сервера."
    vds_os:
      required:
      - id
      - name
      - version
      type: object
      properties:
        id:
          type: number
          description: Уникальный идентификатор операционной системы.
          example: 1
        name:
          type: string
          description: Тип операционной системы.
          enum:
          - bitrix
          - brainycp
          - centos
          - debian
          - fedora
          - freebsd
          - gentoo
          - routeros
          - ubuntu
          - windows
        version:
          type: string
          description: Версия операционной системы.
          nullable: true
          example: "18.04"
      description: Операционная система сервера.
    vds_software:
      type: object
      properties:
        id:
          type: number
          description: Уникальный идентификатор ПО из маркетплейса.
          example: 1
        name:
          type: string
          description: Название ПО из маркетплейса.
          example: name
      description: ПО из маркетплейса.
      nullable: true
    vds_disks:
      required:
      - id
      - is_mounted
      - is_system
      - size
      - status
      - system_name
      - type
      - used
      properties:
        id:
          type: number
          description: Уникальный идентификатор диска.
          example: 1
        size:
          type: number
          description: Размер диска (в Мб).
          example: 10240
        used:
          type: number
          description: Количество использованной памяти диска (в Мб).
          example: 5120
        type:
          type: string
          description: Тип диска.
          example: nvme
        is_mounted:
          type: boolean
          description: Является ли диск примонтированным.
          example: true
        is_system:
          type: boolean
          description: Является ли диск системным.
          example: true
        system_name:
          type: string
          description: Системное название диска.
          example: vda
        status:
          type: string
          description: Статус диска.
          example: done
    vds_image:
      required:
      - id
      - is_custom
      - name
      type: object
      properties:
        id:
          type: string
          description: Уникальный идентификатор образа сервера.
          example: 550e8400-e29b-41d4-a716-446655440000
        name:
          type: string
          description: Название образа сервера.
          example: image_name
        is_custom:
          type: boolean
          description: Является ли образ кастомным.
          example: true
      description: Образ сервера.
      nullable: true
    vds_ips:
      required:
      - ip
      - is_main
      - type
      properties:
        type:
          type: string
          description: Тип IP-адреса сети
          example: ipv4
          enum:
          - ipv4
          - ipv6
        ip:
          type: string
          description: IP-адрес сети.
          example: 0.0.0.0
        ptr:
          type: string
          description: Запись имени узла.
          example: ptr
        is_main:
          type: boolean
          description: Является ли сеть основной.
          example: true
    vds_networks:
      required:
      - ips
      - type
      properties:
        type:
          type: string
          description: Тип сети.
          example: public
          enum:
          - public
          - local
        nat_mode:
          type: string
          description: Тип преобразования сетевых адресов.
          example: dnat_and_snat
          enum:
          - dnat_and_snat
          - snat
          - no_nat
        bandwidth:
          type: number
          description: Пропускная способность сети.
          nullable: true
          example: 200
        ips:
          type: array
          description: Список IP-адресов сети.
          nullable: true
          items:
            $ref: '#/components/schemas/vds_ips'
        is_ddos_guard:
          type: boolean
          description: Подключена ли DDoS-защита. Только для публичных сетей.
          example: false
    createserver_configuration:
      required:
      - configurator_id
      - cpu
      - disk
      - ram
      type: object
      properties:
        configurator_id:
          type: number
          description: Уникальный идентификатор конфигуратора сервера.
          example: 11
        disk:
          type: number
          description: Размер диска в МБ.
          example: 15360
        cpu:
          type: number
          description: Количество ядер процессора.
          example: 1
        ram:
          type: number
          description: Размер ОЗУ сервера в МБ.
          example: 2048
      description: Параметры конфигурации сервера. Нельзя передавать вместе с `preset_id`.
    updateserver_configurator:
      type: object
      properties:
        configurator_id:
          type: number
          description: Уникальный идентификатор конфигуратора сервера.
          example: 11
        disk:
          type: number
          description: Размер диска в МБ.
          example: 15360
        cpu:
          type: number
          description: Количество ядер процессора.
          example: 1
        ram:
          type: number
          description: Размер ОЗУ сервера в МБ.
          example: 2048
      description: Параметры конфигурации сервера. Нельзя передавать вместе с `preset_id`.
    serversos_requirements:
      type: object
      properties:
        cpu_min:
          type: number
          description: Минимальной значение процессора.
          example: 2
        disk_min:
          type: number
          description: Минимальное значение диска.
          example: 200
        ram_min:
          type: number
          description: Минимальное значение оперативной памяти.
          example: 4
        bandwidth_min:
          type: number
          description: Минимальное значение пропускной способности.
          example: 100
      description: Требования к облачному серверу для установки операционной системы.
    serversconfigurator_requirements:
      required:
      - cpu_max
      - cpu_min
      - cpu_step
      - disk_max
      - disk_min
      - disk_step
      - network_bandwidth_max
      - network_bandwidth_min
      - network_bandwidth_step
      - ram_max
      - ram_min
      - ram_step
      properties:
        cpu_min:
          type: number
          description: Минимальное количество ядер процессора.
          example: 1
        cpu_step:
          type: number
          description: Размер шага ядер процессора.
          example: 1
        cpu_max:
          type: number
          description: Максимальное количество ядер процессора.
          example: 12
        ram_min:
          type: number
          description: Минимальное количество оперативной памяти (в Мб).
          example: 1024
        ram_step:
          type: number
          description: Размер шага оперативной памяти.
          example: 1024
        ram_max:
          type: number
          description: Максимальное количество оперативной памяти (в Мб).
          example: 8192
        disk_min:
          type: number
          description: Минимальный размер диска (в Мб).
          example: 10240
        disk_step:
          type: number
          description: Размер шага диска
          example: 1024
        disk_max:
          type: number
          description: Максимальный размер диска (в Мб).
          example: 30720
        network_bandwidth_min:
          type: number
          description: Минимальныая пропускная способноть интернет-канала (в Мб)
          example: 200
        network_bandwidth_step:
          type: number
          description: Размер шага пропускной способноти интернет-канала (в Мб)
          example: 100
        network_bandwidth_max:
          type: number
          description: Максимальная пропускная способноть интернет-канала (в Мб)
          example: 1000
    serverssoftware_requirements:
      type: object
      properties:
        cpu_min:
          type: number
          description: Минимальной значение процессора.
          example: 2
        disk_min:
          type: number
          description: Минимальное значение диска.
          example: 200
        ram_min:
          type: number
          description: Минимальное значение оперативной памяти.
          example: 4
        bandwidth_min:
          type: number
          description: Минимальное значение пропускной способности.
          example: 100
      description: Требования к облачному серверу для установки ПО.
    bucket_disk_stats:
      required:
      - size
      - used
      type: object
      properties:
        size:
          type: number
          description: Размер (в Кб) диска хранилища.
          example: 10485760
        used:
          type: number
          description: Размер (в Кб) использованного пространства диска хранилища.
          example: 486.11328125
      description: Статистика использования диска хранилища.
    transferstatus_errors:
      required:
      - try
      - value
      type: object
      properties:
        value:
          type: string
          description: Текст ошибки.
          example: error
        try:
          type: number
          description: Количество попыток.
          example: 1
    s3object_owner:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор владельца файла.
        display_name:
          type: string
          description: Имя владельца файла.
      description: Информация о владельце файла или папки.
    mailbox_auto_reply:
      required:
      - is_enabled
      - message
      - subject
      type: object
      properties:
        is_enabled:
          type: boolean
          description: Включен ли автоответчик на входящие письма
          example: true
        message:
          type: string
          description: Сообщение автоответчика на входящие письма
          example: some message
        subject:
          type: string
          description: Тема сообщения автоответчика на входящие письма
          example: some subject
      description: Автоответчик на входящие письма
    mailbox_spam_filter:
      required:
      - action
      - forward_to
      - is_enabled
      - white_list
      type: object
      properties:
        is_enabled:
          type: boolean
          description: Включен ли спам-фильтр
          example: true
        action:
          type: string
          description: |-
            Что делать с письмами, которые попадают в спам. \
             Параметры: \
             `move_to_directory` - переместить в паку спам; \
             `forward` - переслать письмо на другой адрес; \
             `delete` - удалить письмо; \
             `tag` - пометить письмо;
          example: forward
          enum:
          - move_to_directory
          - forward
          - delete
          - tag
        forward_to:
          type: string
          description: Адрес для пересылки при выбранном действии `forward` из параметра
            `action`
          example: test@timeweb.ru
        white_list:
          type: array
          description: Белый список адресов от которых письма не будут попадать в
            спам
          items:
            type: string
            example: test@timeweb.ru
      description: Спам-фильтр
    mailbox_forwarding_incoming:
      required:
      - incoming_list
      - is_delete_messages
      - is_enabled
      type: object
      properties:
        is_enabled:
          type: boolean
          description: Включена ли пересылка входящик писем
          example: true
        is_delete_messages:
          type: boolean
          description: Удалять ли входящие письма
          example: false
        incoming_list:
          type: array
          description: Список адресов для пересылки
          items:
            type: string
            example: test@timeweb.ru
      description: Пересылка входящик писем
    mailbox_forwarding_outgoing:
      required:
      - is_enabled
      - outgoing_to
      type: object
      properties:
        is_enabled:
          type: boolean
          description: Включена ли пересылка исходящих писем
          example: true
        outgoing_to:
          type: string
          description: Адрес для пересылки исходящих писем
          example: test@timeweb.ru
      description: Пересылка исходящих писем
    domain_allowed_buy_periods:
      required:
      - period
      - price
      type: object
      properties:
        period:
          $ref: '#/components/schemas/domain-payment-period'
        price:
          type: number
          description: Стоимость домена за указанный период.
          example: 179
    dnsrecord_data:
      required:
      - value
      type: object
      properties:
        priority:
          type: number
          description: Приоритет DNS-записи.
          example: 0
        subdomain:
          type: string
          description: Поддомен.
          nullable: true
          example: sub.somedomain.ru
        value:
          type: string
          description: Значение DNS-записи.
          example: 98.76.54.32
      description: Данные DNS-записи.
    domainnameserver_items:
      required:
      - host
      - ips
      type: object
      properties:
        host:
          type: string
          description: Хост name-сервера.
          example: ns1.timeweb.ru
        ips:
          type: array
          description: Список IP-адресов name-сервера
          items:
            type: string
            example: 98.76.54.32
    updatedomainnameservers_name_servers:
      required:
      - host
      type: object
      properties:
        host:
          type: string
          description: Хост name-сервера.
          example: ns1.timeweb.ru
        ips:
          type: array
          description: Список IP-адресов name-сервера
          items:
            type: string
            example: 98.76.54.32
    domainregister_ns:
      required:
      - host
      - ips
      type: object
      properties:
        host:
          type: string
          description: Хост name-сервера.
          example: ns1.timeweb.ru
        ips:
          type: array
          description: Список IP-адресов name-сервера
          items:
            type: string
            example: 192.168.1.1
    topleveldomain_allowed_buy_periods:
      required:
      - period
      - price
      type: object
      properties:
        period:
          type: string
          description: Период регистрации/продления домена.
          example: P1Y
        price:
          type: number
          description: Цена регистрации/продления домена.
          example: 123
    vpcport_service:
      required:
      - id
      - name
      - type
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор сервиса.
          example: 1
        type:
          type: string
          description: Тип сервиса.
          example: server
          enum:
          - server
          - balancer
          - dbaas
        name:
          type: string
          description: Название сервиса.
          example: Example
      description: "Сервис, к которому привязан порт."
    sshkey_used_by:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: number
          description: Уникальный идентификатор сервера
          example: 3
        name:
          type: string
          description: Название сервера
          example: test
    inline_response_200_38_cpu:
      required:
      - load
      - logged_at
      properties:
        logged_at:
          type: string
          description: Дата события в формате ISO 8061
          format: date-time
          example: 2023-02-05T20:37:57+03:00
        load:
          type: number
          description: "Нагрузка нагрузка на процессор. Возвращает значение от 0 д\
            о 1, где 1 это 100%"
          example: 0.123
    inline_response_200_38_network_traffic:
      required:
      - incoming
      - logged_at
      - outgoing
      properties:
        logged_at:
          type: string
          description: Дата события в формате ISO 8061
          format: date-time
          example: 2023-02-05T20:37:57+03:00
        incoming:
          type: number
          description: Входящий трафик сети в Мб/с
          example: 1.123
        outgoing:
          type: number
          description: Исходящий трафик сети в Мб/с
          example: 1.123
    inline_response_200_38_disk:
      required:
      - logged_at
      - read
      - write
      properties:
        logged_at:
          type: string
          description: Дата события в формате ISO 8061
          format: date-time
          example: 2023-02-05T20:37:57+03:00
        write:
          type: number
          description: Нагрузка на запись диска в Мб/с
          example: 1.123
        read:
          type: number
          description: Нагрузка на чтение диска в Мб/с
          example: 1.123
    inline_response_200_38_ram:
      required:
      - available
      - logged_at
      - total
      - used
      - used_cached
      properties:
        logged_at:
          type: string
          description: Дата события в формате ISO 8061
          format: date-time
          example: 2023-02-05T20:37:57+03:00
        total:
          type: number
          description: Общее количество оперативной памяти в Мб
          example: 1936
        used:
          type: number
          description: Количество потревляемой оперативной памяти в Мб
          example: 598
        used_cached:
          type: number
          description: Количество закешированной оперативной памяти в Мб
          example: 598
        available:
          type: number
          description: Количество доступной оперативной памяти в Мб
          example: 312
    inline_response_200_68_white_list:
      required:
      - countries
      - ips
      type: object
      properties:
        ips:
          type: array
          description: Список разрешенных IP-адресов.
          items:
            type: string
            format: ipv4
            example: 123.231.125.128
        countries:
          type: array
          description: Список разрешенных стран.
          items:
            type: string
            example: RU
  responses:
    "400":
      $ref: '#/components/responses/bad-request'
    "401":
      $ref: '#/components/responses/unauthorized'
    "403":
      $ref: '#/components/responses/forbidden'
    "404":
      $ref: '#/components/responses/not-found'
    "409":
      $ref: '#/components/responses/conflict'
    "429":
      $ref: '#/components/responses/too-many-requests'
    "500":
      $ref: '#/components/responses/internal-server-error'
    conflict:
      description: Конфликт
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_409'
    bad-request:
      description: Некорректный запрос
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_400'
    unauthorized:
      description: Не авторизован
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_401'
    forbidden:
      description: Запрещено
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_403'
    not-found:
      description: Не найдено
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_404'
    too-many-requests:
      description: Слишком много запросов
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_429'
    internal-server-error:
      description: Внутренняя ошибка сервера
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_500'
  parameters:
    limit:
      name: limit
      in: query
      description: "Обозначает количество записей, которое необходимо вернуть."
      required: false
      style: form
      explode: true
      schema:
        type: integer
        default: 100
    offset:
      name: offset
      in: query
      description: Указывает на смещение относительно начала списка.
      required: false
      style: form
      explode: true
      schema:
        type: integer
        default: 0
    balancer-id:
      name: balancer_id
      in: path
      description: Идентификатор балансировщика
      required: true
      style: simple
      explode: false
      schema:
        type: integer
    hash:
      name: hash
      in: query
      description: "Хеш, который совместно с кодом авторизации надо отправить для\
        \ удаления, если включено подтверждение удаления сервисов через Телеграм."
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: 15095f25-aac3-4d60-a788-96cb5136f186
    code:
      name: code
      in: query
      description: |-
        Код подтверждения, который придет к вам в Телеграм, после запроса удаления, если включено подтверждение удаления сервисов.

        При помощи API токена сервисы можно удалять без подтверждения, если параметр токена `is_able_to_delete` установлен в значение `true`
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: "0000"
    rule-id:
      name: rule_id
      in: path
      description: Идентификатор правила для балансировщика
      required: true
      style: simple
      explode: false
      schema:
        type: integer
    database-cluster-id:
      name: db_cluster_id
      in: path
      description: Идентификатор кластера базы данных
      required: true
      style: simple
      explode: false
      schema:
        type: integer
    admin-id:
      name: admin_id
      in: path
      description: Идентификатор пользователя базы данных
      required: true
      style: simple
      explode: false
      schema:
        type: integer
    instance-id:
      name: instance_id
      in: path
      description: Идентификатор инстанса базы данных
      required: true
      style: simple
      explode: false
      schema:
        type: integer
    dbs-id:
      name: db_id
      in: path
      description: Идентификатор базы данных
      required: true
      style: simple
      explode: false
      schema:
        type: integer
    backup-id:
      name: backup_id
      in: path
      description: Идентификатор резевной копии
      required: true
      style: simple
      explode: false
      schema:
        type: integer
    dedicated-id:
      name: dedicated_id
      in: path
      description: Уникальный идентификатор выделенного сервера.
      required: true
      style: simple
      explode: false
      schema:
        minimum: 1
        type: integer
        example: 1051
    preset-id:
      name: preset_id
      in: path
      description: Уникальный идентификатор тарифа выделенного сервера.
      required: true
      style: simple
      explode: false
      schema:
        minimum: 1
        type: integer
        example: 1051
    server-id:
      name: server_id
      in: path
      description: Уникальный идентификатор облачного сервера.
      required: true
      style: simple
      explode: false
      schema:
        minimum: 1
        type: integer
        example: 1051
    disk-id:
      name: disk_id
      in: path
      description: Уникальный идентификатор диска сервера.
      required: true
      style: simple
      explode: false
      schema:
        minimum: 1
        type: integer
        example: 1051
    server-backup-id:
      name: backup_id
      in: path
      description: Уникальный идентификатор бэкапа сервера.
      required: true
      style: simple
      explode: false
      schema:
        minimum: 1
        type: integer
        example: 1051
    project-id:
      name: project_id
      in: path
      description: Уникальный идентификатор проекта.
      required: true
      style: simple
      explode: false
      schema:
        minimum: 1
        type: integer
        example: 99
    bucket-id:
      name: bucket_id
      in: path
      description: Уникальный идентификатор хранилища.
      required: true
      style: simple
      explode: false
      schema:
        minimum: 1
        type: integer
        example: 1051
    user-id:
      name: user_id
      in: path
      description: Уникальный идентификатор пользователя хранилища.
      required: true
      style: simple
      explode: false
      schema:
        minimum: 1
        type: integer
        example: 1051
    prefix:
      name: prefix
      in: query
      description: Префикс для поиска файла.
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: example
    multipart:
      name: is_multipart
      in: query
      description: "Это логическое значение, которое используется для обозначения\
        \ multipart-загрузки."
      required: false
      style: form
      explode: true
      schema:
        type: boolean
        example: true
    path:
      name: path
      in: query
      description: Путь до директории в хранилище
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: test1/tes2
    api-key-id:
      name: token_id
      in: path
      description: Идентификатор токена
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
    search:
      name: search
      in: query
      description: Поиск почтового ящика по названию
      required: false
      style: form
      explode: true
      schema:
        type: string
    domain:
      name: domain
      in: path
      description: Полное имя домена
      required: true
      style: simple
      explode: false
      schema:
        type: string
        example: somedomain.ru
    mailbox:
      name: mailbox
      in: path
      description: Название почтового ящика
      required: true
      style: simple
      explode: false
      schema:
        type: string
        example: mailbox
    idn-name:
      name: idn_name
      in: query
      description: Интернационализированное доменное имя.
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: xn--e1afmkfd.xn--p1ai
    linked-ip:
      name: linked_ip
      in: query
      description: Привязанный к домену IP-адрес.
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: 192.168.1.1
    order:
      name: order
      in: query
      description: Порядок доменов.
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: asc
        enum:
        - asc
        - dsc
    sort:
      name: sort
      in: query
      description: Сортировка доменов.
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: idn_name
        enum:
        - idn_name
    domain-fqdn:
      name: fqdn
      in: path
      description: Полное имя домена.
      required: true
      style: simple
      explode: false
      schema:
        type: string
        example: somedomain.ru
    domain-subdomain-fqdn:
      name: fqdn
      in: path
      description: Полное имя домена или поддомена.
      required: true
      style: simple
      explode: false
      schema:
        type: string
        example: somedomain.ru
    record-id:
      name: record_id
      in: path
      description: Идентификатор DNS-записи домена или поддомена.
      required: true
      style: simple
      explode: false
      schema:
        type: integer
        example: 123
    subdomain-fqdn:
      name: subdomain_fqdn
      in: path
      description: Полное имя поддомена.
      required: true
      style: simple
      explode: false
      schema:
        type: string
        example: sub.somedomain.ru
    person-id:
      name: person_id
      in: query
      description: "Идентификатор администратора, на которого зарегистрирован доме\
        н."
      required: false
      style: form
      explode: true
      schema:
        type: integer
        example: 123
    request-id:
      name: request_id
      in: path
      description: Идентификатор заявки на регистрацию/продление/трансфер домена.
      required: true
      style: simple
      explode: false
      schema:
        type: integer
        example: 123
    is-published:
      name: is_published
      in: query
      description: "Это логическое значение, которое показывает, опубликована ли д\
        оменная зона."
      required: false
      style: form
      explode: true
      schema:
        type: boolean
        example: true
    is-registered:
      name: is_registered
      in: query
      description: "Это логическое значение, которое показывает, зарегистрирована\
        \ ли доменная зона."
      required: false
      style: form
      explode: true
      schema:
        type: boolean
        example: true
    tld-id:
      name: tld_id
      in: path
      description: Идентификатор доменной зоны.
      required: true
      style: simple
      explode: false
      schema:
        type: integer
        example: 123
    vpc-id:
      name: vpc_id
      in: path
      description: Идентификатор сети
      required: true
      style: simple
      explode: false
      schema:
        type: string
        description: Идентификатор сети
        example: network-1234567890
    ssh-key-id:
      name: ssh_key_id
      in: path
      description: Уникальный идентификатор SSH-ключа
      required: true
      style: simple
      explode: false
      schema:
        minimum: 1
        type: integer
        example: 1051
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
